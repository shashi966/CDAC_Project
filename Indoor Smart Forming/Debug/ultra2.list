
ultra2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008038  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080081c8  080081c8  000091c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008318  08008318  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008318  08008318  00009318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008320  08008320  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008320  08008320  00009320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008324  08008324  00009324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008328  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a060  2**0
                  CONTENTS
 10 .bss          000043bc  20000060  20000060  0000a060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000441c  2000441c  0000a060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017f22  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003721  00000000  00000000  00021fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001448  00000000  00000000  000256d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc9  00000000  00000000  00026b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024821  00000000  00000000  00027ae9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016cdd  00000000  00000000  0004c30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1393  00000000  00000000  00062fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014437a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bec  00000000  00000000  001443c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  00149fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080081b0 	.word	0x080081b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080081b0 	.word	0x080081b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b96a 	b.w	8000ef8 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	460c      	mov	r4, r1
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d14e      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c48:	4694      	mov	ip, r2
 8000c4a:	458c      	cmp	ip, r1
 8000c4c:	4686      	mov	lr, r0
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	d962      	bls.n	8000d1a <__udivmoddi4+0xde>
 8000c54:	b14a      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	4091      	lsls	r1, r2
 8000c5c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c64:	4319      	orrs	r1, r3
 8000c66:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6e:	fa1f f68c 	uxth.w	r6, ip
 8000c72:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c82:	fb04 f106 	mul.w	r1, r4, r6
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c92:	f080 8112 	bcs.w	8000eba <__udivmoddi4+0x27e>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 810f 	bls.w	8000eba <__udivmoddi4+0x27e>
 8000c9c:	3c02      	subs	r4, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a59      	subs	r1, r3, r1
 8000ca2:	fa1f f38e 	uxth.w	r3, lr
 8000ca6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000caa:	fb07 1110 	mls	r1, r7, r0, r1
 8000cae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb2:	fb00 f606 	mul.w	r6, r0, r6
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	d90a      	bls.n	8000cd0 <__udivmoddi4+0x94>
 8000cba:	eb1c 0303 	adds.w	r3, ip, r3
 8000cbe:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cc2:	f080 80fc 	bcs.w	8000ebe <__udivmoddi4+0x282>
 8000cc6:	429e      	cmp	r6, r3
 8000cc8:	f240 80f9 	bls.w	8000ebe <__udivmoddi4+0x282>
 8000ccc:	4463      	add	r3, ip
 8000cce:	3802      	subs	r0, #2
 8000cd0:	1b9b      	subs	r3, r3, r6
 8000cd2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	b11d      	cbz	r5, 8000ce2 <__udivmoddi4+0xa6>
 8000cda:	40d3      	lsrs	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d905      	bls.n	8000cf6 <__udivmoddi4+0xba>
 8000cea:	b10d      	cbz	r5, 8000cf0 <__udivmoddi4+0xb4>
 8000cec:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e7f5      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000cf6:	fab3 f183 	clz	r1, r3
 8000cfa:	2900      	cmp	r1, #0
 8000cfc:	d146      	bne.n	8000d8c <__udivmoddi4+0x150>
 8000cfe:	42a3      	cmp	r3, r4
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xcc>
 8000d02:	4290      	cmp	r0, r2
 8000d04:	f0c0 80f0 	bcc.w	8000ee8 <__udivmoddi4+0x2ac>
 8000d08:	1a86      	subs	r6, r0, r2
 8000d0a:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	d0e6      	beq.n	8000ce2 <__udivmoddi4+0xa6>
 8000d14:	e9c5 6300 	strd	r6, r3, [r5]
 8000d18:	e7e3      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000d1a:	2a00      	cmp	r2, #0
 8000d1c:	f040 8090 	bne.w	8000e40 <__udivmoddi4+0x204>
 8000d20:	eba1 040c 	sub.w	r4, r1, ip
 8000d24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d28:	fa1f f78c 	uxth.w	r7, ip
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3e:	fb07 f006 	mul.w	r0, r7, r6
 8000d42:	4298      	cmp	r0, r3
 8000d44:	d908      	bls.n	8000d58 <__udivmoddi4+0x11c>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x11a>
 8000d50:	4298      	cmp	r0, r3
 8000d52:	f200 80cd 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d56:	4626      	mov	r6, r4
 8000d58:	1a1c      	subs	r4, r3, r0
 8000d5a:	fa1f f38e 	uxth.w	r3, lr
 8000d5e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d62:	fb08 4410 	mls	r4, r8, r0, r4
 8000d66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6a:	fb00 f707 	mul.w	r7, r0, r7
 8000d6e:	429f      	cmp	r7, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x148>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x146>
 8000d7c:	429f      	cmp	r7, r3
 8000d7e:	f200 80b0 	bhi.w	8000ee2 <__udivmoddi4+0x2a6>
 8000d82:	4620      	mov	r0, r4
 8000d84:	1bdb      	subs	r3, r3, r7
 8000d86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0x9c>
 8000d8c:	f1c1 0620 	rsb	r6, r1, #32
 8000d90:	408b      	lsls	r3, r1
 8000d92:	fa22 f706 	lsr.w	r7, r2, r6
 8000d96:	431f      	orrs	r7, r3
 8000d98:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d9c:	fa04 f301 	lsl.w	r3, r4, r1
 8000da0:	ea43 030c 	orr.w	r3, r3, ip
 8000da4:	40f4      	lsrs	r4, r6
 8000da6:	fa00 f801 	lsl.w	r8, r0, r1
 8000daa:	0c38      	lsrs	r0, r7, #16
 8000dac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db0:	fbb4 fef0 	udiv	lr, r4, r0
 8000db4:	fa1f fc87 	uxth.w	ip, r7
 8000db8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dbc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc0:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc4:	45a1      	cmp	r9, r4
 8000dc6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dca:	d90a      	bls.n	8000de2 <__udivmoddi4+0x1a6>
 8000dcc:	193c      	adds	r4, r7, r4
 8000dce:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dd2:	f080 8084 	bcs.w	8000ede <__udivmoddi4+0x2a2>
 8000dd6:	45a1      	cmp	r9, r4
 8000dd8:	f240 8081 	bls.w	8000ede <__udivmoddi4+0x2a2>
 8000ddc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de0:	443c      	add	r4, r7
 8000de2:	eba4 0409 	sub.w	r4, r4, r9
 8000de6:	fa1f f983 	uxth.w	r9, r3
 8000dea:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dee:	fb00 4413 	mls	r4, r0, r3, r4
 8000df2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1d2>
 8000dfe:	193c      	adds	r4, r7, r4
 8000e00:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e04:	d267      	bcs.n	8000ed6 <__udivmoddi4+0x29a>
 8000e06:	45a4      	cmp	ip, r4
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0x29a>
 8000e0a:	3b02      	subs	r3, #2
 8000e0c:	443c      	add	r4, r7
 8000e0e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e12:	fba0 9302 	umull	r9, r3, r0, r2
 8000e16:	eba4 040c 	sub.w	r4, r4, ip
 8000e1a:	429c      	cmp	r4, r3
 8000e1c:	46ce      	mov	lr, r9
 8000e1e:	469c      	mov	ip, r3
 8000e20:	d351      	bcc.n	8000ec6 <__udivmoddi4+0x28a>
 8000e22:	d04e      	beq.n	8000ec2 <__udivmoddi4+0x286>
 8000e24:	b155      	cbz	r5, 8000e3c <__udivmoddi4+0x200>
 8000e26:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e32:	40cb      	lsrs	r3, r1
 8000e34:	431e      	orrs	r6, r3
 8000e36:	40cc      	lsrs	r4, r1
 8000e38:	e9c5 6400 	strd	r6, r4, [r5]
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	e750      	b.n	8000ce2 <__udivmoddi4+0xa6>
 8000e40:	f1c2 0320 	rsb	r3, r2, #32
 8000e44:	fa20 f103 	lsr.w	r1, r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e50:	4094      	lsls	r4, r2
 8000e52:	430c      	orrs	r4, r1
 8000e54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e58:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e5c:	fa1f f78c 	uxth.w	r7, ip
 8000e60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e64:	fb08 3110 	mls	r1, r8, r0, r3
 8000e68:	0c23      	lsrs	r3, r4, #16
 8000e6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6e:	fb00 f107 	mul.w	r1, r0, r7
 8000e72:	4299      	cmp	r1, r3
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x24c>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e7e:	d22c      	bcs.n	8000eda <__udivmoddi4+0x29e>
 8000e80:	4299      	cmp	r1, r3
 8000e82:	d92a      	bls.n	8000eda <__udivmoddi4+0x29e>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1a5b      	subs	r3, r3, r1
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e90:	fb08 3311 	mls	r3, r8, r1, r3
 8000e94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e98:	fb01 f307 	mul.w	r3, r1, r7
 8000e9c:	42a3      	cmp	r3, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x276>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ea8:	d213      	bcs.n	8000ed2 <__udivmoddi4+0x296>
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	d911      	bls.n	8000ed2 <__udivmoddi4+0x296>
 8000eae:	3902      	subs	r1, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	1ae4      	subs	r4, r4, r3
 8000eb4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb8:	e739      	b.n	8000d2e <__udivmoddi4+0xf2>
 8000eba:	4604      	mov	r4, r0
 8000ebc:	e6f0      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ebe:	4608      	mov	r0, r1
 8000ec0:	e706      	b.n	8000cd0 <__udivmoddi4+0x94>
 8000ec2:	45c8      	cmp	r8, r9
 8000ec4:	d2ae      	bcs.n	8000e24 <__udivmoddi4+0x1e8>
 8000ec6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eca:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ece:	3801      	subs	r0, #1
 8000ed0:	e7a8      	b.n	8000e24 <__udivmoddi4+0x1e8>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	e7ed      	b.n	8000eb2 <__udivmoddi4+0x276>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	e799      	b.n	8000e0e <__udivmoddi4+0x1d2>
 8000eda:	4630      	mov	r0, r6
 8000edc:	e7d4      	b.n	8000e88 <__udivmoddi4+0x24c>
 8000ede:	46d6      	mov	lr, sl
 8000ee0:	e77f      	b.n	8000de2 <__udivmoddi4+0x1a6>
 8000ee2:	4463      	add	r3, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e74d      	b.n	8000d84 <__udivmoddi4+0x148>
 8000ee8:	4606      	mov	r6, r0
 8000eea:	4623      	mov	r3, r4
 8000eec:	4608      	mov	r0, r1
 8000eee:	e70f      	b.n	8000d10 <__udivmoddi4+0xd4>
 8000ef0:	3e02      	subs	r6, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	e730      	b.n	8000d58 <__udivmoddi4+0x11c>
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a07      	ldr	r2, [pc, #28]	@ (8000f28 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <vApplicationGetIdleTaskMemory+0x30>)
 8000f12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2280      	movs	r2, #128	@ 0x80
 8000f18:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	2000007c 	.word	0x2000007c
 8000f2c:	2000011c 	.word	0x2000011c

08000f30 <HAL_ADC_ConvCpltCallback>:
void StartDefaultTask(void const * argument);

/* USER CODE BEGIN PFP */
uint16_t ConvComplete =0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  ConvComplete =1;
 8000f38:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <HAL_ADC_ConvCpltCallback+0x1c>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	801a      	strh	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	2000052c 	.word	0x2000052c

08000f50 <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint16_t time){
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);
 8000f5a:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <delay+0x30>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(&htim2) < time);
 8000f62:	bf00      	nop
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <delay+0x30>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f6a:	88fb      	ldrh	r3, [r7, #6]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3f9      	bcc.n	8000f64 <delay+0x14>

}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000494 	.word	0x20000494
 8000f84:	00000000 	.word	0x00000000

08000f88 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	@ 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
    if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	7f1b      	ldrb	r3, [r3, #28]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	f040 80a1 	bne.w	80010dc <HAL_TIM_IC_CaptureCallback+0x154>
        if(Is_First_Captured == 0){
 8000f9a:	4b55      	ldr	r3, [pc, #340]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d121      	bne.n	8000fe6 <HAL_TIM_IC_CaptureCallback+0x5e>
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f003 fc81 	bl	80048ac <HAL_TIM_ReadCapturedValue>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a51      	ldr	r2, [pc, #324]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000fae:	6013      	str	r3, [r2, #0]
            Is_First_Captured = 1;
 8000fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6a1a      	ldr	r2, [r3, #32]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 020a 	bic.w	r2, r2, #10
 8000fc4:	621a      	str	r2, [r3, #32]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6a1a      	ldr	r2, [r3, #32]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 0202 	orr.w	r2, r2, #2
 8000fd4:	621a      	str	r2, [r3, #32]
            // Debug print to check first capture
            HAL_UART_Transmit(&huart2, (uint8_t*)"First capture\r\n", strlen("First capture\r\n"), HAL_MAX_DELAY);
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fda:	220f      	movs	r2, #15
 8000fdc:	4946      	ldr	r1, [pc, #280]	@ (80010f8 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000fde:	4847      	ldr	r0, [pc, #284]	@ (80010fc <HAL_TIM_IC_CaptureCallback+0x174>)
 8000fe0:	f003 ffa2 	bl	8004f28 <HAL_UART_Transmit>
            char msg[32];
            sprintf(msg, "Distance: %u\r\n", Distance);
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
        }
    }
}
 8000fe4:	e07a      	b.n	80010dc <HAL_TIM_IC_CaptureCallback+0x154>
        else if(Is_First_Captured == 1){
 8000fe6:	4b42      	ldr	r3, [pc, #264]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d176      	bne.n	80010dc <HAL_TIM_IC_CaptureCallback+0x154>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000fee:	2100      	movs	r1, #0
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f003 fc5b 	bl	80048ac <HAL_TIM_ReadCapturedValue>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a41      	ldr	r2, [pc, #260]	@ (8001100 <HAL_TIM_IC_CaptureCallback+0x178>)
 8000ffa:	6013      	str	r3, [r2, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	625a      	str	r2, [r3, #36]	@ 0x24
            if (IC_Val2 > IC_Val1) {
 8001004:	4b3e      	ldr	r3, [pc, #248]	@ (8001100 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b3a      	ldr	r3, [pc, #232]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	429a      	cmp	r2, r3
 800100e:	d907      	bls.n	8001020 <HAL_TIM_IC_CaptureCallback+0x98>
                Difference = IC_Val2 - IC_Val1;
 8001010:	4b3b      	ldr	r3, [pc, #236]	@ (8001100 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b37      	ldr	r3, [pc, #220]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	4a3a      	ldr	r2, [pc, #232]	@ (8001104 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00f      	b.n	8001040 <HAL_TIM_IC_CaptureCallback+0xb8>
            } else if (IC_Val1 > IC_Val2) {
 8001020:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b36      	ldr	r3, [pc, #216]	@ (8001100 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d909      	bls.n	8001040 <HAL_TIM_IC_CaptureCallback+0xb8>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <HAL_TIM_IC_CaptureCallback+0x178>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800103a:	33ff      	adds	r3, #255	@ 0xff
 800103c:	4a31      	ldr	r2, [pc, #196]	@ (8001104 <HAL_TIM_IC_CaptureCallback+0x17c>)
 800103e:	6013      	str	r3, [r2, #0]
            Distance = Difference * .034 / 2;
 8001040:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa5d 	bl	8000504 <__aeabi_ui2d>
 800104a:	a327      	add	r3, pc, #156	@ (adr r3, 80010e8 <HAL_TIM_IC_CaptureCallback+0x160>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fad2 	bl	80005f8 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fd5c 	bl	8000b2c <__aeabi_d2uiz>
 8001074:	4603      	mov	r3, r0
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b23      	ldr	r3, [pc, #140]	@ (8001108 <HAL_TIM_IC_CaptureCallback+0x180>)
 800107a:	701a      	strb	r2, [r3, #0]
            Is_First_Captured = 0; // set it back to false
 800107c:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0x168>)
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 020a 	bic.w	r2, r2, #10
 8001090:	621a      	str	r2, [r3, #32]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6a12      	ldr	r2, [r2, #32]
 800109c:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <HAL_TIM_IC_CaptureCallback+0x184>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68da      	ldr	r2, [r3, #12]
 80010a4:	4b19      	ldr	r3, [pc, #100]	@ (800110c <HAL_TIM_IC_CaptureCallback+0x184>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0202 	bic.w	r2, r2, #2
 80010ac:	60da      	str	r2, [r3, #12]
            sprintf(msg, "Distance: %u\r\n", Distance);
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <HAL_TIM_IC_CaptureCallback+0x180>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	f107 0308 	add.w	r3, r7, #8
 80010b8:	4915      	ldr	r1, [pc, #84]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x188>)
 80010ba:	4618      	mov	r0, r3
 80010bc:	f006 fb7a 	bl	80077b4 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010c0:	f107 0308 	add.w	r3, r7, #8
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f883 	bl	80001d0 <strlen>
 80010ca:	4603      	mov	r3, r0
 80010cc:	b29a      	uxth	r2, r3
 80010ce:	f107 0108 	add.w	r1, r7, #8
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010d6:	4809      	ldr	r0, [pc, #36]	@ (80010fc <HAL_TIM_IC_CaptureCallback+0x174>)
 80010d8:	f003 ff26 	bl	8004f28 <HAL_UART_Transmit>
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	f3af 8000 	nop.w
 80010e8:	b020c49c 	.word	0xb020c49c
 80010ec:	3fa16872 	.word	0x3fa16872
 80010f0:	20000328 	.word	0x20000328
 80010f4:	2000031c 	.word	0x2000031c
 80010f8:	080081c8 	.word	0x080081c8
 80010fc:	200004dc 	.word	0x200004dc
 8001100:	20000320 	.word	0x20000320
 8001104:	20000324 	.word	0x20000324
 8001108:	20000329 	.word	0x20000329
 800110c:	20000494 	.word	0x20000494
 8001110:	080081d8 	.word	0x080081d8

08001114 <HCSR04_Read>:

void HCSR04_Read(void){
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2102      	movs	r1, #2
 800111c:	480a      	ldr	r0, [pc, #40]	@ (8001148 <HCSR04_Read+0x34>)
 800111e:	f002 fb13 	bl	8003748 <HAL_GPIO_WritePin>
	delay(10);
 8001122:	200a      	movs	r0, #10
 8001124:	f7ff ff14 	bl	8000f50 <delay>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	4806      	ldr	r0, [pc, #24]	@ (8001148 <HCSR04_Read+0x34>)
 800112e:	f002 fb0b 	bl	8003748 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim2,TIM_IT_CC1);
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HCSR04_Read+0x38>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68da      	ldr	r2, [r3, #12]
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <HCSR04_Read+0x38>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 0202 	orr.w	r2, r2, #2
 8001140:	60da      	str	r2, [r3, #12]

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40020000 	.word	0x40020000
 800114c:	20000494 	.word	0x20000494

08001150 <ADC_CH1>:
void ADC_CH1(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = {0};
 8001156:	463b      	mov	r3, r7
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_1;
 8001162:	2301      	movs	r3, #1
 8001164:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001166:	2301      	movs	r3, #1
 8001168:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <ADC_CH1+0x38>)
 8001170:	f001 fb5a 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <ADC_CH1+0x2e>
	  {
	    Error_Handler();
 800117a:	f000 fd01 	bl	8001b80 <Error_Handler>
	  }
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000035c 	.word	0x2000035c

0800118c <TEMP_CH2>:
void TEMP_CH2(void){
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800119e:	2310      	movs	r3, #16
 80011a0:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80011a2:	2301      	movs	r3, #1
 80011a4:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	@ (80011c4 <TEMP_CH2+0x38>)
 80011ac:	f001 fb3c 	bl	8002828 <HAL_ADC_ConfigChannel>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <TEMP_CH2+0x2e>
	  {
	    Error_Handler();
 80011b6:	f000 fce3 	bl	8001b80 <Error_Handler>
	  }
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000035c 	.word	0x2000035c

080011c8 <xultra>:
void xultra(void *pvParam){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	@ 0x30
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	char msg[32];
	//int Distance=0;
	portTickType xLastTime = xTaskGetTickCount();
 80011d0:	f005 face 	bl	8006770 <xTaskGetTickCount>
 80011d4:	4603      	mov	r3, r0
 80011d6:	60fb      	str	r3, [r7, #12]
	while(1){
		sprintf(msg,"Water level %u\n ",Distance);
 80011d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <xultra+0x4c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	f107 0310 	add.w	r3, r7, #16
 80011e2:	490d      	ldr	r1, [pc, #52]	@ (8001218 <xultra+0x50>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f006 fae5 	bl	80077b4 <siprintf>
		HCSR04_Read();
 80011ea:	f7ff ff93 	bl	8001114 <HCSR04_Read>
		//HAL_UART_Transmit(&huart2,(uint8_t*)msg ,strlen(msg) ,HAL_MAX_DELAY);
		xQueueSendToBack(xQueue,&msg,portMAX_DELAY);
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <xultra+0x54>)
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	f107 0110 	add.w	r1, r7, #16
 80011f6:	2300      	movs	r3, #0
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011fc:	f004 fc48 	bl	8005a90 <xQueueGenericSend>
		vTaskDelayUntil(&xLastTime, 5000/portTICK_RATE_MS);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001208:	4618      	mov	r0, r3
 800120a:	f005 f8e5 	bl	80063d8 <vTaskDelayUntil>
		sprintf(msg,"Water level %u\n ",Distance);
 800120e:	bf00      	nop
 8001210:	e7e2      	b.n	80011d8 <xultra+0x10>
 8001212:	bf00      	nop
 8001214:	20000329 	.word	0x20000329
 8001218:	080081e8 	.word	0x080081e8
 800121c:	20000524 	.word	0x20000524

08001220 <vADCLM35>:
	}
	vTaskDelete(NULL);
}
void vADCLM35(void *pvParam)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08c      	sub	sp, #48	@ 0x30
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	char msg[28];
	portTickType xLastTime = xTaskGetTickCount();
 8001228:	f005 faa2 	bl	8006770 <xTaskGetTickCount>
 800122c:	4603      	mov	r3, r0
 800122e:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_ADC_Start(&hadc2);
 8001230:	4813      	ldr	r0, [pc, #76]	@ (8001280 <vADCLM35+0x60>)
 8001232:	f001 f837 	bl	80022a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001236:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800123a:	4811      	ldr	r0, [pc, #68]	@ (8001280 <vADCLM35+0x60>)
 800123c:	f001 f937 	bl	80024ae <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc2);
 8001240:	480f      	ldr	r0, [pc, #60]	@ (8001280 <vADCLM35+0x60>)
 8001242:	f001 facf 	bl	80027e4 <HAL_ADC_GetValue>
 8001246:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_ADC_Stop(&hadc2);
 8001248:	480d      	ldr	r0, [pc, #52]	@ (8001280 <vADCLM35+0x60>)
 800124a:	f001 f8fd 	bl	8002448 <HAL_ADC_Stop>


		sprintf(msg, "ADC LM35 value : %ld \n", value);
 800124e:	f107 0310 	add.w	r3, r7, #16
 8001252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001254:	490b      	ldr	r1, [pc, #44]	@ (8001284 <vADCLM35+0x64>)
 8001256:	4618      	mov	r0, r3
 8001258:	f006 faac 	bl	80077b4 <siprintf>
	//	HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
		//sprintf(msg,"Water level %u\r\n ",Distance);
		xQueueSendToBack(xQueue,&msg,portMAX_DELAY);
 800125c:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <vADCLM35+0x68>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	f107 0110 	add.w	r1, r7, #16
 8001264:	2300      	movs	r3, #0
 8001266:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800126a:	f004 fc11 	bl	8005a90 <xQueueGenericSend>
		vTaskDelayUntil(&xLastTime, 5000 / portTICK_RATE_MS);
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001276:	4618      	mov	r0, r3
 8001278:	f005 f8ae 	bl	80063d8 <vTaskDelayUntil>
	while(1){
 800127c:	bf00      	nop
 800127e:	e7d7      	b.n	8001230 <vADCLM35+0x10>
 8001280:	200003a4 	.word	0x200003a4
 8001284:	080081fc 	.word	0x080081fc
 8001288:	20000524 	.word	0x20000524

0800128c <xADCMQ2>:
	}
	vTaskDelete(NULL);
}
void xADCMQ2(void *pvParam)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	@ 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	char msg[28];
	//char ultra[32];
	portTickType xLastTime = xTaskGetTickCount();
 8001294:	f005 fa6c 	bl	8006770 <xTaskGetTickCount>
 8001298:	4603      	mov	r3, r0
 800129a:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_ADC_Start(&hadc3);
 800129c:	4813      	ldr	r0, [pc, #76]	@ (80012ec <xADCMQ2+0x60>)
 800129e:	f001 f801 	bl	80022a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80012a2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a6:	4811      	ldr	r0, [pc, #68]	@ (80012ec <xADCMQ2+0x60>)
 80012a8:	f001 f901 	bl	80024ae <HAL_ADC_PollForConversion>
		uint32_t value = HAL_ADC_GetValue(&hadc3);
 80012ac:	480f      	ldr	r0, [pc, #60]	@ (80012ec <xADCMQ2+0x60>)
 80012ae:	f001 fa99 	bl	80027e4 <HAL_ADC_GetValue>
 80012b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_ADC_Stop(&hadc3);
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <xADCMQ2+0x60>)
 80012b6:	f001 f8c7 	bl	8002448 <HAL_ADC_Stop>

		sprintf(msg, "ADC MQ2 value : %ld \n", value);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c0:	490b      	ldr	r1, [pc, #44]	@ (80012f0 <xADCMQ2+0x64>)
 80012c2:	4618      	mov	r0, r3
 80012c4:	f006 fa76 	bl	80077b4 <siprintf>
		//sprintf(ultra,"Water level %u\r\n ",Distance);
		//HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
		xQueueSendToBack(xQueue,&msg,portMAX_DELAY);
 80012c8:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <xADCMQ2+0x68>)
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	f107 0110 	add.w	r1, r7, #16
 80012d0:	2300      	movs	r3, #0
 80012d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012d6:	f004 fbdb 	bl	8005a90 <xQueueGenericSend>
		//HAL_UART_Transmit(&huart2, (uint8_t*)ultra, strlen(ultra), HAL_MAX_DELAY);
		vTaskDelayUntil(&xLastTime, 5000 / portTICK_RATE_MS);
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	f241 3188 	movw	r1, #5000	@ 0x1388
 80012e2:	4618      	mov	r0, r3
 80012e4:	f005 f878 	bl	80063d8 <vTaskDelayUntil>
	while(1){
 80012e8:	bf00      	nop
 80012ea:	e7d7      	b.n	800129c <xADCMQ2+0x10>
 80012ec:	200003ec 	.word	0x200003ec
 80012f0:	08008214 	.word	0x08008214
 80012f4:	20000524 	.word	0x20000524

080012f8 <vADCTEMP_LDR>:
	}
	vTaskDelete(NULL);
}
void vADCTEMP_LDR(void* pvParam){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	@ 0x50
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	portTickType xLastTime = xTaskGetTickCount();
 8001300:	f005 fa36 	bl	8006770 <xTaskGetTickCount>
 8001304:	4603      	mov	r3, r0
 8001306:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while(1){
		var = val*4096/3.3;
 8001308:	4b73      	ldr	r3, [pc, #460]	@ (80014d8 <vADCTEMP_LDR+0x1e0>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80014dc <vADCTEMP_LDR+0x1e4>
 8001312:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001316:	ee17 0a90 	vmov	r0, s15
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	a366      	add	r3, pc, #408	@ (adr r3, 80014b8 <vADCTEMP_LDR+0x1c0>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff fa92 	bl	800084c <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fbfc 	bl	8000b2c <__aeabi_d2uiz>
 8001334:	4603      	mov	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b69      	ldr	r3, [pc, #420]	@ (80014e0 <vADCTEMP_LDR+0x1e8>)
 800133a:	801a      	strh	r2, [r3, #0]
		val+=0.1;
 800133c:	4b66      	ldr	r3, [pc, #408]	@ (80014d8 <vADCTEMP_LDR+0x1e0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f901 	bl	8000548 <__aeabi_f2d>
 8001346:	a35e      	add	r3, pc, #376	@ (adr r3, 80014c0 <vADCTEMP_LDR+0x1c8>)
 8001348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134c:	f7fe ff9e 	bl	800028c <__adddf3>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fc08 	bl	8000b6c <__aeabi_d2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4a5e      	ldr	r2, [pc, #376]	@ (80014d8 <vADCTEMP_LDR+0x1e0>)
 8001360:	6013      	str	r3, [r2, #0]
		if(val>=3.3)
 8001362:	4b5d      	ldr	r3, [pc, #372]	@ (80014d8 <vADCTEMP_LDR+0x1e0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f8ee 	bl	8000548 <__aeabi_f2d>
 800136c:	a352      	add	r3, pc, #328	@ (adr r3, 80014b8 <vADCTEMP_LDR+0x1c0>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff fbc7 	bl	8000b04 <__aeabi_dcmpge>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <vADCTEMP_LDR+0x8c>
		val=0;
 800137c:	4b56      	ldr	r3, [pc, #344]	@ (80014d8 <vADCTEMP_LDR+0x1e0>)
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
		ADC_CH1();
 8001384:	f7ff fee4 	bl	8001150 <ADC_CH1>
		HAL_ADC_Start(&hadc1);
 8001388:	4856      	ldr	r0, [pc, #344]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 800138a:	f000 ff8b 	bl	80022a4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1,1000);
 800138e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001392:	4854      	ldr	r0, [pc, #336]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 8001394:	f001 f88b 	bl	80024ae <HAL_ADC_PollForConversion>
		ADC_VAL[0]=HAL_ADC_GetValue(&hadc1);
 8001398:	4852      	ldr	r0, [pc, #328]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 800139a:	f001 fa23 	bl	80027e4 <HAL_ADC_GetValue>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	4b51      	ldr	r3, [pc, #324]	@ (80014e8 <vADCTEMP_LDR+0x1f0>)
 80013a4:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80013a6:	484f      	ldr	r0, [pc, #316]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 80013a8:	f001 f84e 	bl	8002448 <HAL_ADC_Stop>
		sprintf(msg, "LDR: %d\n",ADC_VAL[0]);
 80013ac:	4b4e      	ldr	r3, [pc, #312]	@ (80014e8 <vADCTEMP_LDR+0x1f0>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	494e      	ldr	r1, [pc, #312]	@ (80014ec <vADCTEMP_LDR+0x1f4>)
 80013b4:	484e      	ldr	r0, [pc, #312]	@ (80014f0 <vADCTEMP_LDR+0x1f8>)
 80013b6:	f006 f9fd 	bl	80077b4 <siprintf>
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		char copymsg[32];
		strcpy(copymsg,msg);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	494c      	ldr	r1, [pc, #304]	@ (80014f0 <vADCTEMP_LDR+0x1f8>)
 80013c0:	4618      	mov	r0, r3
 80013c2:	f006 faa1 	bl	8007908 <strcpy>
		xQueueSendToBack(xQueue,&copymsg,portMAX_DELAY);
 80013c6:	4b4b      	ldr	r3, [pc, #300]	@ (80014f4 <vADCTEMP_LDR+0x1fc>)
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	f107 010c 	add.w	r1, r7, #12
 80013ce:	2300      	movs	r3, #0
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d4:	f004 fb5c 	bl	8005a90 <xQueueGenericSend>

		TEMP_CH2();
 80013d8:	f7ff fed8 	bl	800118c <TEMP_CH2>
	    HAL_ADC_Start(&hadc1);
 80013dc:	4841      	ldr	r0, [pc, #260]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 80013de:	f000 ff61 	bl	80022a4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1,1000);
 80013e2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013e6:	483f      	ldr	r0, [pc, #252]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 80013e8:	f001 f861 	bl	80024ae <HAL_ADC_PollForConversion>
	    ADC_VAL[2]=HAL_ADC_GetValue(&hadc1);
 80013ec:	483d      	ldr	r0, [pc, #244]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 80013ee:	f001 f9f9 	bl	80027e4 <HAL_ADC_GetValue>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	4b3c      	ldr	r3, [pc, #240]	@ (80014e8 <vADCTEMP_LDR+0x1f0>)
 80013f8:	809a      	strh	r2, [r3, #4]
	    HAL_ADC_Stop(&hadc1);
 80013fa:	483a      	ldr	r0, [pc, #232]	@ (80014e4 <vADCTEMP_LDR+0x1ec>)
 80013fc:	f001 f824 	bl	8002448 <HAL_ADC_Stop>
		Temp =((3.3 * ADC_VAL[2]/4096 - V25)/Avg_Slope)+25;
 8001400:	4b39      	ldr	r3, [pc, #228]	@ (80014e8 <vADCTEMP_LDR+0x1f0>)
 8001402:	889b      	ldrh	r3, [r3, #4]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff f88d 	bl	8000524 <__aeabi_i2d>
 800140a:	a32b      	add	r3, pc, #172	@ (adr r3, 80014b8 <vADCTEMP_LDR+0x1c0>)
 800140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001410:	f7ff f8f2 	bl	80005f8 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <vADCTEMP_LDR+0x200>)
 8001422:	f7ff fa13 	bl	800084c <__aeabi_ddiv>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	a326      	add	r3, pc, #152	@ (adr r3, 80014c8 <vADCTEMP_LDR+0x1d0>)
 8001430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001434:	f7fe ff28 	bl	8000288 <__aeabi_dsub>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	a323      	add	r3, pc, #140	@ (adr r3, 80014d0 <vADCTEMP_LDR+0x1d8>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff fa01 	bl	800084c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <vADCTEMP_LDR+0x204>)
 8001458:	f7fe ff18 	bl	800028c <__adddf3>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fb82 	bl	8000b6c <__aeabi_d2f>
 8001468:	4603      	mov	r3, r0
 800146a:	4a25      	ldr	r2, [pc, #148]	@ (8001500 <vADCTEMP_LDR+0x208>)
 800146c:	6013      	str	r3, [r2, #0]


		sprintf(msg,"Temparature: %d\r\n",(int)Temp);
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <vADCTEMP_LDR+0x208>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001478:	ee17 2a90 	vmov	r2, s15
 800147c:	4921      	ldr	r1, [pc, #132]	@ (8001504 <vADCTEMP_LDR+0x20c>)
 800147e:	481c      	ldr	r0, [pc, #112]	@ (80014f0 <vADCTEMP_LDR+0x1f8>)
 8001480:	f006 f998 	bl	80077b4 <siprintf>
		//HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
		char copy_msg[32];
		strcpy(copy_msg, msg);
 8001484:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001488:	4919      	ldr	r1, [pc, #100]	@ (80014f0 <vADCTEMP_LDR+0x1f8>)
 800148a:	4618      	mov	r0, r3
 800148c:	f006 fa3c 	bl	8007908 <strcpy>
		xQueueSendToBack(xQueue,&copy_msg,portMAX_DELAY);
 8001490:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <vADCTEMP_LDR+0x1fc>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001498:	2300      	movs	r3, #0
 800149a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800149e:	f004 faf7 	bl	8005a90 <xQueueGenericSend>

		vTaskDelayUntil(&xLastTime, 5000 / portTICK_RATE_MS);
 80014a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014a6:	f241 3188 	movw	r1, #5000	@ 0x1388
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 ff94 	bl	80063d8 <vTaskDelayUntil>
	while(1){
 80014b0:	e72a      	b.n	8001308 <vADCTEMP_LDR+0x10>
 80014b2:	bf00      	nop
 80014b4:	f3af 8000 	nop.w
 80014b8:	66666666 	.word	0x66666666
 80014bc:	400a6666 	.word	0x400a6666
 80014c0:	9999999a 	.word	0x9999999a
 80014c4:	3fb99999 	.word	0x3fb99999
 80014c8:	851eb852 	.word	0x851eb852
 80014cc:	3fe851eb 	.word	0x3fe851eb
 80014d0:	47ae147b 	.word	0x47ae147b
 80014d4:	3f647ae1 	.word	0x3f647ae1
 80014d8:	20000354 	.word	0x20000354
 80014dc:	45800000 	.word	0x45800000
 80014e0:	20000350 	.word	0x20000350
 80014e4:	2000035c 	.word	0x2000035c
 80014e8:	2000034c 	.word	0x2000034c
 80014ec:	0800822c 	.word	0x0800822c
 80014f0:	2000032c 	.word	0x2000032c
 80014f4:	20000524 	.word	0x20000524
 80014f8:	40b00000 	.word	0x40b00000
 80014fc:	40390000 	.word	0x40390000
 8001500:	20000358 	.word	0x20000358
 8001504:	08008238 	.word	0x08008238

08001508 <vADCRecievingTask>:

	}
	vTaskDelete(NULL);
}
void vADCRecievingTask(void *pvParam)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b098      	sub	sp, #96	@ 0x60
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	char value[32];
	char msg[42];
	portTickType xLastTime = xTaskGetTickCount();
 8001510:	f005 f92e 	bl	8006770 <xTaskGetTickCount>
 8001514:	4603      	mov	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]
	while(1){
		for(int i=0;i<5;i++){
 8001518:	2300      	movs	r3, #0
 800151a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800151c:	e021      	b.n	8001562 <vADCRecievingTask+0x5a>
			xQueueReceive(xQueue, &value, portMAX_DELAY);
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <vADCRecievingTask+0x70>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001526:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800152a:	4618      	mov	r0, r3
 800152c:	f004 fbb2 	bl	8005c94 <xQueueReceive>

		sprintf(msg, "value : %s \r\n", value);
 8001530:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4910      	ldr	r1, [pc, #64]	@ (800157c <vADCRecievingTask+0x74>)
 800153a:	4618      	mov	r0, r3
 800153c:	f006 f93a 	bl	80077b4 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe fe43 	bl	80001d0 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	f107 0110 	add.w	r1, r7, #16
 8001552:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001556:	480a      	ldr	r0, [pc, #40]	@ (8001580 <vADCRecievingTask+0x78>)
 8001558:	f003 fce6 	bl	8004f28 <HAL_UART_Transmit>
		for(int i=0;i<5;i++){
 800155c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800155e:	3301      	adds	r3, #1
 8001560:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001562:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001564:	2b04      	cmp	r3, #4
 8001566:	ddda      	ble.n	800151e <vADCRecievingTask+0x16>
		}
		vTaskDelayUntil(&xLastTime, 5000 / portTICK_RATE_MS);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001570:	4618      	mov	r0, r3
 8001572:	f004 ff31 	bl	80063d8 <vTaskDelayUntil>
		for(int i=0;i<5;i++){
 8001576:	e7cf      	b.n	8001518 <vADCRecievingTask+0x10>
 8001578:	20000524 	.word	0x20000524
 800157c:	0800824c 	.word	0x0800824c
 8001580:	200004dc 	.word	0x200004dc

08001584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001584:	b5b0      	push	{r4, r5, r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158a:	f000 fe05 	bl	8002198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800158e:	f000 f883 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001592:	f000 fa8b 	bl	8001aac <MX_GPIO_Init>
  MX_DMA_Init();
 8001596:	f000 fa69 	bl	8001a6c <MX_DMA_Init>
  MX_TIM2_Init();
 800159a:	f000 f9eb 	bl	8001974 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800159e:	f000 fa3b 	bl	8001a18 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015a2:	f000 f8e3 	bl	800176c <MX_ADC1_Init>
  MX_ADC2_Init();
 80015a6:	f000 f941 	bl	800182c <MX_ADC2_Init>
  MX_ADC3_Init();
 80015aa:	f000 f991 	bl	80018d0 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80015ae:	2100      	movs	r1, #0
 80015b0:	482b      	ldr	r0, [pc, #172]	@ (8001660 <main+0xdc>)
 80015b2:	f002 fec7 	bl	8004344 <HAL_TIM_IC_Start_IT>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  xTaskCreate(xultra, "shashi",256 , NULL, 3, NULL);
 80015b6:	2300      	movs	r3, #0
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	2303      	movs	r3, #3
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015c4:	4927      	ldr	r1, [pc, #156]	@ (8001664 <main+0xe0>)
 80015c6:	4828      	ldr	r0, [pc, #160]	@ (8001668 <main+0xe4>)
 80015c8:	f004 fdb6 	bl	8006138 <xTaskCreate>
  xTaskCreate(vADCLM35, "ADC-LDR", 256, NULL, 3, NULL);
 80015cc:	2300      	movs	r3, #0
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	2303      	movs	r3, #3
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2300      	movs	r3, #0
 80015d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015da:	4924      	ldr	r1, [pc, #144]	@ (800166c <main+0xe8>)
 80015dc:	4824      	ldr	r0, [pc, #144]	@ (8001670 <main+0xec>)
 80015de:	f004 fdab 	bl	8006138 <xTaskCreate>
  xTaskCreate(xADCMQ2,"ADC_LM35",256,NULL,3,NULL);
 80015e2:	2300      	movs	r3, #0
 80015e4:	9301      	str	r3, [sp, #4]
 80015e6:	2303      	movs	r3, #3
 80015e8:	9300      	str	r3, [sp, #0]
 80015ea:	2300      	movs	r3, #0
 80015ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015f0:	4920      	ldr	r1, [pc, #128]	@ (8001674 <main+0xf0>)
 80015f2:	4821      	ldr	r0, [pc, #132]	@ (8001678 <main+0xf4>)
 80015f4:	f004 fda0 	bl	8006138 <xTaskCreate>
  xTaskCreate(vADCTEMP_LDR,"ADC_LDR_TEMP", 256,NULL, 3,NULL);
 80015f8:	2300      	movs	r3, #0
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	2303      	movs	r3, #3
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001606:	491d      	ldr	r1, [pc, #116]	@ (800167c <main+0xf8>)
 8001608:	481d      	ldr	r0, [pc, #116]	@ (8001680 <main+0xfc>)
 800160a:	f004 fd95 	bl	8006138 <xTaskCreate>
  xTaskCreate(vADCRecievingTask,"ADC_Queue",256,NULL,6,NULL);
 800160e:	2300      	movs	r3, #0
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2306      	movs	r3, #6
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800161c:	4919      	ldr	r1, [pc, #100]	@ (8001684 <main+0x100>)
 800161e:	481a      	ldr	r0, [pc, #104]	@ (8001688 <main+0x104>)
 8001620:	f004 fd8a 	bl	8006138 <xTaskCreate>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  xQueue = xQueueCreate(32,sizeof(char[32]));
 8001624:	2200      	movs	r2, #0
 8001626:	2120      	movs	r1, #32
 8001628:	2020      	movs	r0, #32
 800162a:	f004 f9d7 	bl	80059dc <xQueueGenericCreate>
 800162e:	4603      	mov	r3, r0
 8001630:	4a16      	ldr	r2, [pc, #88]	@ (800168c <main+0x108>)
 8001632:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001634:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <main+0x10c>)
 8001636:	1d3c      	adds	r4, r7, #4
 8001638:	461d      	mov	r5, r3
 800163a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800163c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800163e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f004 f847 	bl	80056de <osThreadCreate>
 8001650:	4603      	mov	r3, r0
 8001652:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <main+0x110>)
 8001654:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001656:	f004 f83b 	bl	80056d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800165a:	bf00      	nop
 800165c:	e7fd      	b.n	800165a <main+0xd6>
 800165e:	bf00      	nop
 8001660:	20000494 	.word	0x20000494
 8001664:	0800825c 	.word	0x0800825c
 8001668:	080011c9 	.word	0x080011c9
 800166c:	08008264 	.word	0x08008264
 8001670:	08001221 	.word	0x08001221
 8001674:	0800826c 	.word	0x0800826c
 8001678:	0800128d 	.word	0x0800128d
 800167c:	08008278 	.word	0x08008278
 8001680:	080012f9 	.word	0x080012f9
 8001684:	08008288 	.word	0x08008288
 8001688:	08001509 	.word	0x08001509
 800168c:	20000524 	.word	0x20000524
 8001690:	080082a0 	.word	0x080082a0
 8001694:	20000528 	.word	0x20000528

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	@ 0x50
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	2230      	movs	r2, #48	@ 0x30
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 f8a4 	bl	80077f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <SystemClock_Config+0xcc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <SystemClock_Config+0xcc>)
 80016c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80016cc:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <SystemClock_Config+0xcc>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <SystemClock_Config+0xd0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a21      	ldr	r2, [pc, #132]	@ (8001768 <SystemClock_Config+0xd0>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <SystemClock_Config+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f4:	2302      	movs	r3, #2
 80016f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fc:	2310      	movs	r3, #16
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001700:	2302      	movs	r3, #2
 8001702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001704:	2300      	movs	r3, #0
 8001706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001708:	2308      	movs	r3, #8
 800170a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800170c:	23a8      	movs	r3, #168	@ 0xa8
 800170e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001710:	2302      	movs	r3, #2
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001714:	2307      	movs	r3, #7
 8001716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	4618      	mov	r0, r3
 800171e:	f002 f82d 	bl	800377c <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001728:	f000 fa2a 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	230f      	movs	r3, #15
 800172e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2302      	movs	r3, #2
 8001732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800173c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800173e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2105      	movs	r1, #5
 800174a:	4618      	mov	r0, r3
 800174c:	f002 fa8e 	bl	8003c6c <HAL_RCC_ClockConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001756:	f000 fa13 	bl	8001b80 <Error_Handler>
  }
}
 800175a:	bf00      	nop
 800175c:	3750      	adds	r7, #80	@ 0x50
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000

0800176c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001772:	463b      	mov	r3, r7
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <MX_ADC1_Init+0xb4>)
 8001780:	4a28      	ldr	r2, [pc, #160]	@ (8001824 <MX_ADC1_Init+0xb8>)
 8001782:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001784:	4b26      	ldr	r3, [pc, #152]	@ (8001820 <MX_ADC1_Init+0xb4>)
 8001786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800178a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <MX_ADC1_Init+0xb4>)
 800178e:	2200      	movs	r2, #0
 8001790:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <MX_ADC1_Init+0xb4>)
 8001794:	2201      	movs	r2, #1
 8001796:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <MX_ADC1_Init+0xb4>)
 800179a:	2201      	movs	r2, #1
 800179c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <MX_ADC1_Init+0xbc>)
 80017b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017ba:	2202      	movs	r2, #2
 80017bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017be:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c6:	4b16      	ldr	r3, [pc, #88]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017cc:	4814      	ldr	r0, [pc, #80]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017ce:	f000 fd25 	bl	800221c <HAL_ADC_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017d8:	f000 f9d2 	bl	8001b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017dc:	2305      	movs	r3, #5
 80017de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017e0:	2301      	movs	r3, #1
 80017e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	@ (8001820 <MX_ADC1_Init+0xb4>)
 80017ee:	f001 f81b 	bl	8002828 <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017f8:	f000 f9c2 	bl	8001b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017fc:	2310      	movs	r3, #16
 80017fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001800:	2302      	movs	r3, #2
 8001802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_ADC1_Init+0xb4>)
 800180a:	f001 f80d 	bl	8002828 <HAL_ADC_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001814:	f000 f9b4 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000035c 	.word	0x2000035c
 8001824:	40012000 	.word	0x40012000
 8001828:	0f000001 	.word	0x0f000001

0800182c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001832:	463b      	mov	r3, r7
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800183e:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001840:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <MX_ADC2_Init+0x9c>)
 8001842:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001844:	4b1f      	ldr	r3, [pc, #124]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001846:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800184a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800184c:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <MX_ADC2_Init+0x98>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001852:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001858:	4b1a      	ldr	r3, [pc, #104]	@ (80018c4 <MX_ADC2_Init+0x98>)
 800185a:	2200      	movs	r2, #0
 800185c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800185e:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001866:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001868:	2200      	movs	r2, #0
 800186a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800186c:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <MX_ADC2_Init+0x98>)
 800186e:	4a17      	ldr	r2, [pc, #92]	@ (80018cc <MX_ADC2_Init+0xa0>)
 8001870:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001874:	2200      	movs	r2, #0
 8001876:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001878:	4b12      	ldr	r3, [pc, #72]	@ (80018c4 <MX_ADC2_Init+0x98>)
 800187a:	2201      	movs	r2, #1
 800187c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800187e:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001886:	4b0f      	ldr	r3, [pc, #60]	@ (80018c4 <MX_ADC2_Init+0x98>)
 8001888:	2201      	movs	r2, #1
 800188a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800188c:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <MX_ADC2_Init+0x98>)
 800188e:	f000 fcc5 	bl	800221c <HAL_ADC_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001898:	f000 f972 	bl	8001b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800189c:	2306      	movs	r3, #6
 800189e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018a0:	2301      	movs	r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_ADC2_Init+0x98>)
 80018ae:	f000 ffbb 	bl	8002828 <HAL_ADC_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80018b8:	f000 f962 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80018bc:	bf00      	nop
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200003a4 	.word	0x200003a4
 80018c8:	40012100 	.word	0x40012100
 80018cc:	0f000001 	.word	0x0f000001

080018d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018d6:	463b      	mov	r3, r7
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80018e2:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <MX_ADC3_Init+0x98>)
 80018e4:	4a21      	ldr	r2, [pc, #132]	@ (800196c <MX_ADC3_Init+0x9c>)
 80018e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001968 <MX_ADC3_Init+0x98>)
 80018ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <MX_ADC3_Init+0x98>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <MX_ADC3_Init+0x98>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80018fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001968 <MX_ADC3_Init+0x98>)
 80018fe:	2200      	movs	r2, #0
 8001900:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001902:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <MX_ADC3_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <MX_ADC3_Init+0x98>)
 800190c:	2200      	movs	r2, #0
 800190e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001910:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <MX_ADC3_Init+0x98>)
 8001912:	4a17      	ldr	r2, [pc, #92]	@ (8001970 <MX_ADC3_Init+0xa0>)
 8001914:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001916:	4b14      	ldr	r3, [pc, #80]	@ (8001968 <MX_ADC3_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800191c:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <MX_ADC3_Init+0x98>)
 800191e:	2201      	movs	r2, #1
 8001920:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001922:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <MX_ADC3_Init+0x98>)
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <MX_ADC3_Init+0x98>)
 800192c:	2201      	movs	r2, #1
 800192e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001930:	480d      	ldr	r0, [pc, #52]	@ (8001968 <MX_ADC3_Init+0x98>)
 8001932:	f000 fc73 	bl	800221c <HAL_ADC_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800193c:	f000 f920 	bl	8001b80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001940:	2303      	movs	r3, #3
 8001942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001944:	2301      	movs	r3, #1
 8001946:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800194c:	463b      	mov	r3, r7
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <MX_ADC3_Init+0x98>)
 8001952:	f000 ff69 	bl	8002828 <HAL_ADC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800195c:	f000 f910 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	200003ec 	.word	0x200003ec
 800196c:	40012200 	.word	0x40012200
 8001970:	0f000001 	.word	0x0f000001

08001974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001984:	463b      	mov	r3, r7
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001990:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 8001992:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 168-1;
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 800199a:	22a7      	movs	r2, #167	@ 0xa7
 800199c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80019a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 80019a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80019aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80019b8:	4816      	ldr	r0, [pc, #88]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 80019ba:	f002 fc73 	bl	80042a4 <HAL_TIM_IC_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019c4:	f000 f8dc 	bl	8001b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4619      	mov	r1, r3
 80019d6:	480f      	ldr	r0, [pc, #60]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 80019d8:	f003 f9c6 	bl	8004d68 <HAL_TIMEx_MasterConfigSynchronization>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80019e2:	f000 f8cd 	bl	8001b80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80019e6:	2300      	movs	r3, #0
 80019e8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80019ea:	2301      	movs	r3, #1
 80019ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	2200      	movs	r2, #0
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_TIM2_Init+0xa0>)
 80019fe:	f002 feb9 	bl	8004774 <HAL_TIM_IC_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001a08:	f000 f8ba 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000494 	.word	0x20000494

08001a18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	@ (8001a68 <MX_USART2_UART_Init+0x50>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a24:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001a28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	@ (8001a64 <MX_USART2_UART_Init+0x4c>)
 8001a50:	f003 fa1a 	bl	8004e88 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a5a:	f000 f891 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200004dc 	.word	0x200004dc
 8001a68:	40004400 	.word	0x40004400

08001a6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_DMA_Init+0x3c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa8 <MX_DMA_Init+0x3c>)
 8001a7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_DMA_Init+0x3c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2105      	movs	r1, #5
 8001a92:	2038      	movs	r0, #56	@ 0x38
 8001a94:	f001 f9a8 	bl	8002de8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a98:	2038      	movs	r0, #56	@ 0x38
 8001a9a:	f001 f9c1 	bl	8002e20 <HAL_NVIC_EnableIRQ>

}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a1e      	ldr	r2, [pc, #120]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b18      	ldr	r3, [pc, #96]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a17      	ldr	r2, [pc, #92]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b15      	ldr	r3, [pc, #84]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a10      	ldr	r2, [pc, #64]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001b04:	f043 0308 	orr.w	r3, r3, #8
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b44 <MX_GPIO_Init+0x98>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2102      	movs	r1, #2
 8001b1a:	480b      	ldr	r0, [pc, #44]	@ (8001b48 <MX_GPIO_Init+0x9c>)
 8001b1c:	f001 fe14 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b20:	2302      	movs	r3, #2
 8001b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4619      	mov	r1, r3
 8001b36:	4804      	ldr	r0, [pc, #16]	@ (8001b48 <MX_GPIO_Init+0x9c>)
 8001b38:	f001 fc6a 	bl	8003410 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020000 	.word	0x40020000

08001b4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001b54:	2001      	movs	r0, #1
 8001b56:	f003 fe0e 	bl	8005776 <osDelay>
 8001b5a:	e7fb      	b.n	8001b54 <StartDefaultTask+0x8>

08001b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d101      	bne.n	8001b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b6e:	f000 fb35 	bl	80021dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40010000 	.word	0x40010000

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <Error_Handler+0x8>

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <HAL_MspInit+0x54>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9a:	4a11      	ldr	r2, [pc, #68]	@ (8001be0 <HAL_MspInit+0x54>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8001be0 <HAL_MspInit+0x54>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	@ (8001be0 <HAL_MspInit+0x54>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001be0 <HAL_MspInit+0x54>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bbe:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_MspInit+0x54>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	210f      	movs	r1, #15
 8001bce:	f06f 0001 	mvn.w	r0, #1
 8001bd2:	f001 f909 	bl	8002de8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	@ 0x38
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a69      	ldr	r2, [pc, #420]	@ (8001da8 <HAL_ADC_MspInit+0x1c4>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d160      	bne.n	8001cc8 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
 8001c0a:	4b68      	ldr	r3, [pc, #416]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a67      	ldr	r2, [pc, #412]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b65      	ldr	r3, [pc, #404]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
 8001c26:	4b61      	ldr	r3, [pc, #388]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a60      	ldr	r2, [pc, #384]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b5e      	ldr	r3, [pc, #376]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c42:	2303      	movs	r3, #3
 8001c44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4857      	ldr	r0, [pc, #348]	@ (8001db0 <HAL_ADC_MspInit+0x1cc>)
 8001c52:	f001 fbdd 	bl	8003410 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c56:	4b57      	ldr	r3, [pc, #348]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c58:	4a57      	ldr	r2, [pc, #348]	@ (8001db8 <HAL_ADC_MspInit+0x1d4>)
 8001c5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c5c:	4b55      	ldr	r3, [pc, #340]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c62:	4b54      	ldr	r3, [pc, #336]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c68:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c6e:	4b51      	ldr	r3, [pc, #324]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c70:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c76:	4b4f      	ldr	r3, [pc, #316]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c86:	4b4b      	ldr	r3, [pc, #300]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c8c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c8e:	4b49      	ldr	r3, [pc, #292]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c94:	4b47      	ldr	r3, [pc, #284]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c9a:	4846      	ldr	r0, [pc, #280]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001c9c:	f001 f8ce 	bl	8002e3c <HAL_DMA_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001ca6:	f7ff ff6b 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a41      	ldr	r2, [pc, #260]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001cae:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cb0:	4a40      	ldr	r2, [pc, #256]	@ (8001db4 <HAL_ADC_MspInit+0x1d0>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2105      	movs	r1, #5
 8001cba:	2012      	movs	r0, #18
 8001cbc:	f001 f894 	bl	8002de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001cc0:	2012      	movs	r0, #18
 8001cc2:	f001 f8ad 	bl	8002e20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001cc6:	e06a      	b.n	8001d9e <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <HAL_ADC_MspInit+0x1d8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d130      	bne.n	8001d34 <HAL_ADC_MspInit+0x150>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	4b35      	ldr	r3, [pc, #212]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cda:	4a34      	ldr	r2, [pc, #208]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001cdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ce2:	4b32      	ldr	r3, [pc, #200]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cea:	61bb      	str	r3, [r7, #24]
 8001cec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d0a:	2340      	movs	r3, #64	@ 0x40
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4824      	ldr	r0, [pc, #144]	@ (8001db0 <HAL_ADC_MspInit+0x1cc>)
 8001d1e:	f001 fb77 	bl	8003410 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2105      	movs	r1, #5
 8001d26:	2012      	movs	r0, #18
 8001d28:	f001 f85e 	bl	8002de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d2c:	2012      	movs	r0, #18
 8001d2e:	f001 f877 	bl	8002e20 <HAL_NVIC_EnableIRQ>
}
 8001d32:	e034      	b.n	8001d9e <HAL_ADC_MspInit+0x1ba>
  else if(hadc->Instance==ADC3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a21      	ldr	r2, [pc, #132]	@ (8001dc0 <HAL_ADC_MspInit+0x1dc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d12f      	bne.n	8001d9e <HAL_ADC_MspInit+0x1ba>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	4b1a      	ldr	r3, [pc, #104]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001d48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b17      	ldr	r3, [pc, #92]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	4a12      	ldr	r2, [pc, #72]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d6a:	4b10      	ldr	r3, [pc, #64]	@ (8001dac <HAL_ADC_MspInit+0x1c8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d76:	2308      	movs	r3, #8
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d86:	4619      	mov	r1, r3
 8001d88:	4809      	ldr	r0, [pc, #36]	@ (8001db0 <HAL_ADC_MspInit+0x1cc>)
 8001d8a:	f001 fb41 	bl	8003410 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	2012      	movs	r0, #18
 8001d94:	f001 f828 	bl	8002de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001d98:	2012      	movs	r0, #18
 8001d9a:	f001 f841 	bl	8002e20 <HAL_NVIC_EnableIRQ>
}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	@ 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40012000 	.word	0x40012000
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40020000 	.word	0x40020000
 8001db4:	20000434 	.word	0x20000434
 8001db8:	40026410 	.word	0x40026410
 8001dbc:	40012100 	.word	0x40012100
 8001dc0:	40012200 	.word	0x40012200

08001dc4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001de4:	d134      	bne.n	8001e50 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	4b1b      	ldr	r3, [pc, #108]	@ (8001e58 <HAL_TIM_IC_MspInit+0x94>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dee:	4a1a      	ldr	r2, [pc, #104]	@ (8001e58 <HAL_TIM_IC_MspInit+0x94>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <HAL_TIM_IC_MspInit+0x94>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b14      	ldr	r3, [pc, #80]	@ (8001e58 <HAL_TIM_IC_MspInit+0x94>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	4a13      	ldr	r2, [pc, #76]	@ (8001e58 <HAL_TIM_IC_MspInit+0x94>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e12:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <HAL_TIM_IC_MspInit+0x94>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e30:	2301      	movs	r3, #1
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <HAL_TIM_IC_MspInit+0x98>)
 8001e3c:	f001 fae8 	bl	8003410 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2105      	movs	r1, #5
 8001e44:	201c      	movs	r0, #28
 8001e46:	f000 ffcf 	bl	8002de8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e4a:	201c      	movs	r0, #28
 8001e4c:	f000 ffe8 	bl	8002e20 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	@ 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020000 	.word	0x40020000

08001e60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	@ 0x28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a28      	ldr	r2, [pc, #160]	@ (8001f20 <HAL_UART_MspInit+0xc0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d149      	bne.n	8001f16 <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b27      	ldr	r3, [pc, #156]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a26      	ldr	r2, [pc, #152]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b20      	ldr	r3, [pc, #128]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b19      	ldr	r3, [pc, #100]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a18      	ldr	r2, [pc, #96]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001ec4:	f043 0308 	orr.w	r3, r3, #8
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b16      	ldr	r3, [pc, #88]	@ (8001f24 <HAL_UART_MspInit+0xc4>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0308 	and.w	r3, r3, #8
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ee6:	2307      	movs	r3, #7
 8001ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480d      	ldr	r0, [pc, #52]	@ (8001f28 <HAL_UART_MspInit+0xc8>)
 8001ef2:	f001 fa8d 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef6:	2340      	movs	r3, #64	@ 0x40
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f06:	2307      	movs	r3, #7
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4806      	ldr	r0, [pc, #24]	@ (8001f2c <HAL_UART_MspInit+0xcc>)
 8001f12:	f001 fa7d 	bl	8003410 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	@ 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40004400 	.word	0x40004400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020c00 	.word	0x40020c00

08001f30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <HAL_InitTick+0xd4>)
 8001f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f48:	4a2e      	ldr	r2, [pc, #184]	@ (8002004 <HAL_InitTick+0xd4>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f50:	4b2c      	ldr	r3, [pc, #176]	@ (8002004 <HAL_InitTick+0xd4>)
 8001f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f5c:	f107 020c 	add.w	r2, r7, #12
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f002 f8a0 	bl	80040ac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f6c:	f002 f88a 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 8001f70:	4603      	mov	r3, r0
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f78:	4a23      	ldr	r2, [pc, #140]	@ (8002008 <HAL_InitTick+0xd8>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	0c9b      	lsrs	r3, r3, #18
 8001f80:	3b01      	subs	r3, #1
 8001f82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f84:	4b21      	ldr	r3, [pc, #132]	@ (800200c <HAL_InitTick+0xdc>)
 8001f86:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <HAL_InitTick+0xe0>)
 8001f88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f8a:	4b20      	ldr	r3, [pc, #128]	@ (800200c <HAL_InitTick+0xdc>)
 8001f8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f92:	4a1e      	ldr	r2, [pc, #120]	@ (800200c <HAL_InitTick+0xdc>)
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f98:	4b1c      	ldr	r3, [pc, #112]	@ (800200c <HAL_InitTick+0xdc>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_InitTick+0xdc>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	@ (800200c <HAL_InitTick+0xdc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001faa:	4818      	ldr	r0, [pc, #96]	@ (800200c <HAL_InitTick+0xdc>)
 8001fac:	f002 f8b0 	bl	8004110 <HAL_TIM_Base_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d11b      	bne.n	8001ff6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fbe:	4813      	ldr	r0, [pc, #76]	@ (800200c <HAL_InitTick+0xdc>)
 8001fc0:	f002 f900 	bl	80041c4 <HAL_TIM_Base_Start_IT>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d111      	bne.n	8001ff6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001fd2:	2019      	movs	r0, #25
 8001fd4:	f000 ff24 	bl	8002e20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b0f      	cmp	r3, #15
 8001fdc:	d808      	bhi.n	8001ff0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	2019      	movs	r0, #25
 8001fe4:	f000 ff00 	bl	8002de8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <HAL_InitTick+0xe4>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e002      	b.n	8001ff6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3730      	adds	r7, #48	@ 0x30
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40023800 	.word	0x40023800
 8002008:	431bde83 	.word	0x431bde83
 800200c:	20000530 	.word	0x20000530
 8002010:	40010000 	.word	0x40010000
 8002014:	20000004 	.word	0x20000004

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002054:	4805      	ldr	r0, [pc, #20]	@ (800206c <ADC_IRQHandler+0x1c>)
 8002056:	f000 fab5 	bl	80025c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800205a:	4805      	ldr	r0, [pc, #20]	@ (8002070 <ADC_IRQHandler+0x20>)
 800205c:	f000 fab2 	bl	80025c4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8002060:	4804      	ldr	r0, [pc, #16]	@ (8002074 <ADC_IRQHandler+0x24>)
 8002062:	f000 faaf 	bl	80025c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2000035c 	.word	0x2000035c
 8002070:	200003a4 	.word	0x200003a4
 8002074:	200003ec 	.word	0x200003ec

08002078 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800207e:	f002 fa89 	bl	8004594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000530 	.word	0x20000530

0800208c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <TIM2_IRQHandler+0x10>)
 8002092:	f002 fa7f 	bl	8004594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000494 	.word	0x20000494

080020a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <DMA2_Stream0_IRQHandler+0x10>)
 80020a6:	f000 ff77 	bl	8002f98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000434 	.word	0x20000434

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	@ (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	@ (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f005 fbe4 	bl	80078b0 <__errno>
 80020e8:	4603      	mov	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	4a05      	ldr	r2, [pc, #20]	@ (8002118 <_sbrk+0x64>)
 8002104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20020000 	.word	0x20020000
 8002114:	00000400 	.word	0x00000400
 8002118:	20000578 	.word	0x20000578
 800211c:	20004420 	.word	0x20004420

08002120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002124:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <SystemInit+0x20>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <SystemInit+0x20>)
 800212c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002130:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800217c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002148:	f7ff ffea 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800214c:	480c      	ldr	r0, [pc, #48]	@ (8002180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800214e:	490d      	ldr	r1, [pc, #52]	@ (8002184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002150:	4a0d      	ldr	r2, [pc, #52]	@ (8002188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002154:	e002      	b.n	800215c <LoopCopyDataInit>

08002156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215a:	3304      	adds	r3, #4

0800215c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800215c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800215e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002160:	d3f9      	bcc.n	8002156 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002162:	4a0a      	ldr	r2, [pc, #40]	@ (800218c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002164:	4c0a      	ldr	r4, [pc, #40]	@ (8002190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002168:	e001      	b.n	800216e <LoopFillZerobss>

0800216a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800216c:	3204      	adds	r2, #4

0800216e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800216e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002170:	d3fb      	bcc.n	800216a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002172:	f005 fba3 	bl	80078bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002176:	f7ff fa05 	bl	8001584 <main>
  bx  lr    
 800217a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800217c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002184:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002188:	08008328 	.word	0x08008328
  ldr r2, =_sbss
 800218c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002190:	2000441c 	.word	0x2000441c

08002194 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002194:	e7fe      	b.n	8002194 <CAN1_RX0_IRQHandler>
	...

08002198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800219c:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0d      	ldr	r2, [pc, #52]	@ (80021d8 <HAL_Init+0x40>)
 80021a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a0a      	ldr	r2, [pc, #40]	@ (80021d8 <HAL_Init+0x40>)
 80021ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b4:	4b08      	ldr	r3, [pc, #32]	@ (80021d8 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	@ (80021d8 <HAL_Init+0x40>)
 80021ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 fe06 	bl	8002dd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021c6:	200f      	movs	r0, #15
 80021c8:	f7ff feb2 	bl	8001f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021cc:	f7ff fcde 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40023c00 	.word	0x40023c00

080021dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e0:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <HAL_IncTick+0x20>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_IncTick+0x24>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4413      	add	r3, r2
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_IncTick+0x24>)
 80021ee:	6013      	str	r3, [r2, #0]
}
 80021f0:	bf00      	nop
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008
 8002200:	2000057c 	.word	0x2000057c

08002204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  return uwTick;
 8002208:	4b03      	ldr	r3, [pc, #12]	@ (8002218 <HAL_GetTick+0x14>)
 800220a:	681b      	ldr	r3, [r3, #0]
}
 800220c:	4618      	mov	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	2000057c 	.word	0x2000057c

0800221c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e033      	b.n	800229a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fcd2 	bl	8001be4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b00      	cmp	r3, #0
 8002258:	d118      	bne.n	800228c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002262:	f023 0302 	bic.w	r3, r3, #2
 8002266:	f043 0202 	orr.w	r2, r3, #2
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 fbfc 	bl	8002a6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	f043 0201 	orr.w	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	641a      	str	r2, [r3, #64]	@ 0x40
 800228a:	e001      	b.n	8002290 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002298:	7bfb      	ldrb	r3, [r7, #15]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d101      	bne.n	80022be <HAL_ADC_Start+0x1a>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e0b2      	b.n	8002424 <HAL_ADC_Start+0x180>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d018      	beq.n	8002306 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022e4:	4b52      	ldr	r3, [pc, #328]	@ (8002430 <HAL_ADC_Start+0x18c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a52      	ldr	r2, [pc, #328]	@ (8002434 <HAL_ADC_Start+0x190>)
 80022ea:	fba2 2303 	umull	r2, r3, r2, r3
 80022ee:	0c9a      	lsrs	r2, r3, #18
 80022f0:	4613      	mov	r3, r2
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	4413      	add	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80022f8:	e002      	b.n	8002300 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f9      	bne.n	80022fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d17a      	bne.n	800240a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002332:	2b00      	cmp	r3, #0
 8002334:	d007      	beq.n	8002346 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800233e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800234e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002352:	d106      	bne.n	8002362 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002358:	f023 0206 	bic.w	r2, r3, #6
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002360:	e002      	b.n	8002368 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002370:	4b31      	ldr	r3, [pc, #196]	@ (8002438 <HAL_ADC_Start+0x194>)
 8002372:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800237c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 031f 	and.w	r3, r3, #31
 8002386:	2b00      	cmp	r3, #0
 8002388:	d12a      	bne.n	80023e0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2b      	ldr	r2, [pc, #172]	@ (800243c <HAL_ADC_Start+0x198>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d015      	beq.n	80023c0 <HAL_ADC_Start+0x11c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a29      	ldr	r2, [pc, #164]	@ (8002440 <HAL_ADC_Start+0x19c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d105      	bne.n	80023aa <HAL_ADC_Start+0x106>
 800239e:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <HAL_ADC_Start+0x194>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a25      	ldr	r2, [pc, #148]	@ (8002444 <HAL_ADC_Start+0x1a0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d136      	bne.n	8002422 <HAL_ADC_Start+0x17e>
 80023b4:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <HAL_ADC_Start+0x194>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d130      	bne.n	8002422 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d129      	bne.n	8002422 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	e020      	b.n	8002422 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a15      	ldr	r2, [pc, #84]	@ (800243c <HAL_ADC_Start+0x198>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d11b      	bne.n	8002422 <HAL_ADC_Start+0x17e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d114      	bne.n	8002422 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	e00b      	b.n	8002422 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3714      	adds	r7, #20
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	20000000 	.word	0x20000000
 8002434:	431bde83 	.word	0x431bde83
 8002438:	40012300 	.word	0x40012300
 800243c:	40012000 	.word	0x40012000
 8002440:	40012100 	.word	0x40012100
 8002444:	40012200 	.word	0x40012200

08002448 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_ADC_Stop+0x16>
 800245a:	2302      	movs	r3, #2
 800245c:	e021      	b.n	80024a2 <HAL_ADC_Stop+0x5a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002488:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800248c:	f023 0301 	bic.w	r3, r3, #1
 8002490:	f043 0201 	orr.w	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b084      	sub	sp, #16
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024ca:	d113      	bne.n	80024f4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80024d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024da:	d10b      	bne.n	80024f4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e0:	f043 0220 	orr.w	r2, r3, #32
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e063      	b.n	80025bc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f4:	f7ff fe86 	bl	8002204 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024fa:	e021      	b.n	8002540 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002502:	d01d      	beq.n	8002540 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_ADC_PollForConversion+0x6c>
 800250a:	f7ff fe7b 	bl	8002204 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d212      	bcs.n	8002540 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b02      	cmp	r3, #2
 8002526:	d00b      	beq.n	8002540 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e03d      	b.n	80025bc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d1d6      	bne.n	80024fc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0212 	mvn.w	r2, #18
 8002556:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d123      	bne.n	80025ba <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11f      	bne.n	80025ba <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	d006      	beq.n	8002596 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002592:	2b00      	cmp	r3, #0
 8002594:	d111      	bne.n	80025ba <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d105      	bne.n	80025ba <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d049      	beq.n	800268e <HAL_ADC_IRQHandler+0xca>
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d046      	beq.n	800268e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	2b00      	cmp	r3, #0
 800260a:	d105      	bne.n	8002618 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002610:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d12b      	bne.n	800267e <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d127      	bne.n	800267e <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002638:	2b00      	cmp	r3, #0
 800263a:	d006      	beq.n	800264a <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002646:	2b00      	cmp	r3, #0
 8002648:	d119      	bne.n	800267e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0220 	bic.w	r2, r2, #32
 8002658:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800265e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe fc56 	bl	8000f30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f06f 0212 	mvn.w	r2, #18
 800268c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d057      	beq.n	8002754 <HAL_ADC_IRQHandler+0x190>
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d054      	beq.n	8002754 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d139      	bne.n	8002744 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d12b      	bne.n	8002744 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d124      	bne.n	8002744 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	d11d      	bne.n	8002744 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800270c:	2b00      	cmp	r3, #0
 800270e:	d119      	bne.n	8002744 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800271e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fa8d 	bl	8002c64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f06f 020c 	mvn.w	r2, #12
 8002752:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d017      	beq.n	800279a <HAL_ADC_IRQHandler+0x1d6>
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d014      	beq.n	800279a <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d10d      	bne.n	800279a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f837 	bl	80027fe <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0201 	mvn.w	r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80027a8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_ADC_IRQHandler+0x218>
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d012      	beq.n	80027dc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ba:	f043 0202 	orr.w	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f06f 0220 	mvn.w	r2, #32
 80027ca:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f820 	bl	8002812 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f06f 0220 	mvn.w	r2, #32
 80027da:	601a      	str	r2, [r3, #0]
  }
}
 80027dc:	bf00      	nop
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x1c>
 8002840:	2302      	movs	r3, #2
 8002842:	e105      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x228>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b09      	cmp	r3, #9
 8002852:	d925      	bls.n	80028a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68d9      	ldr	r1, [r3, #12]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	3b1e      	subs	r3, #30
 800286a:	2207      	movs	r2, #7
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43da      	mvns	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	400a      	ands	r2, r1
 8002878:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68d9      	ldr	r1, [r3, #12]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	4603      	mov	r3, r0
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4403      	add	r3, r0
 8002892:	3b1e      	subs	r3, #30
 8002894:	409a      	lsls	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	60da      	str	r2, [r3, #12]
 800289e:	e022      	b.n	80028e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6919      	ldr	r1, [r3, #16]
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	2207      	movs	r2, #7
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	400a      	ands	r2, r1
 80028c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6919      	ldr	r1, [r3, #16]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4403      	add	r3, r0
 80028dc:	409a      	lsls	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b06      	cmp	r3, #6
 80028ec:	d824      	bhi.n	8002938 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b05      	subs	r3, #5
 8002900:	221f      	movs	r2, #31
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43da      	mvns	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	400a      	ands	r2, r1
 800290e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29b      	uxth	r3, r3
 800291c:	4618      	mov	r0, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	3b05      	subs	r3, #5
 800292a:	fa00 f203 	lsl.w	r2, r0, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	635a      	str	r2, [r3, #52]	@ 0x34
 8002936:	e04c      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	d824      	bhi.n	800298a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b23      	subs	r3, #35	@ 0x23
 8002952:	221f      	movs	r2, #31
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43da      	mvns	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	400a      	ands	r2, r1
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	3b23      	subs	r3, #35	@ 0x23
 800297c:	fa00 f203 	lsl.w	r2, r0, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
 8002988:	e023      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b41      	subs	r3, #65	@ 0x41
 800299c:	221f      	movs	r2, #31
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43da      	mvns	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	400a      	ands	r2, r1
 80029aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	4618      	mov	r0, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685a      	ldr	r2, [r3, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	3b41      	subs	r3, #65	@ 0x41
 80029c6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029d2:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <HAL_ADC_ConfigChannel+0x234>)
 80029d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a21      	ldr	r2, [pc, #132]	@ (8002a60 <HAL_ADC_ConfigChannel+0x238>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d109      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1cc>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d105      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_ADC_ConfigChannel+0x238>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d123      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x21e>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b10      	cmp	r3, #16
 8002a04:	d003      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x1e6>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2b11      	cmp	r3, #17
 8002a0c:	d11b      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d111      	bne.n	8002a46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_ADC_ConfigChannel+0x23c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a10      	ldr	r2, [pc, #64]	@ (8002a68 <HAL_ADC_ConfigChannel+0x240>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	0c9a      	lsrs	r2, r3, #18
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40012300 	.word	0x40012300
 8002a60:	40012000 	.word	0x40012000
 8002a64:	20000000 	.word	0x20000000
 8002a68:	431bde83 	.word	0x431bde83

08002a6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a74:	4b79      	ldr	r3, [pc, #484]	@ (8002c5c <ADC_Init+0x1f0>)
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002aa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	021a      	lsls	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ac4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6899      	ldr	r1, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002afe:	4a58      	ldr	r2, [pc, #352]	@ (8002c60 <ADC_Init+0x1f4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d022      	beq.n	8002b4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6899      	ldr	r1, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	e00f      	b.n	8002b6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0202 	bic.w	r2, r2, #2
 8002b78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7e1b      	ldrb	r3, [r3, #24]
 8002b84:	005a      	lsls	r2, r3, #1
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01b      	beq.n	8002bd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ba6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002bb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6859      	ldr	r1, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	035a      	lsls	r2, r3, #13
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	e007      	b.n	8002be0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bde:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002bee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	051a      	lsls	r2, r3, #20
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6899      	ldr	r1, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c22:	025a      	lsls	r2, r3, #9
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6899      	ldr	r1, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	029a      	lsls	r2, r3, #10
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40012300 	.word	0x40012300
 8002c60:	0f000001 	.word	0x0f000001

08002c64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	@ (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	db0b      	blt.n	8002d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	4907      	ldr	r1, [pc, #28]	@ (8002d14 <__NVIC_EnableIRQ+0x38>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	@ (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	@ 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	@ 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff4c 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfa:	f7ff ff61 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002dfe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	68b9      	ldr	r1, [r7, #8]
 8002e04:	6978      	ldr	r0, [r7, #20]
 8002e06:	f7ff ffb1 	bl	8002d6c <NVIC_EncodePriority>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff80 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e18:	bf00      	nop
 8002e1a:	3718      	adds	r7, #24
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff ff54 	bl	8002cdc <__NVIC_EnableIRQ>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff f9dc 	bl	8002204 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e099      	b.n	8002f8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e78:	e00f      	b.n	8002e9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e7a:	f7ff f9c3 	bl	8002204 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b05      	cmp	r3, #5
 8002e86:	d908      	bls.n	8002e9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2203      	movs	r2, #3
 8002e92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e078      	b.n	8002f8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e8      	bne.n	8002e7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4b38      	ldr	r3, [pc, #224]	@ (8002f94 <HAL_DMA_Init+0x158>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ec6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ed2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ede:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a1b      	ldr	r3, [r3, #32]
 8002ee4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d107      	bne.n	8002f04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	4313      	orrs	r3, r2
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f023 0307 	bic.w	r3, r3, #7
 8002f1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	2b04      	cmp	r3, #4
 8002f2c:	d117      	bne.n	8002f5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f9e9 	bl	8003318 <DMA_CheckFifoParam>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e016      	b.n	8002f8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f9a0 	bl	80032ac <DMA_CalcBaseAndBitshift>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f74:	223f      	movs	r2, #63	@ 0x3f
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	f010803f 	.word	0xf010803f

08002f98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002fa4:	4b8e      	ldr	r3, [pc, #568]	@ (80031e0 <HAL_DMA_IRQHandler+0x248>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a8e      	ldr	r2, [pc, #568]	@ (80031e4 <HAL_DMA_IRQHandler+0x24c>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	0a9b      	lsrs	r3, r3, #10
 8002fb0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc2:	2208      	movs	r2, #8
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01a      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d013      	beq.n	8003004 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0204 	bic.w	r2, r2, #4
 8002fea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003008:	2201      	movs	r2, #1
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d012      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00b      	beq.n	800303a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2201      	movs	r2, #1
 8003028:	409a      	lsls	r2, r3
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003032:	f043 0202 	orr.w	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800303e:	2204      	movs	r2, #4
 8003040:	409a      	lsls	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00b      	beq.n	8003070 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	2204      	movs	r2, #4
 800305e:	409a      	lsls	r2, r3
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2210      	movs	r2, #16
 8003076:	409a      	lsls	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d03c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	2210      	movs	r2, #16
 8003094:	409a      	lsls	r2, r3
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d018      	beq.n	80030da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d024      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	4798      	blx	r3
 80030c6:	e01f      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	4798      	blx	r3
 80030d8:	e016      	b.n	8003108 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0208 	bic.w	r2, r2, #8
 80030f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310c:	2220      	movs	r2, #32
 800310e:	409a      	lsls	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 808f 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8087 	beq.w	8003238 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312e:	2220      	movs	r2, #32
 8003130:	409a      	lsls	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b05      	cmp	r3, #5
 8003140:	d136      	bne.n	80031b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 0216 	bic.w	r2, r2, #22
 8003150:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695a      	ldr	r2, [r3, #20]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003160:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_DMA_IRQHandler+0x1da>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0208 	bic.w	r2, r2, #8
 8003180:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003186:	223f      	movs	r2, #63	@ 0x3f
 8003188:	409a      	lsls	r2, r3
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d07e      	beq.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
        }
        return;
 80031ae:	e079      	b.n	80032a4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10d      	bne.n	80031e8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d031      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	4798      	blx	r3
 80031dc:	e02c      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
 80031de:	bf00      	nop
 80031e0:	20000000 	.word	0x20000000
 80031e4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d023      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	4798      	blx	r3
 80031f8:	e01e      	b.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10f      	bne.n	8003228 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0210 	bic.w	r2, r2, #16
 8003216:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323c:	2b00      	cmp	r3, #0
 800323e:	d032      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b00      	cmp	r3, #0
 800324a:	d022      	beq.n	8003292 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2205      	movs	r2, #5
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	3301      	adds	r3, #1
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	429a      	cmp	r2, r3
 800326e:	d307      	bcc.n	8003280 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <HAL_DMA_IRQHandler+0x2cc>
 800327e:	e000      	b.n	8003282 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003280:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d005      	beq.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4798      	blx	r3
 80032a2:	e000      	b.n	80032a6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032a4:	bf00      	nop
    }
  }
}
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3b10      	subs	r3, #16
 80032bc:	4a14      	ldr	r2, [pc, #80]	@ (8003310 <DMA_CalcBaseAndBitshift+0x64>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	091b      	lsrs	r3, r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032c6:	4a13      	ldr	r2, [pc, #76]	@ (8003314 <DMA_CalcBaseAndBitshift+0x68>)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d909      	bls.n	80032ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032e2:	f023 0303 	bic.w	r3, r3, #3
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	659a      	str	r2, [r3, #88]	@ 0x58
 80032ec:	e007      	b.n	80032fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80032f6:	f023 0303 	bic.w	r3, r3, #3
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003302:	4618      	mov	r0, r3
 8003304:	3714      	adds	r7, #20
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	aaaaaaab 	.word	0xaaaaaaab
 8003314:	080082dc 	.word	0x080082dc

08003318 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003328:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11f      	bne.n	8003372 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d856      	bhi.n	80033e6 <DMA_CheckFifoParam+0xce>
 8003338:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <DMA_CheckFifoParam+0x28>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003351 	.word	0x08003351
 8003344:	08003363 	.word	0x08003363
 8003348:	08003351 	.word	0x08003351
 800334c:	080033e7 	.word	0x080033e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d046      	beq.n	80033ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003360:	e043      	b.n	80033ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003366:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800336a:	d140      	bne.n	80033ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003370:	e03d      	b.n	80033ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800337a:	d121      	bne.n	80033c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	2b03      	cmp	r3, #3
 8003380:	d837      	bhi.n	80033f2 <DMA_CheckFifoParam+0xda>
 8003382:	a201      	add	r2, pc, #4	@ (adr r2, 8003388 <DMA_CheckFifoParam+0x70>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	08003399 	.word	0x08003399
 800338c:	0800339f 	.word	0x0800339f
 8003390:	08003399 	.word	0x08003399
 8003394:	080033b1 	.word	0x080033b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
      break;
 800339c:	e030      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d025      	beq.n	80033f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ae:	e022      	b.n	80033f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033b8:	d11f      	bne.n	80033fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033be:	e01c      	b.n	80033fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d903      	bls.n	80033ce <DMA_CheckFifoParam+0xb6>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b03      	cmp	r3, #3
 80033ca:	d003      	beq.n	80033d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033cc:	e018      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
      break;
 80033d2:	e015      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      break;
 80033e4:	e00b      	b.n	80033fe <DMA_CheckFifoParam+0xe6>
      break;
 80033e6:	bf00      	nop
 80033e8:	e00a      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033ea:	bf00      	nop
 80033ec:	e008      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033ee:	bf00      	nop
 80033f0:	e006      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033f2:	bf00      	nop
 80033f4:	e004      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;   
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003400:	7bfb      	ldrb	r3, [r7, #15]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop

08003410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	@ 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	e16b      	b.n	8003704 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	f040 815a 	bne.w	80036fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d005      	beq.n	8003462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345e:	2b02      	cmp	r3, #2
 8003460:	d130      	bne.n	80034c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003498:	2201      	movs	r2, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 0201 	and.w	r2, r3, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d017      	beq.n	8003500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d123      	bne.n	8003554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	69b9      	ldr	r1, [r7, #24]
 8003550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0203 	and.w	r2, r3, #3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80b4 	beq.w	80036fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	4b60      	ldr	r3, [pc, #384]	@ (800371c <HAL_GPIO_Init+0x30c>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800359e:	4a5f      	ldr	r2, [pc, #380]	@ (800371c <HAL_GPIO_Init+0x30c>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80035a6:	4b5d      	ldr	r3, [pc, #372]	@ (800371c <HAL_GPIO_Init+0x30c>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003720 <HAL_GPIO_Init+0x310>)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3302      	adds	r3, #2
 80035ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a52      	ldr	r2, [pc, #328]	@ (8003724 <HAL_GPIO_Init+0x314>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d02b      	beq.n	8003636 <HAL_GPIO_Init+0x226>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a51      	ldr	r2, [pc, #324]	@ (8003728 <HAL_GPIO_Init+0x318>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d025      	beq.n	8003632 <HAL_GPIO_Init+0x222>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a50      	ldr	r2, [pc, #320]	@ (800372c <HAL_GPIO_Init+0x31c>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d01f      	beq.n	800362e <HAL_GPIO_Init+0x21e>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003730 <HAL_GPIO_Init+0x320>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d019      	beq.n	800362a <HAL_GPIO_Init+0x21a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003734 <HAL_GPIO_Init+0x324>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_GPIO_Init+0x216>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4d      	ldr	r2, [pc, #308]	@ (8003738 <HAL_GPIO_Init+0x328>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00d      	beq.n	8003622 <HAL_GPIO_Init+0x212>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a4c      	ldr	r2, [pc, #304]	@ (800373c <HAL_GPIO_Init+0x32c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d007      	beq.n	800361e <HAL_GPIO_Init+0x20e>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a4b      	ldr	r2, [pc, #300]	@ (8003740 <HAL_GPIO_Init+0x330>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d101      	bne.n	800361a <HAL_GPIO_Init+0x20a>
 8003616:	2307      	movs	r3, #7
 8003618:	e00e      	b.n	8003638 <HAL_GPIO_Init+0x228>
 800361a:	2308      	movs	r3, #8
 800361c:	e00c      	b.n	8003638 <HAL_GPIO_Init+0x228>
 800361e:	2306      	movs	r3, #6
 8003620:	e00a      	b.n	8003638 <HAL_GPIO_Init+0x228>
 8003622:	2305      	movs	r3, #5
 8003624:	e008      	b.n	8003638 <HAL_GPIO_Init+0x228>
 8003626:	2304      	movs	r3, #4
 8003628:	e006      	b.n	8003638 <HAL_GPIO_Init+0x228>
 800362a:	2303      	movs	r3, #3
 800362c:	e004      	b.n	8003638 <HAL_GPIO_Init+0x228>
 800362e:	2302      	movs	r3, #2
 8003630:	e002      	b.n	8003638 <HAL_GPIO_Init+0x228>
 8003632:	2301      	movs	r3, #1
 8003634:	e000      	b.n	8003638 <HAL_GPIO_Init+0x228>
 8003636:	2300      	movs	r3, #0
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	f002 0203 	and.w	r2, r2, #3
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	4093      	lsls	r3, r2
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4313      	orrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003648:	4935      	ldr	r1, [pc, #212]	@ (8003720 <HAL_GPIO_Init+0x310>)
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	089b      	lsrs	r3, r3, #2
 800364e:	3302      	adds	r3, #2
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003656:	4b3b      	ldr	r3, [pc, #236]	@ (8003744 <HAL_GPIO_Init+0x334>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367a:	4a32      	ldr	r2, [pc, #200]	@ (8003744 <HAL_GPIO_Init+0x334>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003680:	4b30      	ldr	r3, [pc, #192]	@ (8003744 <HAL_GPIO_Init+0x334>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a4:	4a27      	ldr	r2, [pc, #156]	@ (8003744 <HAL_GPIO_Init+0x334>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80036aa:	4b26      	ldr	r3, [pc, #152]	@ (8003744 <HAL_GPIO_Init+0x334>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <HAL_GPIO_Init+0x334>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003744 <HAL_GPIO_Init+0x334>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	43db      	mvns	r3, r3
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4013      	ands	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f8:	4a12      	ldr	r2, [pc, #72]	@ (8003744 <HAL_GPIO_Init+0x334>)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	3301      	adds	r3, #1
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	2b0f      	cmp	r3, #15
 8003708:	f67f ae90 	bls.w	800342c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	3724      	adds	r7, #36	@ 0x24
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40023800 	.word	0x40023800
 8003720:	40013800 	.word	0x40013800
 8003724:	40020000 	.word	0x40020000
 8003728:	40020400 	.word	0x40020400
 800372c:	40020800 	.word	0x40020800
 8003730:	40020c00 	.word	0x40020c00
 8003734:	40021000 	.word	0x40021000
 8003738:	40021400 	.word	0x40021400
 800373c:	40021800 	.word	0x40021800
 8003740:	40021c00 	.word	0x40021c00
 8003744:	40013c00 	.word	0x40013c00

08003748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003764:	e003      	b.n	800376e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	619a      	str	r2, [r3, #24]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e267      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d075      	beq.n	8003886 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800379a:	4b88      	ldr	r3, [pc, #544]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d00c      	beq.n	80037c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037a6:	4b85      	ldr	r3, [pc, #532]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d112      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b82      	ldr	r3, [pc, #520]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037be:	d10b      	bne.n	80037d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	4b7e      	ldr	r3, [pc, #504]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05b      	beq.n	8003884 <HAL_RCC_OscConfig+0x108>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d157      	bne.n	8003884 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e242      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e0:	d106      	bne.n	80037f0 <HAL_RCC_OscConfig+0x74>
 80037e2:	4b76      	ldr	r3, [pc, #472]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a75      	ldr	r2, [pc, #468]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80037e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ec:	6013      	str	r3, [r2, #0]
 80037ee:	e01d      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037f8:	d10c      	bne.n	8003814 <HAL_RCC_OscConfig+0x98>
 80037fa:	4b70      	ldr	r3, [pc, #448]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a6f      	ldr	r2, [pc, #444]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003800:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b6d      	ldr	r3, [pc, #436]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6c      	ldr	r2, [pc, #432]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e00b      	b.n	800382c <HAL_RCC_OscConfig+0xb0>
 8003814:	4b69      	ldr	r3, [pc, #420]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a68      	ldr	r2, [pc, #416]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 800381a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	4b66      	ldr	r3, [pc, #408]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a65      	ldr	r2, [pc, #404]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003826:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800382a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d013      	beq.n	800385c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe fce6 	bl	8002204 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe fce2 	bl	8002204 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	@ 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e207      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	4b5b      	ldr	r3, [pc, #364]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d0f0      	beq.n	800383c <HAL_RCC_OscConfig+0xc0>
 800385a:	e014      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385c:	f7fe fcd2 	bl	8002204 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7fe fcce 	bl	8002204 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	@ 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e1f3      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	4b51      	ldr	r3, [pc, #324]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0xe8>
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d063      	beq.n	800395a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003892:	4b4a      	ldr	r3, [pc, #296]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389e:	4b47      	ldr	r3, [pc, #284]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038a6:	2b08      	cmp	r3, #8
 80038a8:	d11c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b44      	ldr	r3, [pc, #272]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d116      	bne.n	80038e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038b6:	4b41      	ldr	r3, [pc, #260]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_RCC_OscConfig+0x152>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d001      	beq.n	80038ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e1c7      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ce:	4b3b      	ldr	r3, [pc, #236]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4937      	ldr	r1, [pc, #220]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	e03a      	b.n	800395a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d020      	beq.n	800392e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ec:	4b34      	ldr	r3, [pc, #208]	@ (80039c0 <HAL_RCC_OscConfig+0x244>)
 80038ee:	2201      	movs	r2, #1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fe fc87 	bl	8002204 <HAL_GetTick>
 80038f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fa:	f7fe fc83 	bl	8002204 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e1a8      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	4b2b      	ldr	r3, [pc, #172]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003918:	4b28      	ldr	r3, [pc, #160]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4925      	ldr	r1, [pc, #148]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003928:	4313      	orrs	r3, r2
 800392a:	600b      	str	r3, [r1, #0]
 800392c:	e015      	b.n	800395a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800392e:	4b24      	ldr	r3, [pc, #144]	@ (80039c0 <HAL_RCC_OscConfig+0x244>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7fe fc66 	bl	8002204 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393c:	f7fe fc62 	bl	8002204 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e187      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d036      	beq.n	80039d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800396e:	4b15      	ldr	r3, [pc, #84]	@ (80039c4 <HAL_RCC_OscConfig+0x248>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003974:	f7fe fc46 	bl	8002204 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800397c:	f7fe fc42 	bl	8002204 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e167      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398e:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <HAL_RCC_OscConfig+0x240>)
 8003990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x200>
 800399a:	e01b      	b.n	80039d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800399c:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <HAL_RCC_OscConfig+0x248>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a2:	f7fe fc2f 	bl	8002204 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039a8:	e00e      	b.n	80039c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039aa:	f7fe fc2b 	bl	8002204 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d907      	bls.n	80039c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e150      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
 80039bc:	40023800 	.word	0x40023800
 80039c0:	42470000 	.word	0x42470000
 80039c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c8:	4b88      	ldr	r3, [pc, #544]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 80039ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1ea      	bne.n	80039aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8097 	beq.w	8003b10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039e6:	4b81      	ldr	r3, [pc, #516]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10f      	bne.n	8003a12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	4b7d      	ldr	r3, [pc, #500]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	4a7c      	ldr	r2, [pc, #496]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a02:	4b7a      	ldr	r3, [pc, #488]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0a:	60bb      	str	r3, [r7, #8]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	4b77      	ldr	r3, [pc, #476]	@ (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d118      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1e:	4b74      	ldr	r3, [pc, #464]	@ (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a73      	ldr	r2, [pc, #460]	@ (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2a:	f7fe fbeb 	bl	8002204 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a32:	f7fe fbe7 	bl	8002204 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e10c      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a44:	4b6a      	ldr	r3, [pc, #424]	@ (8003bf0 <HAL_RCC_OscConfig+0x474>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d106      	bne.n	8003a66 <HAL_RCC_OscConfig+0x2ea>
 8003a58:	4b64      	ldr	r3, [pc, #400]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5c:	4a63      	ldr	r2, [pc, #396]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a5e:	f043 0301 	orr.w	r3, r3, #1
 8003a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a64:	e01c      	b.n	8003aa0 <HAL_RCC_OscConfig+0x324>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b05      	cmp	r3, #5
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x30c>
 8003a6e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	4a5e      	ldr	r2, [pc, #376]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a7a:	4b5c      	ldr	r3, [pc, #368]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0x324>
 8003a88:	4b58      	ldr	r3, [pc, #352]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a8c:	4a57      	ldr	r2, [pc, #348]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a94:	4b55      	ldr	r3, [pc, #340]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a98:	4a54      	ldr	r2, [pc, #336]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 0304 	bic.w	r3, r3, #4
 8003a9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d015      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa8:	f7fe fbac 	bl	8002204 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aae:	e00a      	b.n	8003ac6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab0:	f7fe fba8 	bl	8002204 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d901      	bls.n	8003ac6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e0cb      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac6:	4b49      	ldr	r3, [pc, #292]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0ee      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x334>
 8003ad2:	e014      	b.n	8003afe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad4:	f7fe fb96 	bl	8002204 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fe fb92 	bl	8002204 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0b5      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1ee      	bne.n	8003adc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d105      	bne.n	8003b10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b04:	4b39      	ldr	r3, [pc, #228]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	4a38      	ldr	r2, [pc, #224]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80a1 	beq.w	8003c5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1a:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d05c      	beq.n	8003be0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	699b      	ldr	r3, [r3, #24]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d141      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b2e:	4b31      	ldr	r3, [pc, #196]	@ (8003bf4 <HAL_RCC_OscConfig+0x478>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fe fb66 	bl	8002204 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b3c:	f7fe fb62 	bl	8002204 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e087      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	4b27      	ldr	r3, [pc, #156]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	69da      	ldr	r2, [r3, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	431a      	orrs	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b68:	019b      	lsls	r3, r3, #6
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	3b01      	subs	r3, #1
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	061b      	lsls	r3, r3, #24
 8003b7e:	491b      	ldr	r1, [pc, #108]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b84:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <HAL_RCC_OscConfig+0x478>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fb3b 	bl	8002204 <HAL_GetTick>
 8003b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b90:	e008      	b.n	8003ba4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b92:	f7fe fb37 	bl	8002204 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e05c      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba4:	4b11      	ldr	r3, [pc, #68]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d0f0      	beq.n	8003b92 <HAL_RCC_OscConfig+0x416>
 8003bb0:	e054      	b.n	8003c5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bb2:	4b10      	ldr	r3, [pc, #64]	@ (8003bf4 <HAL_RCC_OscConfig+0x478>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe fb24 	bl	8002204 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fe fb20 	bl	8002204 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e045      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	4b06      	ldr	r3, [pc, #24]	@ (8003bec <HAL_RCC_OscConfig+0x470>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x444>
 8003bde:	e03d      	b.n	8003c5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e038      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c68 <HAL_RCC_OscConfig+0x4ec>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d028      	beq.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d121      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d11a      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c28:	4013      	ands	r3, r2
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d111      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3e:	085b      	lsrs	r3, r3, #1
 8003c40:	3b01      	subs	r3, #1
 8003c42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d107      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800

08003c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e0cc      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c80:	4b68      	ldr	r3, [pc, #416]	@ (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d90c      	bls.n	8003ca8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	4b65      	ldr	r3, [pc, #404]	@ (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c96:	4b63      	ldr	r3, [pc, #396]	@ (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0b8      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d020      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc0:	4b59      	ldr	r3, [pc, #356]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a58      	ldr	r2, [pc, #352]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cd8:	4b53      	ldr	r3, [pc, #332]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	4a52      	ldr	r2, [pc, #328]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ce2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b50      	ldr	r3, [pc, #320]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	494d      	ldr	r1, [pc, #308]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d044      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d107      	bne.n	8003d1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b47      	ldr	r3, [pc, #284]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d119      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e07f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d003      	beq.n	8003d2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d107      	bne.n	8003d3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d109      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e06f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e067      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d4a:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f023 0203 	bic.w	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4934      	ldr	r1, [pc, #208]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe fa52 	bl	8002204 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d62:	e00a      	b.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d64:	f7fe fa4e 	bl	8002204 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e04f      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 020c 	and.w	r2, r3, #12
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d1eb      	bne.n	8003d64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d8c:	4b25      	ldr	r3, [pc, #148]	@ (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d20c      	bcs.n	8003db4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9a:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0307 	and.w	r3, r3, #7
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e032      	b.n	8003e1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d008      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc0:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4916      	ldr	r1, [pc, #88]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0308 	and.w	r3, r3, #8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d009      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dde:	4b12      	ldr	r3, [pc, #72]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	490e      	ldr	r1, [pc, #56]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003df2:	f000 f821 	bl	8003e38 <HAL_RCC_GetSysClockFreq>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	091b      	lsrs	r3, r3, #4
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	490a      	ldr	r1, [pc, #40]	@ (8003e2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e04:	5ccb      	ldrb	r3, [r1, r3]
 8003e06:	fa22 f303 	lsr.w	r3, r2, r3
 8003e0a:	4a09      	ldr	r2, [pc, #36]	@ (8003e30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e0e:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe f88c 	bl	8001f30 <HAL_InitTick>

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023c00 	.word	0x40023c00
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	080082c4 	.word	0x080082c4
 8003e30:	20000000 	.word	0x20000000
 8003e34:	20000004 	.word	0x20000004

08003e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e3c:	b094      	sub	sp, #80	@ 0x50
 8003e3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e50:	4b79      	ldr	r3, [pc, #484]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d00d      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x40>
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	f200 80e1 	bhi.w	8004024 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d002      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x34>
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e6a:	e0db      	b.n	8004024 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4b73      	ldr	r3, [pc, #460]	@ (800403c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e70:	e0db      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e72:	4b73      	ldr	r3, [pc, #460]	@ (8004040 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e76:	e0d8      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e78:	4b6f      	ldr	r3, [pc, #444]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e82:	4b6d      	ldr	r3, [pc, #436]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d063      	beq.n	8003f56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	2200      	movs	r2, #0
 8003e96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ea6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	f04f 0000 	mov.w	r0, #0
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ebc:	0150      	lsls	r0, r2, #5
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	1a51      	subs	r1, r2, r1
 8003ec6:	6139      	str	r1, [r7, #16]
 8003ec8:	4629      	mov	r1, r5
 8003eca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003edc:	4659      	mov	r1, fp
 8003ede:	018b      	lsls	r3, r1, #6
 8003ee0:	4651      	mov	r1, sl
 8003ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee6:	4651      	mov	r1, sl
 8003ee8:	018a      	lsls	r2, r1, #6
 8003eea:	4651      	mov	r1, sl
 8003eec:	ebb2 0801 	subs.w	r8, r2, r1
 8003ef0:	4659      	mov	r1, fp
 8003ef2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f0a:	4690      	mov	r8, r2
 8003f0c:	4699      	mov	r9, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	eb18 0303 	adds.w	r3, r8, r3
 8003f14:	60bb      	str	r3, [r7, #8]
 8003f16:	462b      	mov	r3, r5
 8003f18:	eb49 0303 	adc.w	r3, r9, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	024b      	lsls	r3, r1, #9
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f34:	4621      	mov	r1, r4
 8003f36:	024a      	lsls	r2, r1, #9
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f3e:	2200      	movs	r2, #0
 8003f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f48:	f7fc fe60 	bl	8000c0c <__aeabi_uldivmod>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	460b      	mov	r3, r1
 8003f50:	4613      	mov	r3, r2
 8003f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f54:	e058      	b.n	8004008 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f56:	4b38      	ldr	r3, [pc, #224]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	4611      	mov	r1, r2
 8003f62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f66:	623b      	str	r3, [r7, #32]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f70:	4642      	mov	r2, r8
 8003f72:	464b      	mov	r3, r9
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	f04f 0100 	mov.w	r1, #0
 8003f7c:	0159      	lsls	r1, r3, #5
 8003f7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f82:	0150      	lsls	r0, r2, #5
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4641      	mov	r1, r8
 8003f8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f8e:	4649      	mov	r1, r9
 8003f90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fa0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fa4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fa8:	ebb2 040a 	subs.w	r4, r2, sl
 8003fac:	eb63 050b 	sbc.w	r5, r3, fp
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	00eb      	lsls	r3, r5, #3
 8003fba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fbe:	00e2      	lsls	r2, r4, #3
 8003fc0:	4614      	mov	r4, r2
 8003fc2:	461d      	mov	r5, r3
 8003fc4:	4643      	mov	r3, r8
 8003fc6:	18e3      	adds	r3, r4, r3
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	464b      	mov	r3, r9
 8003fcc:	eb45 0303 	adc.w	r3, r5, r3
 8003fd0:	607b      	str	r3, [r7, #4]
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	f04f 0300 	mov.w	r3, #0
 8003fda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fde:	4629      	mov	r1, r5
 8003fe0:	028b      	lsls	r3, r1, #10
 8003fe2:	4621      	mov	r1, r4
 8003fe4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fe8:	4621      	mov	r1, r4
 8003fea:	028a      	lsls	r2, r1, #10
 8003fec:	4610      	mov	r0, r2
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	61fa      	str	r2, [r7, #28]
 8003ff8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ffc:	f7fc fe06 	bl	8000c0c <__aeabi_uldivmod>
 8004000:	4602      	mov	r2, r0
 8004002:	460b      	mov	r3, r1
 8004004:	4613      	mov	r3, r2
 8004006:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_GetSysClockFreq+0x200>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	3301      	adds	r3, #1
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004018:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800401a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004022:	e002      	b.n	800402a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004024:	4b05      	ldr	r3, [pc, #20]	@ (800403c <HAL_RCC_GetSysClockFreq+0x204>)
 8004026:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004028:	bf00      	nop
    }
  }
  return sysclockfreq;
 800402a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800402c:	4618      	mov	r0, r3
 800402e:	3750      	adds	r7, #80	@ 0x50
 8004030:	46bd      	mov	sp, r7
 8004032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	00f42400 	.word	0x00f42400
 8004040:	007a1200 	.word	0x007a1200

08004044 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004048:	4b03      	ldr	r3, [pc, #12]	@ (8004058 <HAL_RCC_GetHCLKFreq+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000000 	.word	0x20000000

0800405c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004060:	f7ff fff0 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b05      	ldr	r3, [pc, #20]	@ (800407c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	0a9b      	lsrs	r3, r3, #10
 800406c:	f003 0307 	and.w	r3, r3, #7
 8004070:	4903      	ldr	r1, [pc, #12]	@ (8004080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40023800 	.word	0x40023800
 8004080:	080082d4 	.word	0x080082d4

08004084 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004088:	f7ff ffdc 	bl	8004044 <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	@ (80040a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	0b5b      	lsrs	r3, r3, #13
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4903      	ldr	r1, [pc, #12]	@ (80040a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40023800 	.word	0x40023800
 80040a8:	080082d4 	.word	0x080082d4

080040ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	220f      	movs	r2, #15
 80040ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040bc:	4b12      	ldr	r3, [pc, #72]	@ (8004108 <HAL_RCC_GetClockConfig+0x5c>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0203 	and.w	r2, r3, #3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004108 <HAL_RCC_GetClockConfig+0x5c>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004108 <HAL_RCC_GetClockConfig+0x5c>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80040e0:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <HAL_RCC_GetClockConfig+0x5c>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	08db      	lsrs	r3, r3, #3
 80040e6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040ee:	4b07      	ldr	r3, [pc, #28]	@ (800410c <HAL_RCC_GetClockConfig+0x60>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0207 	and.w	r2, r3, #7
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	601a      	str	r2, [r3, #0]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	40023c00 	.word	0x40023c00

08004110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e041      	b.n	80041a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f839 	bl	80041ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 fc0e 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d001      	beq.n	80041dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e04e      	b.n	800427a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a23      	ldr	r2, [pc, #140]	@ (8004288 <HAL_TIM_Base_Start_IT+0xc4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d022      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x80>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004206:	d01d      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x80>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1f      	ldr	r2, [pc, #124]	@ (800428c <HAL_TIM_Base_Start_IT+0xc8>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d018      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x80>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1e      	ldr	r2, [pc, #120]	@ (8004290 <HAL_TIM_Base_Start_IT+0xcc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d013      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x80>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1c      	ldr	r2, [pc, #112]	@ (8004294 <HAL_TIM_Base_Start_IT+0xd0>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00e      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x80>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a1b      	ldr	r2, [pc, #108]	@ (8004298 <HAL_TIM_Base_Start_IT+0xd4>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d009      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x80>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a19      	ldr	r2, [pc, #100]	@ (800429c <HAL_TIM_Base_Start_IT+0xd8>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d004      	beq.n	8004244 <HAL_TIM_Base_Start_IT+0x80>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a18      	ldr	r2, [pc, #96]	@ (80042a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d111      	bne.n	8004268 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b06      	cmp	r3, #6
 8004254:	d010      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0201 	orr.w	r2, r2, #1
 8004264:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	e007      	b.n	8004278 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800
 8004294:	40000c00 	.word	0x40000c00
 8004298:	40010400 	.word	0x40010400
 800429c:	40014000 	.word	0x40014000
 80042a0:	40001800 	.word	0x40001800

080042a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e041      	b.n	800433a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd fd7a 	bl	8001dc4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 fb44 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d104      	bne.n	8004362 <HAL_TIM_IC_Start_IT+0x1e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800435e:	b2db      	uxtb	r3, r3
 8004360:	e013      	b.n	800438a <HAL_TIM_IC_Start_IT+0x46>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d104      	bne.n	8004372 <HAL_TIM_IC_Start_IT+0x2e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800436e:	b2db      	uxtb	r3, r3
 8004370:	e00b      	b.n	800438a <HAL_TIM_IC_Start_IT+0x46>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d104      	bne.n	8004382 <HAL_TIM_IC_Start_IT+0x3e>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800437e:	b2db      	uxtb	r3, r3
 8004380:	e003      	b.n	800438a <HAL_TIM_IC_Start_IT+0x46>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004388:	b2db      	uxtb	r3, r3
 800438a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d104      	bne.n	800439c <HAL_TIM_IC_Start_IT+0x58>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e013      	b.n	80043c4 <HAL_TIM_IC_Start_IT+0x80>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d104      	bne.n	80043ac <HAL_TIM_IC_Start_IT+0x68>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e00b      	b.n	80043c4 <HAL_TIM_IC_Start_IT+0x80>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d104      	bne.n	80043bc <HAL_TIM_IC_Start_IT+0x78>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e003      	b.n	80043c4 <HAL_TIM_IC_Start_IT+0x80>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c6:	7bbb      	ldrb	r3, [r7, #14]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d102      	bne.n	80043d2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043cc:	7b7b      	ldrb	r3, [r7, #13]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d001      	beq.n	80043d6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0cc      	b.n	8004570 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d104      	bne.n	80043e6 <HAL_TIM_IC_Start_IT+0xa2>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043e4:	e013      	b.n	800440e <HAL_TIM_IC_Start_IT+0xca>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d104      	bne.n	80043f6 <HAL_TIM_IC_Start_IT+0xb2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043f4:	e00b      	b.n	800440e <HAL_TIM_IC_Start_IT+0xca>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d104      	bne.n	8004406 <HAL_TIM_IC_Start_IT+0xc2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	e003      	b.n	800440e <HAL_TIM_IC_Start_IT+0xca>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d104      	bne.n	800441e <HAL_TIM_IC_Start_IT+0xda>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800441c:	e013      	b.n	8004446 <HAL_TIM_IC_Start_IT+0x102>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b04      	cmp	r3, #4
 8004422:	d104      	bne.n	800442e <HAL_TIM_IC_Start_IT+0xea>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800442c:	e00b      	b.n	8004446 <HAL_TIM_IC_Start_IT+0x102>
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b08      	cmp	r3, #8
 8004432:	d104      	bne.n	800443e <HAL_TIM_IC_Start_IT+0xfa>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800443c:	e003      	b.n	8004446 <HAL_TIM_IC_Start_IT+0x102>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b0c      	cmp	r3, #12
 800444a:	d841      	bhi.n	80044d0 <HAL_TIM_IC_Start_IT+0x18c>
 800444c:	a201      	add	r2, pc, #4	@ (adr r2, 8004454 <HAL_TIM_IC_Start_IT+0x110>)
 800444e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004452:	bf00      	nop
 8004454:	08004489 	.word	0x08004489
 8004458:	080044d1 	.word	0x080044d1
 800445c:	080044d1 	.word	0x080044d1
 8004460:	080044d1 	.word	0x080044d1
 8004464:	0800449b 	.word	0x0800449b
 8004468:	080044d1 	.word	0x080044d1
 800446c:	080044d1 	.word	0x080044d1
 8004470:	080044d1 	.word	0x080044d1
 8004474:	080044ad 	.word	0x080044ad
 8004478:	080044d1 	.word	0x080044d1
 800447c:	080044d1 	.word	0x080044d1
 8004480:	080044d1 	.word	0x080044d1
 8004484:	080044bf 	.word	0x080044bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0202 	orr.w	r2, r2, #2
 8004496:	60da      	str	r2, [r3, #12]
      break;
 8004498:	e01d      	b.n	80044d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0204 	orr.w	r2, r2, #4
 80044a8:	60da      	str	r2, [r3, #12]
      break;
 80044aa:	e014      	b.n	80044d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	60da      	str	r2, [r3, #12]
      break;
 80044bc:	e00b      	b.n	80044d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0210 	orr.w	r2, r2, #16
 80044cc:	60da      	str	r2, [r3, #12]
      break;
 80044ce:	e002      	b.n	80044d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      break;
 80044d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d148      	bne.n	800456e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2201      	movs	r2, #1
 80044e2:	6839      	ldr	r1, [r7, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fc19 	bl	8004d1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <HAL_TIM_IC_Start_IT+0x234>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d022      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x1f6>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044fc:	d01d      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x1f6>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1e      	ldr	r2, [pc, #120]	@ (800457c <HAL_TIM_IC_Start_IT+0x238>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d018      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x1f6>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1c      	ldr	r2, [pc, #112]	@ (8004580 <HAL_TIM_IC_Start_IT+0x23c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d013      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x1f6>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1b      	ldr	r2, [pc, #108]	@ (8004584 <HAL_TIM_IC_Start_IT+0x240>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x1f6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_TIM_IC_Start_IT+0x244>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x1f6>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a18      	ldr	r2, [pc, #96]	@ (800458c <HAL_TIM_IC_Start_IT+0x248>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIM_IC_Start_IT+0x1f6>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_TIM_IC_Start_IT+0x24c>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d111      	bne.n	800455e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b06      	cmp	r3, #6
 800454a:	d010      	beq.n	800456e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	e007      	b.n	800456e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40010000 	.word	0x40010000
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40010400 	.word	0x40010400
 800458c:	40014000 	.word	0x40014000
 8004590:	40001800 	.word	0x40001800

08004594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d020      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d01b      	beq.n	80045f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0202 	mvn.w	r2, #2
 80045c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d003      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fc fcd2 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 80045e4:	e005      	b.n	80045f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f9a4 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f9ab 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d020      	beq.n	8004644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01b      	beq.n	8004644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0204 	mvn.w	r2, #4
 8004614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2202      	movs	r2, #2
 800461a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fc fcac 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 8004630:	e005      	b.n	800463e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f97e 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f985 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d020      	beq.n	8004690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f003 0308 	and.w	r3, r3, #8
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0208 	mvn.w	r2, #8
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2204      	movs	r2, #4
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f003 0303 	and.w	r3, r3, #3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc fc86 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f958 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f95f 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 0310 	and.w	r3, r3, #16
 8004696:	2b00      	cmp	r3, #0
 8004698:	d020      	beq.n	80046dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f06f 0210 	mvn.w	r2, #16
 80046ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2208      	movs	r2, #8
 80046b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	69db      	ldr	r3, [r3, #28]
 80046ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fc60 	bl	8000f88 <HAL_TIM_IC_CaptureCallback>
 80046c8:	e005      	b.n	80046d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f932 	bl	8004934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f939 	bl	8004948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00c      	beq.n	8004700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f06f 0201 	mvn.w	r2, #1
 80046f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fd fa2e 	bl	8001b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fba8 	bl	8004e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00c      	beq.n	8004748 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f90a 	bl	800495c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00c      	beq.n	800476c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0220 	mvn.w	r2, #32
 8004764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fb7a 	bl	8004e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800476c:	bf00      	nop
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_TIM_IC_ConfigChannel+0x1e>
 800478e:	2302      	movs	r3, #2
 8004790:	e088      	b.n	80048a4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80047b0:	f000 f98a 	bl	8004ac8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699a      	ldr	r2, [r3, #24]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 020c 	bic.w	r2, r2, #12
 80047c2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6999      	ldr	r1, [r3, #24]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	619a      	str	r2, [r3, #24]
 80047d6:	e060      	b.n	800489a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d11c      	bne.n	8004818 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80047ee:	f000 f9df 	bl	8004bb0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	699a      	ldr	r2, [r3, #24]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004800:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6999      	ldr	r1, [r3, #24]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	021a      	lsls	r2, r3, #8
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	619a      	str	r2, [r3, #24]
 8004816:	e040      	b.n	800489a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d11b      	bne.n	8004856 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800482e:	f000 f9fc 	bl	8004c2a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 020c 	bic.w	r2, r2, #12
 8004840:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	61da      	str	r2, [r3, #28]
 8004854:	e021      	b.n	800489a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b0c      	cmp	r3, #12
 800485a:	d11c      	bne.n	8004896 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800486c:	f000 fa19 	bl	8004ca2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800487e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69d9      	ldr	r1, [r3, #28]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	430a      	orrs	r2, r1
 8004892:	61da      	str	r2, [r3, #28]
 8004894:	e001      	b.n	800489a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b0c      	cmp	r3, #12
 80048be:	d831      	bhi.n	8004924 <HAL_TIM_ReadCapturedValue+0x78>
 80048c0:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048fd 	.word	0x080048fd
 80048cc:	08004925 	.word	0x08004925
 80048d0:	08004925 	.word	0x08004925
 80048d4:	08004925 	.word	0x08004925
 80048d8:	08004907 	.word	0x08004907
 80048dc:	08004925 	.word	0x08004925
 80048e0:	08004925 	.word	0x08004925
 80048e4:	08004925 	.word	0x08004925
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004925 	.word	0x08004925
 80048f0:	08004925 	.word	0x08004925
 80048f4:	08004925 	.word	0x08004925
 80048f8:	0800491b 	.word	0x0800491b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004902:	60fb      	str	r3, [r7, #12]

      break;
 8004904:	e00f      	b.n	8004926 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490c:	60fb      	str	r3, [r7, #12]

      break;
 800490e:	e00a      	b.n	8004926 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004916:	60fb      	str	r3, [r7, #12]

      break;
 8004918:	e005      	b.n	8004926 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004920:	60fb      	str	r3, [r7, #12]

      break;
 8004922:	e000      	b.n	8004926 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004924:	bf00      	nop
  }

  return tmpreg;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004964:	bf00      	nop
 8004966:	370c      	adds	r7, #12
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a46      	ldr	r2, [pc, #280]	@ (8004a9c <TIM_Base_SetConfig+0x12c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498e:	d00f      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a43      	ldr	r2, [pc, #268]	@ (8004aa0 <TIM_Base_SetConfig+0x130>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a42      	ldr	r2, [pc, #264]	@ (8004aa4 <TIM_Base_SetConfig+0x134>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a41      	ldr	r2, [pc, #260]	@ (8004aa8 <TIM_Base_SetConfig+0x138>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a40      	ldr	r2, [pc, #256]	@ (8004aac <TIM_Base_SetConfig+0x13c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d108      	bne.n	80049c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a35      	ldr	r2, [pc, #212]	@ (8004a9c <TIM_Base_SetConfig+0x12c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d02b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d0:	d027      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a32      	ldr	r2, [pc, #200]	@ (8004aa0 <TIM_Base_SetConfig+0x130>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d023      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a31      	ldr	r2, [pc, #196]	@ (8004aa4 <TIM_Base_SetConfig+0x134>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d01f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a30      	ldr	r2, [pc, #192]	@ (8004aa8 <TIM_Base_SetConfig+0x138>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2f      	ldr	r2, [pc, #188]	@ (8004aac <TIM_Base_SetConfig+0x13c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d017      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab0 <TIM_Base_SetConfig+0x140>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d013      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab4 <TIM_Base_SetConfig+0x144>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d00f      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a2c      	ldr	r2, [pc, #176]	@ (8004ab8 <TIM_Base_SetConfig+0x148>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00b      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004abc <TIM_Base_SetConfig+0x14c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a2a      	ldr	r2, [pc, #168]	@ (8004ac0 <TIM_Base_SetConfig+0x150>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d003      	beq.n	8004a22 <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a29      	ldr	r2, [pc, #164]	@ (8004ac4 <TIM_Base_SetConfig+0x154>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d108      	bne.n	8004a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <TIM_Base_SetConfig+0x12c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a12      	ldr	r2, [pc, #72]	@ (8004aac <TIM_Base_SetConfig+0x13c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d105      	bne.n	8004a8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	611a      	str	r2, [r3, #16]
  }
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 0201 	bic.w	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a28      	ldr	r2, [pc, #160]	@ (8004b94 <TIM_TI1_SetConfig+0xcc>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01b      	beq.n	8004b2e <TIM_TI1_SetConfig+0x66>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afc:	d017      	beq.n	8004b2e <TIM_TI1_SetConfig+0x66>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a25      	ldr	r2, [pc, #148]	@ (8004b98 <TIM_TI1_SetConfig+0xd0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <TIM_TI1_SetConfig+0x66>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a24      	ldr	r2, [pc, #144]	@ (8004b9c <TIM_TI1_SetConfig+0xd4>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d00f      	beq.n	8004b2e <TIM_TI1_SetConfig+0x66>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a23      	ldr	r2, [pc, #140]	@ (8004ba0 <TIM_TI1_SetConfig+0xd8>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00b      	beq.n	8004b2e <TIM_TI1_SetConfig+0x66>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a22      	ldr	r2, [pc, #136]	@ (8004ba4 <TIM_TI1_SetConfig+0xdc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d007      	beq.n	8004b2e <TIM_TI1_SetConfig+0x66>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a21      	ldr	r2, [pc, #132]	@ (8004ba8 <TIM_TI1_SetConfig+0xe0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d003      	beq.n	8004b2e <TIM_TI1_SetConfig+0x66>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a20      	ldr	r2, [pc, #128]	@ (8004bac <TIM_TI1_SetConfig+0xe4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <TIM_TI1_SetConfig+0x6a>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e000      	b.n	8004b34 <TIM_TI1_SetConfig+0x6c>
 8004b32:	2300      	movs	r3, #0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	e003      	b.n	8004b52 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f043 0301 	orr.w	r3, r3, #1
 8004b50:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f023 030a 	bic.w	r3, r3, #10
 8004b6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	f003 030a 	and.w	r3, r3, #10
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	40010000 	.word	0x40010000
 8004b98:	40000400 	.word	0x40000400
 8004b9c:	40000800 	.word	0x40000800
 8004ba0:	40000c00 	.word	0x40000c00
 8004ba4:	40010400 	.word	0x40010400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40001800 	.word	0x40001800

08004bb0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f023 0210 	bic.w	r2, r3, #16
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	021b      	lsls	r3, r3, #8
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	031b      	lsls	r3, r3, #12
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	621a      	str	r2, [r3, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	371c      	adds	r7, #28
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b087      	sub	sp, #28
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	607a      	str	r2, [r7, #4]
 8004c36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f023 0303 	bic.w	r3, r3, #3
 8004c56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	621a      	str	r2, [r3, #32]
}
 8004c96:	bf00      	nop
 8004c98:	371c      	adds	r7, #28
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr

08004ca2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	69db      	ldr	r3, [r3, #28]
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	693a      	ldr	r2, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ce0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	031b      	lsls	r3, r3, #12
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	621a      	str	r2, [r3, #32]
}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	2201      	movs	r2, #1
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a1a      	ldr	r2, [r3, #32]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	401a      	ands	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1a      	ldr	r2, [r3, #32]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	fa01 f303 	lsl.w	r3, r1, r3
 8004d54:	431a      	orrs	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
	...

08004d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	e05a      	b.n	8004e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68fa      	ldr	r2, [r7, #12]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a21      	ldr	r2, [pc, #132]	@ (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dcc:	d01d      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d018      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00e      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a18      	ldr	r2, [pc, #96]	@ (8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d009      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a17      	ldr	r2, [pc, #92]	@ (8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a15      	ldr	r2, [pc, #84]	@ (8004e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d10c      	bne.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40010000 	.word	0x40010000
 8004e48:	40000400 	.word	0x40000400
 8004e4c:	40000800 	.word	0x40000800
 8004e50:	40000c00 	.word	0x40000c00
 8004e54:	40010400 	.word	0x40010400
 8004e58:	40014000 	.word	0x40014000
 8004e5c:	40001800 	.word	0x40001800

08004e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b083      	sub	sp, #12
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b083      	sub	sp, #12
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr

08004e88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e042      	b.n	8004f20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc ffd6 	bl	8001e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2224      	movs	r2, #36	@ 0x24
 8004eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68da      	ldr	r2, [r3, #12]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f973 	bl	80051b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ee0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ef0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08a      	sub	sp, #40	@ 0x28
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d175      	bne.n	8005034 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_UART_Transmit+0x2c>
 8004f4e:	88fb      	ldrh	r3, [r7, #6]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e06e      	b.n	8005036 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2221      	movs	r2, #33	@ 0x21
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f66:	f7fd f94d 	bl	8002204 <HAL_GetTick>
 8004f6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f80:	d108      	bne.n	8004f94 <HAL_UART_Transmit+0x6c>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	e003      	b.n	8004f9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f9c:	e02e      	b.n	8004ffc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	9300      	str	r3, [sp, #0]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2180      	movs	r1, #128	@ 0x80
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f000 f848 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e03a      	b.n	8005036 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	3302      	adds	r3, #2
 8004fda:	61bb      	str	r3, [r7, #24]
 8004fdc:	e007      	b.n	8004fee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	781a      	ldrb	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	3301      	adds	r3, #1
 8004fec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1cb      	bne.n	8004f9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2200      	movs	r2, #0
 800500e:	2140      	movs	r1, #64	@ 0x40
 8005010:	68f8      	ldr	r0, [r7, #12]
 8005012:	f000 f814 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e006      	b.n	8005036 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005030:	2300      	movs	r3, #0
 8005032:	e000      	b.n	8005036 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	e03b      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005056:	d037      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fd f8d4 	bl	8002204 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e03a      	b.n	80050e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d023      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b80      	cmp	r3, #128	@ 0x80
 8005084:	d020      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b40      	cmp	r3, #64	@ 0x40
 800508a:	d01d      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b08      	cmp	r3, #8
 8005098:	d116      	bne.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f81d 	bl	80050f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2208      	movs	r2, #8
 80050ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e00f      	b.n	80050e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d0b4      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b095      	sub	sp, #84	@ 0x54
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005118:	643a      	str	r2, [r7, #64]	@ 0x40
 800511a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800511e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e5      	bne.n	80050f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	3314      	adds	r3, #20
 8005132:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	61fb      	str	r3, [r7, #28]
   return(result);
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f023 0301 	bic.w	r3, r3, #1
 8005142:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800514c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005164:	2b01      	cmp	r3, #1
 8005166:	d119      	bne.n	800519c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	60bb      	str	r3, [r7, #8]
   return(result);
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f023 0310 	bic.w	r3, r3, #16
 800517e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005188:	61ba      	str	r2, [r7, #24]
 800518a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6979      	ldr	r1, [r7, #20]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	613b      	str	r3, [r7, #16]
   return(result);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051aa:	bf00      	nop
 80051ac:	3754      	adds	r7, #84	@ 0x54
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051bc:	b0c0      	sub	sp, #256	@ 0x100
 80051be:	af00      	add	r7, sp, #0
 80051c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	68d9      	ldr	r1, [r3, #12]
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	ea40 0301 	orr.w	r3, r0, r1
 80051e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e6:	689a      	ldr	r2, [r3, #8]
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	69db      	ldr	r3, [r3, #28]
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005210:	f021 010c 	bic.w	r1, r1, #12
 8005214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800521e:	430b      	orrs	r3, r1
 8005220:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	6999      	ldr	r1, [r3, #24]
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	ea40 0301 	orr.w	r3, r0, r1
 800523e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	4b8f      	ldr	r3, [pc, #572]	@ (8005484 <UART_SetConfig+0x2cc>)
 8005248:	429a      	cmp	r2, r3
 800524a:	d005      	beq.n	8005258 <UART_SetConfig+0xa0>
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	4b8d      	ldr	r3, [pc, #564]	@ (8005488 <UART_SetConfig+0x2d0>)
 8005254:	429a      	cmp	r2, r3
 8005256:	d104      	bne.n	8005262 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005258:	f7fe ff14 	bl	8004084 <HAL_RCC_GetPCLK2Freq>
 800525c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005260:	e003      	b.n	800526a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005262:	f7fe fefb 	bl	800405c <HAL_RCC_GetPCLK1Freq>
 8005266:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005274:	f040 810c 	bne.w	8005490 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527c:	2200      	movs	r2, #0
 800527e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005282:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005286:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800528a:	4622      	mov	r2, r4
 800528c:	462b      	mov	r3, r5
 800528e:	1891      	adds	r1, r2, r2
 8005290:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005292:	415b      	adcs	r3, r3
 8005294:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005296:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800529a:	4621      	mov	r1, r4
 800529c:	eb12 0801 	adds.w	r8, r2, r1
 80052a0:	4629      	mov	r1, r5
 80052a2:	eb43 0901 	adc.w	r9, r3, r1
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052ba:	4690      	mov	r8, r2
 80052bc:	4699      	mov	r9, r3
 80052be:	4623      	mov	r3, r4
 80052c0:	eb18 0303 	adds.w	r3, r8, r3
 80052c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052c8:	462b      	mov	r3, r5
 80052ca:	eb49 0303 	adc.w	r3, r9, r3
 80052ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052e6:	460b      	mov	r3, r1
 80052e8:	18db      	adds	r3, r3, r3
 80052ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ec:	4613      	mov	r3, r2
 80052ee:	eb42 0303 	adc.w	r3, r2, r3
 80052f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80052f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052fc:	f7fb fc86 	bl	8000c0c <__aeabi_uldivmod>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4b61      	ldr	r3, [pc, #388]	@ (800548c <UART_SetConfig+0x2d4>)
 8005306:	fba3 2302 	umull	r2, r3, r3, r2
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	011c      	lsls	r4, r3, #4
 800530e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005312:	2200      	movs	r2, #0
 8005314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005318:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800531c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005320:	4642      	mov	r2, r8
 8005322:	464b      	mov	r3, r9
 8005324:	1891      	adds	r1, r2, r2
 8005326:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005328:	415b      	adcs	r3, r3
 800532a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005330:	4641      	mov	r1, r8
 8005332:	eb12 0a01 	adds.w	sl, r2, r1
 8005336:	4649      	mov	r1, r9
 8005338:	eb43 0b01 	adc.w	fp, r3, r1
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005348:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800534c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005350:	4692      	mov	sl, r2
 8005352:	469b      	mov	fp, r3
 8005354:	4643      	mov	r3, r8
 8005356:	eb1a 0303 	adds.w	r3, sl, r3
 800535a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800535e:	464b      	mov	r3, r9
 8005360:	eb4b 0303 	adc.w	r3, fp, r3
 8005364:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005374:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005378:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800537c:	460b      	mov	r3, r1
 800537e:	18db      	adds	r3, r3, r3
 8005380:	643b      	str	r3, [r7, #64]	@ 0x40
 8005382:	4613      	mov	r3, r2
 8005384:	eb42 0303 	adc.w	r3, r2, r3
 8005388:	647b      	str	r3, [r7, #68]	@ 0x44
 800538a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800538e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005392:	f7fb fc3b 	bl	8000c0c <__aeabi_uldivmod>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4611      	mov	r1, r2
 800539c:	4b3b      	ldr	r3, [pc, #236]	@ (800548c <UART_SetConfig+0x2d4>)
 800539e:	fba3 2301 	umull	r2, r3, r3, r1
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2264      	movs	r2, #100	@ 0x64
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	1acb      	subs	r3, r1, r3
 80053ac:	00db      	lsls	r3, r3, #3
 80053ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80053b2:	4b36      	ldr	r3, [pc, #216]	@ (800548c <UART_SetConfig+0x2d4>)
 80053b4:	fba3 2302 	umull	r2, r3, r3, r2
 80053b8:	095b      	lsrs	r3, r3, #5
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80053c0:	441c      	add	r4, r3
 80053c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053d4:	4642      	mov	r2, r8
 80053d6:	464b      	mov	r3, r9
 80053d8:	1891      	adds	r1, r2, r2
 80053da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053dc:	415b      	adcs	r3, r3
 80053de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053e4:	4641      	mov	r1, r8
 80053e6:	1851      	adds	r1, r2, r1
 80053e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80053ea:	4649      	mov	r1, r9
 80053ec:	414b      	adcs	r3, r1
 80053ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053fc:	4659      	mov	r1, fp
 80053fe:	00cb      	lsls	r3, r1, #3
 8005400:	4651      	mov	r1, sl
 8005402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005406:	4651      	mov	r1, sl
 8005408:	00ca      	lsls	r2, r1, #3
 800540a:	4610      	mov	r0, r2
 800540c:	4619      	mov	r1, r3
 800540e:	4603      	mov	r3, r0
 8005410:	4642      	mov	r2, r8
 8005412:	189b      	adds	r3, r3, r2
 8005414:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005418:	464b      	mov	r3, r9
 800541a:	460a      	mov	r2, r1
 800541c:	eb42 0303 	adc.w	r3, r2, r3
 8005420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005430:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005434:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005438:	460b      	mov	r3, r1
 800543a:	18db      	adds	r3, r3, r3
 800543c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800543e:	4613      	mov	r3, r2
 8005440:	eb42 0303 	adc.w	r3, r2, r3
 8005444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005446:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800544a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800544e:	f7fb fbdd 	bl	8000c0c <__aeabi_uldivmod>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4b0d      	ldr	r3, [pc, #52]	@ (800548c <UART_SetConfig+0x2d4>)
 8005458:	fba3 1302 	umull	r1, r3, r3, r2
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	2164      	movs	r1, #100	@ 0x64
 8005460:	fb01 f303 	mul.w	r3, r1, r3
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	3332      	adds	r3, #50	@ 0x32
 800546a:	4a08      	ldr	r2, [pc, #32]	@ (800548c <UART_SetConfig+0x2d4>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	f003 0207 	and.w	r2, r3, #7
 8005476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4422      	add	r2, r4
 800547e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005480:	e106      	b.n	8005690 <UART_SetConfig+0x4d8>
 8005482:	bf00      	nop
 8005484:	40011000 	.word	0x40011000
 8005488:	40011400 	.word	0x40011400
 800548c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005490:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005494:	2200      	movs	r2, #0
 8005496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800549a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800549e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80054a2:	4642      	mov	r2, r8
 80054a4:	464b      	mov	r3, r9
 80054a6:	1891      	adds	r1, r2, r2
 80054a8:	6239      	str	r1, [r7, #32]
 80054aa:	415b      	adcs	r3, r3
 80054ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054b2:	4641      	mov	r1, r8
 80054b4:	1854      	adds	r4, r2, r1
 80054b6:	4649      	mov	r1, r9
 80054b8:	eb43 0501 	adc.w	r5, r3, r1
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	00eb      	lsls	r3, r5, #3
 80054c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ca:	00e2      	lsls	r2, r4, #3
 80054cc:	4614      	mov	r4, r2
 80054ce:	461d      	mov	r5, r3
 80054d0:	4643      	mov	r3, r8
 80054d2:	18e3      	adds	r3, r4, r3
 80054d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054d8:	464b      	mov	r3, r9
 80054da:	eb45 0303 	adc.w	r3, r5, r3
 80054de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054fe:	4629      	mov	r1, r5
 8005500:	008b      	lsls	r3, r1, #2
 8005502:	4621      	mov	r1, r4
 8005504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005508:	4621      	mov	r1, r4
 800550a:	008a      	lsls	r2, r1, #2
 800550c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005510:	f7fb fb7c 	bl	8000c0c <__aeabi_uldivmod>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4b60      	ldr	r3, [pc, #384]	@ (800569c <UART_SetConfig+0x4e4>)
 800551a:	fba3 2302 	umull	r2, r3, r3, r2
 800551e:	095b      	lsrs	r3, r3, #5
 8005520:	011c      	lsls	r4, r3, #4
 8005522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005526:	2200      	movs	r2, #0
 8005528:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800552c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005530:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	1891      	adds	r1, r2, r2
 800553a:	61b9      	str	r1, [r7, #24]
 800553c:	415b      	adcs	r3, r3
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005544:	4641      	mov	r1, r8
 8005546:	1851      	adds	r1, r2, r1
 8005548:	6139      	str	r1, [r7, #16]
 800554a:	4649      	mov	r1, r9
 800554c:	414b      	adcs	r3, r1
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	f04f 0200 	mov.w	r2, #0
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800555c:	4659      	mov	r1, fp
 800555e:	00cb      	lsls	r3, r1, #3
 8005560:	4651      	mov	r1, sl
 8005562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005566:	4651      	mov	r1, sl
 8005568:	00ca      	lsls	r2, r1, #3
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	4603      	mov	r3, r0
 8005570:	4642      	mov	r2, r8
 8005572:	189b      	adds	r3, r3, r2
 8005574:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005578:	464b      	mov	r3, r9
 800557a:	460a      	mov	r2, r1
 800557c:	eb42 0303 	adc.w	r3, r2, r3
 8005580:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800558e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800559c:	4649      	mov	r1, r9
 800559e:	008b      	lsls	r3, r1, #2
 80055a0:	4641      	mov	r1, r8
 80055a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055a6:	4641      	mov	r1, r8
 80055a8:	008a      	lsls	r2, r1, #2
 80055aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80055ae:	f7fb fb2d 	bl	8000c0c <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4611      	mov	r1, r2
 80055b8:	4b38      	ldr	r3, [pc, #224]	@ (800569c <UART_SetConfig+0x4e4>)
 80055ba:	fba3 2301 	umull	r2, r3, r3, r1
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2264      	movs	r2, #100	@ 0x64
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	1acb      	subs	r3, r1, r3
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	3332      	adds	r3, #50	@ 0x32
 80055cc:	4a33      	ldr	r2, [pc, #204]	@ (800569c <UART_SetConfig+0x4e4>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055d8:	441c      	add	r4, r3
 80055da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055de:	2200      	movs	r2, #0
 80055e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80055e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80055e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055e8:	4642      	mov	r2, r8
 80055ea:	464b      	mov	r3, r9
 80055ec:	1891      	adds	r1, r2, r2
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	415b      	adcs	r3, r3
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055f8:	4641      	mov	r1, r8
 80055fa:	1851      	adds	r1, r2, r1
 80055fc:	6039      	str	r1, [r7, #0]
 80055fe:	4649      	mov	r1, r9
 8005600:	414b      	adcs	r3, r1
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005610:	4659      	mov	r1, fp
 8005612:	00cb      	lsls	r3, r1, #3
 8005614:	4651      	mov	r1, sl
 8005616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800561a:	4651      	mov	r1, sl
 800561c:	00ca      	lsls	r2, r1, #3
 800561e:	4610      	mov	r0, r2
 8005620:	4619      	mov	r1, r3
 8005622:	4603      	mov	r3, r0
 8005624:	4642      	mov	r2, r8
 8005626:	189b      	adds	r3, r3, r2
 8005628:	66bb      	str	r3, [r7, #104]	@ 0x68
 800562a:	464b      	mov	r3, r9
 800562c:	460a      	mov	r2, r1
 800562e:	eb42 0303 	adc.w	r3, r2, r3
 8005632:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	663b      	str	r3, [r7, #96]	@ 0x60
 800563e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800564c:	4649      	mov	r1, r9
 800564e:	008b      	lsls	r3, r1, #2
 8005650:	4641      	mov	r1, r8
 8005652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005656:	4641      	mov	r1, r8
 8005658:	008a      	lsls	r2, r1, #2
 800565a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800565e:	f7fb fad5 	bl	8000c0c <__aeabi_uldivmod>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4b0d      	ldr	r3, [pc, #52]	@ (800569c <UART_SetConfig+0x4e4>)
 8005668:	fba3 1302 	umull	r1, r3, r3, r2
 800566c:	095b      	lsrs	r3, r3, #5
 800566e:	2164      	movs	r1, #100	@ 0x64
 8005670:	fb01 f303 	mul.w	r3, r1, r3
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	3332      	adds	r3, #50	@ 0x32
 800567a:	4a08      	ldr	r2, [pc, #32]	@ (800569c <UART_SetConfig+0x4e4>)
 800567c:	fba2 2303 	umull	r2, r3, r2, r3
 8005680:	095b      	lsrs	r3, r3, #5
 8005682:	f003 020f 	and.w	r2, r3, #15
 8005686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4422      	add	r2, r4
 800568e:	609a      	str	r2, [r3, #8]
}
 8005690:	bf00      	nop
 8005692:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005696:	46bd      	mov	sp, r7
 8005698:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569c:	51eb851f 	.word	0x51eb851f

080056a0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b085      	sub	sp, #20
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056b2:	2b84      	cmp	r3, #132	@ 0x84
 80056b4:	d005      	beq.n	80056c2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	4413      	add	r3, r2
 80056be:	3303      	adds	r3, #3
 80056c0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056c2:	68fb      	ldr	r3, [r7, #12]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056d4:	f000 ff36 	bl	8006544 <vTaskStartScheduler>
  
  return osOK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	bd80      	pop	{r7, pc}

080056de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80056de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056e0:	b089      	sub	sp, #36	@ 0x24
 80056e2:	af04      	add	r7, sp, #16
 80056e4:	6078      	str	r0, [r7, #4]
 80056e6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d020      	beq.n	8005732 <osThreadCreate+0x54>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d01c      	beq.n	8005732 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685c      	ldr	r4, [r3, #4]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	691e      	ldr	r6, [r3, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff ffc8 	bl	80056a0 <makeFreeRtosPriority>
 8005710:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800571a:	9202      	str	r2, [sp, #8]
 800571c:	9301      	str	r3, [sp, #4]
 800571e:	9100      	str	r1, [sp, #0]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	4632      	mov	r2, r6
 8005724:	4629      	mov	r1, r5
 8005726:	4620      	mov	r0, r4
 8005728:	f000 fca6 	bl	8006078 <xTaskCreateStatic>
 800572c:	4603      	mov	r3, r0
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e01c      	b.n	800576c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685c      	ldr	r4, [r3, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800573e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005746:	4618      	mov	r0, r3
 8005748:	f7ff ffaa 	bl	80056a0 <makeFreeRtosPriority>
 800574c:	4602      	mov	r2, r0
 800574e:	f107 030c 	add.w	r3, r7, #12
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	9200      	str	r2, [sp, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	4632      	mov	r2, r6
 800575a:	4629      	mov	r1, r5
 800575c:	4620      	mov	r0, r4
 800575e:	f000 fceb 	bl	8006138 <xTaskCreate>
 8005762:	4603      	mov	r3, r0
 8005764:	2b01      	cmp	r3, #1
 8005766:	d001      	beq.n	800576c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005768:	2300      	movs	r3, #0
 800576a:	e000      	b.n	800576e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800576c:	68fb      	ldr	r3, [r7, #12]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005776 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d001      	beq.n	800578c <osDelay+0x16>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	e000      	b.n	800578e <osDelay+0x18>
 800578c:	2301      	movs	r3, #1
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fea2 	bl	80064d8 <vTaskDelay>
  
  return osOK;
 8005794:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800579e:	b480      	push	{r7}
 80057a0:	b083      	sub	sp, #12
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f103 0208 	add.w	r2, r3, #8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80057b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f103 0208 	add.w	r2, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f103 0208 	add.w	r2, r3, #8
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057de:	b480      	push	{r7}
 80057e0:	b083      	sub	sp, #12
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689a      	ldr	r2, [r3, #8]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	1c5a      	adds	r2, r3, #1
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	601a      	str	r2, [r3, #0]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005856:	d103      	bne.n	8005860 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e00c      	b.n	800587a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3308      	adds	r3, #8
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e002      	b.n	800586e <vListInsert+0x2e>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	429a      	cmp	r2, r3
 8005878:	d2f6      	bcs.n	8005868 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	683a      	ldr	r2, [r7, #0]
 8005894:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	601a      	str	r2, [r3, #0]
}
 80058a6:	bf00      	nop
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6892      	ldr	r2, [r2, #8]
 80058c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6852      	ldr	r2, [r2, #4]
 80058d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d103      	bne.n	80058e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	1e5a      	subs	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800592e:	bf00      	nop
 8005930:	bf00      	nop
 8005932:	e7fd      	b.n	8005930 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005934:	f001 fc70 	bl	8007218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005944:	fb01 f303 	mul.w	r3, r1, r3
 8005948:	441a      	add	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005964:	3b01      	subs	r3, #1
 8005966:	68f9      	ldr	r1, [r7, #12]
 8005968:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800596a:	fb01 f303 	mul.w	r3, r1, r3
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	22ff      	movs	r2, #255	@ 0xff
 8005978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	22ff      	movs	r2, #255	@ 0xff
 8005980:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d114      	bne.n	80059b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01a      	beq.n	80059c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3310      	adds	r3, #16
 8005996:	4618      	mov	r0, r3
 8005998:	f001 f83e 	bl	8006a18 <xTaskRemoveFromEventList>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d012      	beq.n	80059c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059a2:	4b0d      	ldr	r3, [pc, #52]	@ (80059d8 <xQueueGenericReset+0xd0>)
 80059a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	e009      	b.n	80059c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3310      	adds	r3, #16
 80059b8:	4618      	mov	r0, r3
 80059ba:	f7ff fef0 	bl	800579e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3324      	adds	r3, #36	@ 0x24
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7ff feeb 	bl	800579e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059c8:	f001 fc58 	bl	800727c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059cc:	2301      	movs	r3, #1
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	e000ed04 	.word	0xe000ed04

080059dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08a      	sub	sp, #40	@ 0x28
 80059e0:	af02      	add	r7, sp, #8
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	4613      	mov	r3, r2
 80059e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10b      	bne.n	8005a08 <xQueueGenericCreate+0x2c>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	613b      	str	r3, [r7, #16]
}
 8005a02:	bf00      	nop
 8005a04:	bf00      	nop
 8005a06:	e7fd      	b.n	8005a04 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	fb02 f303 	mul.w	r3, r2, r3
 8005a10:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	3348      	adds	r3, #72	@ 0x48
 8005a16:	4618      	mov	r0, r3
 8005a18:	f001 fcde 	bl	80073d8 <pvPortMalloc>
 8005a1c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d011      	beq.n	8005a48 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	3348      	adds	r3, #72	@ 0x48
 8005a2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a36:	79fa      	ldrb	r2, [r7, #7]
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f805 	bl	8005a52 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a48:	69bb      	ldr	r3, [r7, #24]
	}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a52:	b580      	push	{r7, lr}
 8005a54:	b084      	sub	sp, #16
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	60b9      	str	r1, [r7, #8]
 8005a5c:	607a      	str	r2, [r7, #4]
 8005a5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	601a      	str	r2, [r3, #0]
 8005a6c:	e002      	b.n	8005a74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a80:	2101      	movs	r1, #1
 8005a82:	69b8      	ldr	r0, [r7, #24]
 8005a84:	f7ff ff40 	bl	8005908 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	@ 0x38
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10b      	bne.n	8005ac4 <xQueueGenericSend+0x34>
	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005abe:	bf00      	nop
 8005ac0:	bf00      	nop
 8005ac2:	e7fd      	b.n	8005ac0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <xQueueGenericSend+0x42>
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <xQueueGenericSend+0x46>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <xQueueGenericSend+0x48>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <xQueueGenericSend+0x64>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	e7fd      	b.n	8005af0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d103      	bne.n	8005b02 <xQueueGenericSend+0x72>
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <xQueueGenericSend+0x76>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <xQueueGenericSend+0x78>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <xQueueGenericSend+0x94>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b24:	f001 f93e 	bl	8006da4 <xTaskGetSchedulerState>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d102      	bne.n	8005b34 <xQueueGenericSend+0xa4>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <xQueueGenericSend+0xa8>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <xQueueGenericSend+0xaa>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10b      	bne.n	8005b56 <xQueueGenericSend+0xc6>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	61fb      	str	r3, [r7, #28]
}
 8005b50:	bf00      	nop
 8005b52:	bf00      	nop
 8005b54:	e7fd      	b.n	8005b52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b56:	f001 fb5f 	bl	8007218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d302      	bcc.n	8005b6c <xQueueGenericSend+0xdc>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d129      	bne.n	8005bc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	68b9      	ldr	r1, [r7, #8]
 8005b70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b72:	f000 f971 	bl	8005e58 <prvCopyDataToQueue>
 8005b76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b82:	3324      	adds	r3, #36	@ 0x24
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 ff47 	bl	8006a18 <xTaskRemoveFromEventList>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d013      	beq.n	8005bb8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b90:	4b3f      	ldr	r3, [pc, #252]	@ (8005c90 <xQueueGenericSend+0x200>)
 8005b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	f3bf 8f6f 	isb	sy
 8005ba0:	e00a      	b.n	8005bb8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d007      	beq.n	8005bb8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ba8:	4b39      	ldr	r3, [pc, #228]	@ (8005c90 <xQueueGenericSend+0x200>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005bb8:	f001 fb60 	bl	800727c <vPortExitCritical>
				return pdPASS;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e063      	b.n	8005c88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005bc6:	f001 fb59 	bl	800727c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e05c      	b.n	8005c88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d106      	bne.n	8005be2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bd4:	f107 0314 	add.w	r3, r7, #20
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 ff81 	bl	8006ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bde:	2301      	movs	r3, #1
 8005be0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005be2:	f001 fb4b 	bl	800727c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005be6:	f000 fd17 	bl	8006618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bea:	f001 fb15 	bl	8007218 <vPortEnterCritical>
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bfa:	d103      	bne.n	8005c04 <xQueueGenericSend+0x174>
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c10:	d103      	bne.n	8005c1a <xQueueGenericSend+0x18a>
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c1a:	f001 fb2f 	bl	800727c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c1e:	1d3a      	adds	r2, r7, #4
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 ff70 	bl	8006b0c <xTaskCheckForTimeOut>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d124      	bne.n	8005c7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c34:	f000 fa08 	bl	8006048 <prvIsQueueFull>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d018      	beq.n	8005c70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	3310      	adds	r3, #16
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fec0 	bl	80069cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c4e:	f000 f993 	bl	8005f78 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c52:	f000 fcef 	bl	8006634 <xTaskResumeAll>
 8005c56:	4603      	mov	r3, r0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f47f af7c 	bne.w	8005b56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <xQueueGenericSend+0x200>)
 8005c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	e772      	b.n	8005b56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c72:	f000 f981 	bl	8005f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c76:	f000 fcdd 	bl	8006634 <xTaskResumeAll>
 8005c7a:	e76c      	b.n	8005b56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c7e:	f000 f97b 	bl	8005f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c82:	f000 fcd7 	bl	8006634 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3738      	adds	r7, #56	@ 0x38
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08c      	sub	sp, #48	@ 0x30
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <xQueueReceive+0x32>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	623b      	str	r3, [r7, #32]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d103      	bne.n	8005cd4 <xQueueReceive+0x40>
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <xQueueReceive+0x44>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <xQueueReceive+0x46>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d10b      	bne.n	8005cf6 <xQueueReceive+0x62>
	__asm volatile
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	61fb      	str	r3, [r7, #28]
}
 8005cf0:	bf00      	nop
 8005cf2:	bf00      	nop
 8005cf4:	e7fd      	b.n	8005cf2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cf6:	f001 f855 	bl	8006da4 <xTaskGetSchedulerState>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d102      	bne.n	8005d06 <xQueueReceive+0x72>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d101      	bne.n	8005d0a <xQueueReceive+0x76>
 8005d06:	2301      	movs	r3, #1
 8005d08:	e000      	b.n	8005d0c <xQueueReceive+0x78>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10b      	bne.n	8005d28 <xQueueReceive+0x94>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	61bb      	str	r3, [r7, #24]
}
 8005d22:	bf00      	nop
 8005d24:	bf00      	nop
 8005d26:	e7fd      	b.n	8005d24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d28:	f001 fa76 	bl	8007218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d01f      	beq.n	8005d78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d38:	68b9      	ldr	r1, [r7, #8]
 8005d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d3c:	f000 f8f6 	bl	8005f2c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d42:	1e5a      	subs	r2, r3, #1
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00f      	beq.n	8005d70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	3310      	adds	r3, #16
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 fe5f 	bl	8006a18 <xTaskRemoveFromEventList>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d60:	4b3c      	ldr	r3, [pc, #240]	@ (8005e54 <xQueueReceive+0x1c0>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d70:	f001 fa84 	bl	800727c <vPortExitCritical>
				return pdPASS;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e069      	b.n	8005e4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d7e:	f001 fa7d 	bl	800727c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d82:	2300      	movs	r3, #0
 8005d84:	e062      	b.n	8005e4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d8c:	f107 0310 	add.w	r3, r7, #16
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fea5 	bl	8006ae0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d96:	2301      	movs	r3, #1
 8005d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d9a:	f001 fa6f 	bl	800727c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d9e:	f000 fc3b 	bl	8006618 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005da2:	f001 fa39 	bl	8007218 <vPortEnterCritical>
 8005da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005db2:	d103      	bne.n	8005dbc <xQueueReceive+0x128>
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dc2:	b25b      	sxtb	r3, r3
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dc8:	d103      	bne.n	8005dd2 <xQueueReceive+0x13e>
 8005dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd2:	f001 fa53 	bl	800727c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dd6:	1d3a      	adds	r2, r7, #4
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fe94 	bl	8006b0c <xTaskCheckForTimeOut>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d123      	bne.n	8005e32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dec:	f000 f916 	bl	800601c <prvIsQueueEmpty>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d017      	beq.n	8005e26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df8:	3324      	adds	r3, #36	@ 0x24
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fde4 	bl	80069cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e06:	f000 f8b7 	bl	8005f78 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e0a:	f000 fc13 	bl	8006634 <xTaskResumeAll>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d189      	bne.n	8005d28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e14:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <xQueueReceive+0x1c0>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	e780      	b.n	8005d28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e28:	f000 f8a6 	bl	8005f78 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e2c:	f000 fc02 	bl	8006634 <xTaskResumeAll>
 8005e30:	e77a      	b.n	8005d28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e34:	f000 f8a0 	bl	8005f78 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e38:	f000 fbfc 	bl	8006634 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3e:	f000 f8ed 	bl	800601c <prvIsQueueEmpty>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f43f af6f 	beq.w	8005d28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3730      	adds	r7, #48	@ 0x30
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10d      	bne.n	8005e92 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d14d      	bne.n	8005f1a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 ffac 	bl	8006de0 <xTaskPriorityDisinherit>
 8005e88:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
 8005e90:	e043      	b.n	8005f1a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d119      	bne.n	8005ecc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6858      	ldr	r0, [r3, #4]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	f001 fd38 	bl	8007918 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685a      	ldr	r2, [r3, #4]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb0:	441a      	add	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d32b      	bcc.n	8005f1a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	e026      	b.n	8005f1a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	68d8      	ldr	r0, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68b9      	ldr	r1, [r7, #8]
 8005ed8:	f001 fd1e 	bl	8007918 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68da      	ldr	r2, [r3, #12]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d207      	bcs.n	8005f08 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f00:	425b      	negs	r3, r3
 8005f02:	441a      	add	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d105      	bne.n	8005f1a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f22:	697b      	ldr	r3, [r7, #20]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d018      	beq.n	8005f70 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d303      	bcc.n	8005f60 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68d9      	ldr	r1, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6838      	ldr	r0, [r7, #0]
 8005f6c:	f001 fcd4 	bl	8007918 <memcpy>
	}
}
 8005f70:	bf00      	nop
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005f80:	f001 f94a 	bl	8007218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f8a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f8c:	e011      	b.n	8005fb2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d012      	beq.n	8005fbc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3324      	adds	r3, #36	@ 0x24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fd3c 	bl	8006a18 <xTaskRemoveFromEventList>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005fa6:	f000 fe15 	bl	8006bd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005faa:	7bfb      	ldrb	r3, [r7, #15]
 8005fac:	3b01      	subs	r3, #1
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	dce9      	bgt.n	8005f8e <prvUnlockQueue+0x16>
 8005fba:	e000      	b.n	8005fbe <prvUnlockQueue+0x46>
					break;
 8005fbc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	22ff      	movs	r2, #255	@ 0xff
 8005fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005fc6:	f001 f959 	bl	800727c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005fca:	f001 f925 	bl	8007218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fd4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fd6:	e011      	b.n	8005ffc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d012      	beq.n	8006006 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3310      	adds	r3, #16
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fd17 	bl	8006a18 <xTaskRemoveFromEventList>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ff0:	f000 fdf0 	bl	8006bd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ff4:	7bbb      	ldrb	r3, [r7, #14]
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006000:	2b00      	cmp	r3, #0
 8006002:	dce9      	bgt.n	8005fd8 <prvUnlockQueue+0x60>
 8006004:	e000      	b.n	8006008 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006006:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	22ff      	movs	r2, #255	@ 0xff
 800600c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006010:	f001 f934 	bl	800727c <vPortExitCritical>
}
 8006014:	bf00      	nop
 8006016:	3710      	adds	r7, #16
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006024:	f001 f8f8 	bl	8007218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006030:	2301      	movs	r3, #1
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e001      	b.n	800603a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800603a:	f001 f91f 	bl	800727c <vPortExitCritical>

	return xReturn;
 800603e:	68fb      	ldr	r3, [r7, #12]
}
 8006040:	4618      	mov	r0, r3
 8006042:	3710      	adds	r7, #16
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006050:	f001 f8e2 	bl	8007218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605c:	429a      	cmp	r2, r3
 800605e:	d102      	bne.n	8006066 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006060:	2301      	movs	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e001      	b.n	800606a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800606a:	f001 f907 	bl	800727c <vPortExitCritical>

	return xReturn;
 800606e:	68fb      	ldr	r3, [r7, #12]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08e      	sub	sp, #56	@ 0x38
 800607c:	af04      	add	r7, sp, #16
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10b      	bne.n	80060a4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800608c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006090:	f383 8811 	msr	BASEPRI, r3
 8006094:	f3bf 8f6f 	isb	sy
 8006098:	f3bf 8f4f 	dsb	sy
 800609c:	623b      	str	r3, [r7, #32]
}
 800609e:	bf00      	nop
 80060a0:	bf00      	nop
 80060a2:	e7fd      	b.n	80060a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80060a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	61fb      	str	r3, [r7, #28]
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	e7fd      	b.n	80060be <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80060c2:	23a0      	movs	r3, #160	@ 0xa0
 80060c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2ba0      	cmp	r3, #160	@ 0xa0
 80060ca:	d00b      	beq.n	80060e4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	61bb      	str	r3, [r7, #24]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80060e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80060e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01e      	beq.n	800612a <xTaskCreateStatic+0xb2>
 80060ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01b      	beq.n	800612a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80060f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060fa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80060fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006104:	2300      	movs	r3, #0
 8006106:	9303      	str	r3, [sp, #12]
 8006108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610a:	9302      	str	r3, [sp, #8]
 800610c:	f107 0314 	add.w	r3, r7, #20
 8006110:	9301      	str	r3, [sp, #4]
 8006112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	68b9      	ldr	r1, [r7, #8]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f851 	bl	80061c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006122:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006124:	f000 f8ee 	bl	8006304 <prvAddNewTaskToReadyList>
 8006128:	e001      	b.n	800612e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800612a:	2300      	movs	r3, #0
 800612c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800612e:	697b      	ldr	r3, [r7, #20]
	}
 8006130:	4618      	mov	r0, r3
 8006132:	3728      	adds	r7, #40	@ 0x28
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006138:	b580      	push	{r7, lr}
 800613a:	b08c      	sub	sp, #48	@ 0x30
 800613c:	af04      	add	r7, sp, #16
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	603b      	str	r3, [r7, #0]
 8006144:	4613      	mov	r3, r2
 8006146:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006148:	88fb      	ldrh	r3, [r7, #6]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4618      	mov	r0, r3
 800614e:	f001 f943 	bl	80073d8 <pvPortMalloc>
 8006152:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00e      	beq.n	8006178 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800615a:	20a0      	movs	r0, #160	@ 0xa0
 800615c:	f001 f93c 	bl	80073d8 <pvPortMalloc>
 8006160:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	631a      	str	r2, [r3, #48]	@ 0x30
 800616e:	e005      	b.n	800617c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006170:	6978      	ldr	r0, [r7, #20]
 8006172:	f001 f9ff 	bl	8007574 <vPortFree>
 8006176:	e001      	b.n	800617c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006178:	2300      	movs	r3, #0
 800617a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d017      	beq.n	80061b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800618a:	88fa      	ldrh	r2, [r7, #6]
 800618c:	2300      	movs	r3, #0
 800618e:	9303      	str	r3, [sp, #12]
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	9302      	str	r3, [sp, #8]
 8006194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006196:	9301      	str	r3, [sp, #4]
 8006198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f80f 	bl	80061c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80061a6:	69f8      	ldr	r0, [r7, #28]
 80061a8:	f000 f8ac 	bl	8006304 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80061ac:	2301      	movs	r3, #1
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	e002      	b.n	80061b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80061b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80061b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80061b8:	69bb      	ldr	r3, [r7, #24]
	}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3720      	adds	r7, #32
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b088      	sub	sp, #32
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80061dc:	3b01      	subs	r3, #1
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00b      	beq.n	800620e <prvInitialiseNewTask+0x4a>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	617b      	str	r3, [r7, #20]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d01f      	beq.n	8006254 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e012      	b.n	8006240 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	7819      	ldrb	r1, [r3, #0]
 8006222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4413      	add	r3, r2
 8006228:	3334      	adds	r3, #52	@ 0x34
 800622a:	460a      	mov	r2, r1
 800622c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d006      	beq.n	8006248 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	3301      	adds	r3, #1
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	2b0f      	cmp	r3, #15
 8006244:	d9e9      	bls.n	800621a <prvInitialiseNewTask+0x56>
 8006246:	e000      	b.n	800624a <prvInitialiseNewTask+0x86>
			{
				break;
 8006248:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006252:	e003      	b.n	800625c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006256:	2200      	movs	r2, #0
 8006258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800625c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800625e:	2b06      	cmp	r3, #6
 8006260:	d901      	bls.n	8006266 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006262:	2306      	movs	r3, #6
 8006264:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800626a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	2200      	movs	r2, #0
 8006276:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	3304      	adds	r3, #4
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff faae 	bl	80057de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	3318      	adds	r3, #24
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff faa9 	bl	80057de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800628c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006290:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006294:	f1c3 0207 	rsb	r2, r3, #7
 8006298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	2200      	movs	r2, #0
 80062a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80062b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b4:	334c      	adds	r3, #76	@ 0x4c
 80062b6:	224c      	movs	r2, #76	@ 0x4c
 80062b8:	2100      	movs	r1, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 fa9a 	bl	80077f4 <memset>
 80062c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c2:	4a0d      	ldr	r2, [pc, #52]	@ (80062f8 <prvInitialiseNewTask+0x134>)
 80062c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80062c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062c8:	4a0c      	ldr	r2, [pc, #48]	@ (80062fc <prvInitialiseNewTask+0x138>)
 80062ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80062cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006300 <prvInitialiseNewTask+0x13c>)
 80062d0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	69b8      	ldr	r0, [r7, #24]
 80062d8:	f000 fe70 	bl	8006fbc <pxPortInitialiseStack>
 80062dc:	4602      	mov	r2, r0
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80062e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80062e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ee:	bf00      	nop
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	200042d4 	.word	0x200042d4
 80062fc:	2000433c 	.word	0x2000433c
 8006300:	200043a4 	.word	0x200043a4

08006304 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800630c:	f000 ff84 	bl	8007218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006310:	4b2a      	ldr	r3, [pc, #168]	@ (80063bc <prvAddNewTaskToReadyList+0xb8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3301      	adds	r3, #1
 8006316:	4a29      	ldr	r2, [pc, #164]	@ (80063bc <prvAddNewTaskToReadyList+0xb8>)
 8006318:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800631a:	4b29      	ldr	r3, [pc, #164]	@ (80063c0 <prvAddNewTaskToReadyList+0xbc>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d109      	bne.n	8006336 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006322:	4a27      	ldr	r2, [pc, #156]	@ (80063c0 <prvAddNewTaskToReadyList+0xbc>)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006328:	4b24      	ldr	r3, [pc, #144]	@ (80063bc <prvAddNewTaskToReadyList+0xb8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d110      	bne.n	8006352 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006330:	f000 fc74 	bl	8006c1c <prvInitialiseTaskLists>
 8006334:	e00d      	b.n	8006352 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006336:	4b23      	ldr	r3, [pc, #140]	@ (80063c4 <prvAddNewTaskToReadyList+0xc0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800633e:	4b20      	ldr	r3, [pc, #128]	@ (80063c0 <prvAddNewTaskToReadyList+0xbc>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006348:	429a      	cmp	r2, r3
 800634a:	d802      	bhi.n	8006352 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800634c:	4a1c      	ldr	r2, [pc, #112]	@ (80063c0 <prvAddNewTaskToReadyList+0xbc>)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006352:	4b1d      	ldr	r3, [pc, #116]	@ (80063c8 <prvAddNewTaskToReadyList+0xc4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	4a1b      	ldr	r2, [pc, #108]	@ (80063c8 <prvAddNewTaskToReadyList+0xc4>)
 800635a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006360:	2201      	movs	r2, #1
 8006362:	409a      	lsls	r2, r3
 8006364:	4b19      	ldr	r3, [pc, #100]	@ (80063cc <prvAddNewTaskToReadyList+0xc8>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4313      	orrs	r3, r2
 800636a:	4a18      	ldr	r2, [pc, #96]	@ (80063cc <prvAddNewTaskToReadyList+0xc8>)
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4a15      	ldr	r2, [pc, #84]	@ (80063d0 <prvAddNewTaskToReadyList+0xcc>)
 800637c:	441a      	add	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f7ff fa37 	bl	80057f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800638a:	f000 ff77 	bl	800727c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800638e:	4b0d      	ldr	r3, [pc, #52]	@ (80063c4 <prvAddNewTaskToReadyList+0xc0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d00e      	beq.n	80063b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006396:	4b0a      	ldr	r3, [pc, #40]	@ (80063c0 <prvAddNewTaskToReadyList+0xbc>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d207      	bcs.n	80063b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80063a4:	4b0b      	ldr	r3, [pc, #44]	@ (80063d4 <prvAddNewTaskToReadyList+0xd0>)
 80063a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}
 80063bc:	20000680 	.word	0x20000680
 80063c0:	20000580 	.word	0x20000580
 80063c4:	2000068c 	.word	0x2000068c
 80063c8:	2000069c 	.word	0x2000069c
 80063cc:	20000688 	.word	0x20000688
 80063d0:	20000584 	.word	0x20000584
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	@ 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d10b      	bne.n	8006404 <vTaskDelayUntil+0x2c>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	617b      	str	r3, [r7, #20]
}
 80063fe:	bf00      	nop
 8006400:	bf00      	nop
 8006402:	e7fd      	b.n	8006400 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10b      	bne.n	8006422 <vTaskDelayUntil+0x4a>
	__asm volatile
 800640a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640e:	f383 8811 	msr	BASEPRI, r3
 8006412:	f3bf 8f6f 	isb	sy
 8006416:	f3bf 8f4f 	dsb	sy
 800641a:	613b      	str	r3, [r7, #16]
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	e7fd      	b.n	800641e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006422:	4b2a      	ldr	r3, [pc, #168]	@ (80064cc <vTaskDelayUntil+0xf4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <vTaskDelayUntil+0x6a>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	60fb      	str	r3, [r7, #12]
}
 800643c:	bf00      	nop
 800643e:	bf00      	nop
 8006440:	e7fd      	b.n	800643e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006442:	f000 f8e9 	bl	8006618 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006446:	4b22      	ldr	r3, [pc, #136]	@ (80064d0 <vTaskDelayUntil+0xf8>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	4413      	add	r3, r2
 8006454:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a3a      	ldr	r2, [r7, #32]
 800645c:	429a      	cmp	r2, r3
 800645e:	d20b      	bcs.n	8006478 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	429a      	cmp	r2, r3
 8006468:	d211      	bcs.n	800648e <vTaskDelayUntil+0xb6>
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	429a      	cmp	r2, r3
 8006470:	d90d      	bls.n	800648e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006472:	2301      	movs	r3, #1
 8006474:	627b      	str	r3, [r7, #36]	@ 0x24
 8006476:	e00a      	b.n	800648e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	429a      	cmp	r2, r3
 8006480:	d303      	bcc.n	800648a <vTaskDelayUntil+0xb2>
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	429a      	cmp	r2, r3
 8006488:	d901      	bls.n	800648e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800648a:	2301      	movs	r3, #1
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	2b00      	cmp	r3, #0
 8006498:	d006      	beq.n	80064a8 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fd24 	bl	8006ef0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80064a8:	f000 f8c4 	bl	8006634 <xTaskResumeAll>
 80064ac:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d107      	bne.n	80064c4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80064b4:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <vTaskDelayUntil+0xfc>)
 80064b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80064c4:	bf00      	nop
 80064c6:	3728      	adds	r7, #40	@ 0x28
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	200006a8 	.word	0x200006a8
 80064d0:	20000684 	.word	0x20000684
 80064d4:	e000ed04 	.word	0xe000ed04

080064d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d018      	beq.n	800651c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80064ea:	4b14      	ldr	r3, [pc, #80]	@ (800653c <vTaskDelay+0x64>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00b      	beq.n	800650a <vTaskDelay+0x32>
	__asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60bb      	str	r3, [r7, #8]
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	e7fd      	b.n	8006506 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800650a:	f000 f885 	bl	8006618 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800650e:	2100      	movs	r1, #0
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fced 	bl	8006ef0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006516:	f000 f88d 	bl	8006634 <xTaskResumeAll>
 800651a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d107      	bne.n	8006532 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006522:	4b07      	ldr	r3, [pc, #28]	@ (8006540 <vTaskDelay+0x68>)
 8006524:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	200006a8 	.word	0x200006a8
 8006540:	e000ed04 	.word	0xe000ed04

08006544 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b08a      	sub	sp, #40	@ 0x28
 8006548:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800654e:	2300      	movs	r3, #0
 8006550:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006552:	463a      	mov	r2, r7
 8006554:	1d39      	adds	r1, r7, #4
 8006556:	f107 0308 	add.w	r3, r7, #8
 800655a:	4618      	mov	r0, r3
 800655c:	f7fa fcce 	bl	8000efc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006560:	6839      	ldr	r1, [r7, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	9202      	str	r2, [sp, #8]
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2300      	movs	r3, #0
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	2300      	movs	r3, #0
 8006570:	460a      	mov	r2, r1
 8006572:	4921      	ldr	r1, [pc, #132]	@ (80065f8 <vTaskStartScheduler+0xb4>)
 8006574:	4821      	ldr	r0, [pc, #132]	@ (80065fc <vTaskStartScheduler+0xb8>)
 8006576:	f7ff fd7f 	bl	8006078 <xTaskCreateStatic>
 800657a:	4603      	mov	r3, r0
 800657c:	4a20      	ldr	r2, [pc, #128]	@ (8006600 <vTaskStartScheduler+0xbc>)
 800657e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006580:	4b1f      	ldr	r3, [pc, #124]	@ (8006600 <vTaskStartScheduler+0xbc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006588:	2301      	movs	r3, #1
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	e001      	b.n	8006592 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d11b      	bne.n	80065d0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	613b      	str	r3, [r7, #16]
}
 80065aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ac:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <vTaskStartScheduler+0xc0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	334c      	adds	r3, #76	@ 0x4c
 80065b2:	4a15      	ldr	r2, [pc, #84]	@ (8006608 <vTaskStartScheduler+0xc4>)
 80065b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80065b6:	4b15      	ldr	r3, [pc, #84]	@ (800660c <vTaskStartScheduler+0xc8>)
 80065b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80065be:	4b14      	ldr	r3, [pc, #80]	@ (8006610 <vTaskStartScheduler+0xcc>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065c4:	4b13      	ldr	r3, [pc, #76]	@ (8006614 <vTaskStartScheduler+0xd0>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80065ca:	f000 fd81 	bl	80070d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80065ce:	e00f      	b.n	80065f0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d6:	d10b      	bne.n	80065f0 <vTaskStartScheduler+0xac>
	__asm volatile
 80065d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065dc:	f383 8811 	msr	BASEPRI, r3
 80065e0:	f3bf 8f6f 	isb	sy
 80065e4:	f3bf 8f4f 	dsb	sy
 80065e8:	60fb      	str	r3, [r7, #12]
}
 80065ea:	bf00      	nop
 80065ec:	bf00      	nop
 80065ee:	e7fd      	b.n	80065ec <vTaskStartScheduler+0xa8>
}
 80065f0:	bf00      	nop
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	080082bc 	.word	0x080082bc
 80065fc:	08006bed 	.word	0x08006bed
 8006600:	200006a4 	.word	0x200006a4
 8006604:	20000580 	.word	0x20000580
 8006608:	20000010 	.word	0x20000010
 800660c:	200006a0 	.word	0x200006a0
 8006610:	2000068c 	.word	0x2000068c
 8006614:	20000684 	.word	0x20000684

08006618 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800661c:	4b04      	ldr	r3, [pc, #16]	@ (8006630 <vTaskSuspendAll+0x18>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3301      	adds	r3, #1
 8006622:	4a03      	ldr	r2, [pc, #12]	@ (8006630 <vTaskSuspendAll+0x18>)
 8006624:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006626:	bf00      	nop
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	200006a8 	.word	0x200006a8

08006634 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800663e:	2300      	movs	r3, #0
 8006640:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006642:	4b42      	ldr	r3, [pc, #264]	@ (800674c <xTaskResumeAll+0x118>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <xTaskResumeAll+0x2e>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	603b      	str	r3, [r7, #0]
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006662:	f000 fdd9 	bl	8007218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006666:	4b39      	ldr	r3, [pc, #228]	@ (800674c <xTaskResumeAll+0x118>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3b01      	subs	r3, #1
 800666c:	4a37      	ldr	r2, [pc, #220]	@ (800674c <xTaskResumeAll+0x118>)
 800666e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006670:	4b36      	ldr	r3, [pc, #216]	@ (800674c <xTaskResumeAll+0x118>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d161      	bne.n	800673c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006678:	4b35      	ldr	r3, [pc, #212]	@ (8006750 <xTaskResumeAll+0x11c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d05d      	beq.n	800673c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006680:	e02e      	b.n	80066e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006682:	4b34      	ldr	r3, [pc, #208]	@ (8006754 <xTaskResumeAll+0x120>)
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3318      	adds	r3, #24
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff f90f 	bl	80058b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3304      	adds	r3, #4
 8006698:	4618      	mov	r0, r3
 800669a:	f7ff f90a 	bl	80058b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	2201      	movs	r2, #1
 80066a4:	409a      	lsls	r2, r3
 80066a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006758 <xTaskResumeAll+0x124>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	4a2a      	ldr	r2, [pc, #168]	@ (8006758 <xTaskResumeAll+0x124>)
 80066ae:	6013      	str	r3, [r2, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a27      	ldr	r2, [pc, #156]	@ (800675c <xTaskResumeAll+0x128>)
 80066be:	441a      	add	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	3304      	adds	r3, #4
 80066c4:	4619      	mov	r1, r3
 80066c6:	4610      	mov	r0, r2
 80066c8:	f7ff f896 	bl	80057f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066d0:	4b23      	ldr	r3, [pc, #140]	@ (8006760 <xTaskResumeAll+0x12c>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d302      	bcc.n	80066e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80066da:	4b22      	ldr	r3, [pc, #136]	@ (8006764 <xTaskResumeAll+0x130>)
 80066dc:	2201      	movs	r2, #1
 80066de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006754 <xTaskResumeAll+0x120>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1cc      	bne.n	8006682 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80066ee:	f000 fb39 	bl	8006d64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80066f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006768 <xTaskResumeAll+0x134>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d010      	beq.n	8006720 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80066fe:	f000 f847 	bl	8006790 <xTaskIncrementTick>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006708:	4b16      	ldr	r3, [pc, #88]	@ (8006764 <xTaskResumeAll+0x130>)
 800670a:	2201      	movs	r2, #1
 800670c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3b01      	subs	r3, #1
 8006712:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1f1      	bne.n	80066fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800671a:	4b13      	ldr	r3, [pc, #76]	@ (8006768 <xTaskResumeAll+0x134>)
 800671c:	2200      	movs	r2, #0
 800671e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006720:	4b10      	ldr	r3, [pc, #64]	@ (8006764 <xTaskResumeAll+0x130>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d009      	beq.n	800673c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800672c:	4b0f      	ldr	r3, [pc, #60]	@ (800676c <xTaskResumeAll+0x138>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	f3bf 8f4f 	dsb	sy
 8006738:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800673c:	f000 fd9e 	bl	800727c <vPortExitCritical>

	return xAlreadyYielded;
 8006740:	68bb      	ldr	r3, [r7, #8]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	200006a8 	.word	0x200006a8
 8006750:	20000680 	.word	0x20000680
 8006754:	20000640 	.word	0x20000640
 8006758:	20000688 	.word	0x20000688
 800675c:	20000584 	.word	0x20000584
 8006760:	20000580 	.word	0x20000580
 8006764:	20000694 	.word	0x20000694
 8006768:	20000690 	.word	0x20000690
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006776:	4b05      	ldr	r3, [pc, #20]	@ (800678c <xTaskGetTickCount+0x1c>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800677c:	687b      	ldr	r3, [r7, #4]
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	20000684 	.word	0x20000684

08006790 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679a:	4b4f      	ldr	r3, [pc, #316]	@ (80068d8 <xTaskIncrementTick+0x148>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 808f 	bne.w	80068c2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067a4:	4b4d      	ldr	r3, [pc, #308]	@ (80068dc <xTaskIncrementTick+0x14c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3301      	adds	r3, #1
 80067aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067ac:	4a4b      	ldr	r2, [pc, #300]	@ (80068dc <xTaskIncrementTick+0x14c>)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d121      	bne.n	80067fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80067b8:	4b49      	ldr	r3, [pc, #292]	@ (80068e0 <xTaskIncrementTick+0x150>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00b      	beq.n	80067da <xTaskIncrementTick+0x4a>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	603b      	str	r3, [r7, #0]
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	e7fd      	b.n	80067d6 <xTaskIncrementTick+0x46>
 80067da:	4b41      	ldr	r3, [pc, #260]	@ (80068e0 <xTaskIncrementTick+0x150>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	4b40      	ldr	r3, [pc, #256]	@ (80068e4 <xTaskIncrementTick+0x154>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a3e      	ldr	r2, [pc, #248]	@ (80068e0 <xTaskIncrementTick+0x150>)
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	4a3e      	ldr	r2, [pc, #248]	@ (80068e4 <xTaskIncrementTick+0x154>)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	4b3e      	ldr	r3, [pc, #248]	@ (80068e8 <xTaskIncrementTick+0x158>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	3301      	adds	r3, #1
 80067f4:	4a3c      	ldr	r2, [pc, #240]	@ (80068e8 <xTaskIncrementTick+0x158>)
 80067f6:	6013      	str	r3, [r2, #0]
 80067f8:	f000 fab4 	bl	8006d64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80067fc:	4b3b      	ldr	r3, [pc, #236]	@ (80068ec <xTaskIncrementTick+0x15c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	693a      	ldr	r2, [r7, #16]
 8006802:	429a      	cmp	r2, r3
 8006804:	d348      	bcc.n	8006898 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006806:	4b36      	ldr	r3, [pc, #216]	@ (80068e0 <xTaskIncrementTick+0x150>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006810:	4b36      	ldr	r3, [pc, #216]	@ (80068ec <xTaskIncrementTick+0x15c>)
 8006812:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006816:	601a      	str	r2, [r3, #0]
					break;
 8006818:	e03e      	b.n	8006898 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800681a:	4b31      	ldr	r3, [pc, #196]	@ (80068e0 <xTaskIncrementTick+0x150>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d203      	bcs.n	800683a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006832:	4a2e      	ldr	r2, [pc, #184]	@ (80068ec <xTaskIncrementTick+0x15c>)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006838:	e02e      	b.n	8006898 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	3304      	adds	r3, #4
 800683e:	4618      	mov	r0, r3
 8006840:	f7ff f837 	bl	80058b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	3318      	adds	r3, #24
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff f82e 	bl	80058b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685a:	2201      	movs	r2, #1
 800685c:	409a      	lsls	r2, r3
 800685e:	4b24      	ldr	r3, [pc, #144]	@ (80068f0 <xTaskIncrementTick+0x160>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4313      	orrs	r3, r2
 8006864:	4a22      	ldr	r2, [pc, #136]	@ (80068f0 <xTaskIncrementTick+0x160>)
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4a1f      	ldr	r2, [pc, #124]	@ (80068f4 <xTaskIncrementTick+0x164>)
 8006876:	441a      	add	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7fe ffba 	bl	80057f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006888:	4b1b      	ldr	r3, [pc, #108]	@ (80068f8 <xTaskIncrementTick+0x168>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800688e:	429a      	cmp	r2, r3
 8006890:	d3b9      	bcc.n	8006806 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006892:	2301      	movs	r3, #1
 8006894:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006896:	e7b6      	b.n	8006806 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006898:	4b17      	ldr	r3, [pc, #92]	@ (80068f8 <xTaskIncrementTick+0x168>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800689e:	4915      	ldr	r1, [pc, #84]	@ (80068f4 <xTaskIncrementTick+0x164>)
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d901      	bls.n	80068b4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80068b0:	2301      	movs	r3, #1
 80068b2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80068b4:	4b11      	ldr	r3, [pc, #68]	@ (80068fc <xTaskIncrementTick+0x16c>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80068bc:	2301      	movs	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	e004      	b.n	80068cc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80068c2:	4b0f      	ldr	r3, [pc, #60]	@ (8006900 <xTaskIncrementTick+0x170>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006900 <xTaskIncrementTick+0x170>)
 80068ca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80068cc:	697b      	ldr	r3, [r7, #20]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200006a8 	.word	0x200006a8
 80068dc:	20000684 	.word	0x20000684
 80068e0:	20000638 	.word	0x20000638
 80068e4:	2000063c 	.word	0x2000063c
 80068e8:	20000698 	.word	0x20000698
 80068ec:	200006a0 	.word	0x200006a0
 80068f0:	20000688 	.word	0x20000688
 80068f4:	20000584 	.word	0x20000584
 80068f8:	20000580 	.word	0x20000580
 80068fc:	20000694 	.word	0x20000694
 8006900:	20000690 	.word	0x20000690

08006904 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b087      	sub	sp, #28
 8006908:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800690a:	4b2a      	ldr	r3, [pc, #168]	@ (80069b4 <vTaskSwitchContext+0xb0>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006912:	4b29      	ldr	r3, [pc, #164]	@ (80069b8 <vTaskSwitchContext+0xb4>)
 8006914:	2201      	movs	r2, #1
 8006916:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006918:	e045      	b.n	80069a6 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800691a:	4b27      	ldr	r3, [pc, #156]	@ (80069b8 <vTaskSwitchContext+0xb4>)
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006920:	4b26      	ldr	r3, [pc, #152]	@ (80069bc <vTaskSwitchContext+0xb8>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	fab3 f383 	clz	r3, r3
 800692c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	f1c3 031f 	rsb	r3, r3, #31
 8006934:	617b      	str	r3, [r7, #20]
 8006936:	4922      	ldr	r1, [pc, #136]	@ (80069c0 <vTaskSwitchContext+0xbc>)
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4613      	mov	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	4413      	add	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	440b      	add	r3, r1
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10b      	bne.n	8006962 <vTaskSwitchContext+0x5e>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	607b      	str	r3, [r7, #4]
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	e7fd      	b.n	800695e <vTaskSwitchContext+0x5a>
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4613      	mov	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4a14      	ldr	r2, [pc, #80]	@ (80069c0 <vTaskSwitchContext+0xbc>)
 800696e:	4413      	add	r3, r2
 8006970:	613b      	str	r3, [r7, #16]
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	605a      	str	r2, [r3, #4]
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	3308      	adds	r3, #8
 8006984:	429a      	cmp	r2, r3
 8006986:	d104      	bne.n	8006992 <vTaskSwitchContext+0x8e>
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	4a0a      	ldr	r2, [pc, #40]	@ (80069c4 <vTaskSwitchContext+0xc0>)
 800699a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800699c:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <vTaskSwitchContext+0xc0>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	334c      	adds	r3, #76	@ 0x4c
 80069a2:	4a09      	ldr	r2, [pc, #36]	@ (80069c8 <vTaskSwitchContext+0xc4>)
 80069a4:	6013      	str	r3, [r2, #0]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	200006a8 	.word	0x200006a8
 80069b8:	20000694 	.word	0x20000694
 80069bc:	20000688 	.word	0x20000688
 80069c0:	20000584 	.word	0x20000584
 80069c4:	20000580 	.word	0x20000580
 80069c8:	20000010 	.word	0x20000010

080069cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d10b      	bne.n	80069f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60fb      	str	r3, [r7, #12]
}
 80069ee:	bf00      	nop
 80069f0:	bf00      	nop
 80069f2:	e7fd      	b.n	80069f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069f4:	4b07      	ldr	r3, [pc, #28]	@ (8006a14 <vTaskPlaceOnEventList+0x48>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3318      	adds	r3, #24
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fe ff1f 	bl	8005840 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a02:	2101      	movs	r1, #1
 8006a04:	6838      	ldr	r0, [r7, #0]
 8006a06:	f000 fa73 	bl	8006ef0 <prvAddCurrentTaskToDelayedList>
}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000580 	.word	0x20000580

08006a18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10b      	bne.n	8006a46 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	60fb      	str	r3, [r7, #12]
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	e7fd      	b.n	8006a42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	3318      	adds	r3, #24
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f7fe ff31 	bl	80058b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a50:	4b1d      	ldr	r3, [pc, #116]	@ (8006ac8 <xTaskRemoveFromEventList+0xb0>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11c      	bne.n	8006a92 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fe ff28 	bl	80058b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a66:	2201      	movs	r2, #1
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	4b18      	ldr	r3, [pc, #96]	@ (8006acc <xTaskRemoveFromEventList+0xb4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	4a16      	ldr	r2, [pc, #88]	@ (8006acc <xTaskRemoveFromEventList+0xb4>)
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4a13      	ldr	r2, [pc, #76]	@ (8006ad0 <xTaskRemoveFromEventList+0xb8>)
 8006a82:	441a      	add	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	3304      	adds	r3, #4
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	f7fe feb4 	bl	80057f8 <vListInsertEnd>
 8006a90:	e005      	b.n	8006a9e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	3318      	adds	r3, #24
 8006a96:	4619      	mov	r1, r3
 8006a98:	480e      	ldr	r0, [pc, #56]	@ (8006ad4 <xTaskRemoveFromEventList+0xbc>)
 8006a9a:	f7fe fead 	bl	80057f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad8 <xTaskRemoveFromEventList+0xc0>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d905      	bls.n	8006ab8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006aac:	2301      	movs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <xTaskRemoveFromEventList+0xc4>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	e001      	b.n	8006abc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006abc:	697b      	ldr	r3, [r7, #20]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200006a8 	.word	0x200006a8
 8006acc:	20000688 	.word	0x20000688
 8006ad0:	20000584 	.word	0x20000584
 8006ad4:	20000640 	.word	0x20000640
 8006ad8:	20000580 	.word	0x20000580
 8006adc:	20000694 	.word	0x20000694

08006ae0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006ae8:	4b06      	ldr	r3, [pc, #24]	@ (8006b04 <vTaskInternalSetTimeOutState+0x24>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006af0:	4b05      	ldr	r3, [pc, #20]	@ (8006b08 <vTaskInternalSetTimeOutState+0x28>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	605a      	str	r2, [r3, #4]
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	20000698 	.word	0x20000698
 8006b08:	20000684 	.word	0x20000684

08006b0c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b20:	f383 8811 	msr	BASEPRI, r3
 8006b24:	f3bf 8f6f 	isb	sy
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	613b      	str	r3, [r7, #16]
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	e7fd      	b.n	8006b30 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d10b      	bne.n	8006b52 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60fb      	str	r3, [r7, #12]
}
 8006b4c:	bf00      	nop
 8006b4e:	bf00      	nop
 8006b50:	e7fd      	b.n	8006b4e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006b52:	f000 fb61 	bl	8007218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006b56:	4b1d      	ldr	r3, [pc, #116]	@ (8006bcc <xTaskCheckForTimeOut+0xc0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b6e:	d102      	bne.n	8006b76 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
 8006b74:	e023      	b.n	8006bbe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b15      	ldr	r3, [pc, #84]	@ (8006bd0 <xTaskCheckForTimeOut+0xc4>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d007      	beq.n	8006b92 <xTaskCheckForTimeOut+0x86>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d302      	bcc.n	8006b92 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	61fb      	str	r3, [r7, #28]
 8006b90:	e015      	b.n	8006bbe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	697a      	ldr	r2, [r7, #20]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d20b      	bcs.n	8006bb4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7ff ff99 	bl	8006ae0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e004      	b.n	8006bbe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006bbe:	f000 fb5d 	bl	800727c <vPortExitCritical>

	return xReturn;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	20000684 	.word	0x20000684
 8006bd0:	20000698 	.word	0x20000698

08006bd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	@ (8006be8 <vTaskMissedYield+0x14>)
 8006bda:	2201      	movs	r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000694 	.word	0x20000694

08006bec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006bf4:	f000 f852 	bl	8006c9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006bf8:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <prvIdleTask+0x28>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d9f9      	bls.n	8006bf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c00:	4b05      	ldr	r3, [pc, #20]	@ (8006c18 <prvIdleTask+0x2c>)
 8006c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c06:	601a      	str	r2, [r3, #0]
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006c10:	e7f0      	b.n	8006bf4 <prvIdleTask+0x8>
 8006c12:	bf00      	nop
 8006c14:	20000584 	.word	0x20000584
 8006c18:	e000ed04 	.word	0xe000ed04

08006c1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c22:	2300      	movs	r3, #0
 8006c24:	607b      	str	r3, [r7, #4]
 8006c26:	e00c      	b.n	8006c42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4a12      	ldr	r2, [pc, #72]	@ (8006c7c <prvInitialiseTaskLists+0x60>)
 8006c34:	4413      	add	r3, r2
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fdb1 	bl	800579e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	607b      	str	r3, [r7, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b06      	cmp	r3, #6
 8006c46:	d9ef      	bls.n	8006c28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006c48:	480d      	ldr	r0, [pc, #52]	@ (8006c80 <prvInitialiseTaskLists+0x64>)
 8006c4a:	f7fe fda8 	bl	800579e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006c4e:	480d      	ldr	r0, [pc, #52]	@ (8006c84 <prvInitialiseTaskLists+0x68>)
 8006c50:	f7fe fda5 	bl	800579e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006c54:	480c      	ldr	r0, [pc, #48]	@ (8006c88 <prvInitialiseTaskLists+0x6c>)
 8006c56:	f7fe fda2 	bl	800579e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006c5a:	480c      	ldr	r0, [pc, #48]	@ (8006c8c <prvInitialiseTaskLists+0x70>)
 8006c5c:	f7fe fd9f 	bl	800579e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c60:	480b      	ldr	r0, [pc, #44]	@ (8006c90 <prvInitialiseTaskLists+0x74>)
 8006c62:	f7fe fd9c 	bl	800579e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c66:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <prvInitialiseTaskLists+0x78>)
 8006c68:	4a05      	ldr	r2, [pc, #20]	@ (8006c80 <prvInitialiseTaskLists+0x64>)
 8006c6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c98 <prvInitialiseTaskLists+0x7c>)
 8006c6e:	4a05      	ldr	r2, [pc, #20]	@ (8006c84 <prvInitialiseTaskLists+0x68>)
 8006c70:	601a      	str	r2, [r3, #0]
}
 8006c72:	bf00      	nop
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000584 	.word	0x20000584
 8006c80:	20000610 	.word	0x20000610
 8006c84:	20000624 	.word	0x20000624
 8006c88:	20000640 	.word	0x20000640
 8006c8c:	20000654 	.word	0x20000654
 8006c90:	2000066c 	.word	0x2000066c
 8006c94:	20000638 	.word	0x20000638
 8006c98:	2000063c 	.word	0x2000063c

08006c9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ca2:	e019      	b.n	8006cd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006ca4:	f000 fab8 	bl	8007218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca8:	4b10      	ldr	r3, [pc, #64]	@ (8006cec <prvCheckTasksWaitingTermination+0x50>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3304      	adds	r3, #4
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fe fdfc 	bl	80058b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006cba:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf0 <prvCheckTasksWaitingTermination+0x54>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	4a0b      	ldr	r2, [pc, #44]	@ (8006cf0 <prvCheckTasksWaitingTermination+0x54>)
 8006cc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x58>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	4a0a      	ldr	r2, [pc, #40]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x58>)
 8006ccc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006cce:	f000 fad5 	bl	800727c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f810 	bl	8006cf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006cd8:	4b06      	ldr	r3, [pc, #24]	@ (8006cf4 <prvCheckTasksWaitingTermination+0x58>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e1      	bne.n	8006ca4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000654 	.word	0x20000654
 8006cf0:	20000680 	.word	0x20000680
 8006cf4:	20000668 	.word	0x20000668

08006cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	334c      	adds	r3, #76	@ 0x4c
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fd7d 	bl	8007804 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d108      	bne.n	8006d26 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f000 fc2b 	bl	8007574 <vPortFree>
				vPortFree( pxTCB );
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fc28 	bl	8007574 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006d24:	e019      	b.n	8006d5a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d103      	bne.n	8006d38 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fc1f 	bl	8007574 <vPortFree>
	}
 8006d36:	e010      	b.n	8006d5a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d00b      	beq.n	8006d5a <prvDeleteTCB+0x62>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	60fb      	str	r3, [r7, #12]
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	e7fd      	b.n	8006d56 <prvDeleteTCB+0x5e>
	}
 8006d5a:	bf00      	nop
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d9c <prvResetNextTaskUnblockTime+0x38>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d104      	bne.n	8006d7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d74:	4b0a      	ldr	r3, [pc, #40]	@ (8006da0 <prvResetNextTaskUnblockTime+0x3c>)
 8006d76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d7c:	e008      	b.n	8006d90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7e:	4b07      	ldr	r3, [pc, #28]	@ (8006d9c <prvResetNextTaskUnblockTime+0x38>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a04      	ldr	r2, [pc, #16]	@ (8006da0 <prvResetNextTaskUnblockTime+0x3c>)
 8006d8e:	6013      	str	r3, [r2, #0]
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	20000638 	.word	0x20000638
 8006da0:	200006a0 	.word	0x200006a0

08006da4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006daa:	4b0b      	ldr	r3, [pc, #44]	@ (8006dd8 <xTaskGetSchedulerState+0x34>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006db2:	2301      	movs	r3, #1
 8006db4:	607b      	str	r3, [r7, #4]
 8006db6:	e008      	b.n	8006dca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db8:	4b08      	ldr	r3, [pc, #32]	@ (8006ddc <xTaskGetSchedulerState+0x38>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	607b      	str	r3, [r7, #4]
 8006dc4:	e001      	b.n	8006dca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006dca:	687b      	ldr	r3, [r7, #4]
	}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	2000068c 	.word	0x2000068c
 8006ddc:	200006a8 	.word	0x200006a8

08006de0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d070      	beq.n	8006ed8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006df6:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee4 <xTaskPriorityDisinherit+0x104>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d00b      	beq.n	8006e18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e04:	f383 8811 	msr	BASEPRI, r3
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	f3bf 8f4f 	dsb	sy
 8006e10:	60fb      	str	r3, [r7, #12]
}
 8006e12:	bf00      	nop
 8006e14:	bf00      	nop
 8006e16:	e7fd      	b.n	8006e14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d10b      	bne.n	8006e38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	60bb      	str	r3, [r7, #8]
}
 8006e32:	bf00      	nop
 8006e34:	bf00      	nop
 8006e36:	e7fd      	b.n	8006e34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d044      	beq.n	8006ed8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d140      	bne.n	8006ed8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe fd29 	bl	80058b2 <uxListRemove>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d115      	bne.n	8006e92 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6a:	491f      	ldr	r1, [pc, #124]	@ (8006ee8 <xTaskPriorityDisinherit+0x108>)
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	440b      	add	r3, r1
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xTaskPriorityDisinherit+0xb2>
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	2201      	movs	r2, #1
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	43da      	mvns	r2, r3
 8006e88:	4b18      	ldr	r3, [pc, #96]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	4a17      	ldr	r2, [pc, #92]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006e90:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9e:	f1c3 0207 	rsb	r2, r3, #7
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	2201      	movs	r2, #1
 8006eac:	409a      	lsls	r2, r3
 8006eae:	4b0f      	ldr	r3, [pc, #60]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8006eec <xTaskPriorityDisinherit+0x10c>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4a08      	ldr	r2, [pc, #32]	@ (8006ee8 <xTaskPriorityDisinherit+0x108>)
 8006ec6:	441a      	add	r2, r3
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe fc92 	bl	80057f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ed8:	697b      	ldr	r3, [r7, #20]
	}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	20000580 	.word	0x20000580
 8006ee8:	20000584 	.word	0x20000584
 8006eec:	20000688 	.word	0x20000688

08006ef0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006efa:	4b29      	ldr	r3, [pc, #164]	@ (8006fa0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f00:	4b28      	ldr	r3, [pc, #160]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3304      	adds	r3, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fcd3 	bl	80058b2 <uxListRemove>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10b      	bne.n	8006f2a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006f12:	4b24      	ldr	r3, [pc, #144]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f18:	2201      	movs	r2, #1
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	4b21      	ldr	r3, [pc, #132]	@ (8006fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4013      	ands	r3, r2
 8006f26:	4a20      	ldr	r2, [pc, #128]	@ (8006fa8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006f28:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f30:	d10a      	bne.n	8006f48 <prvAddCurrentTaskToDelayedList+0x58>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f38:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4619      	mov	r1, r3
 8006f40:	481a      	ldr	r0, [pc, #104]	@ (8006fac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006f42:	f7fe fc59 	bl	80057f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f46:	e026      	b.n	8006f96 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f50:	4b14      	ldr	r3, [pc, #80]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d209      	bcs.n	8006f74 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f60:	4b13      	ldr	r3, [pc, #76]	@ (8006fb0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7fe fc67 	bl	8005840 <vListInsert>
}
 8006f72:	e010      	b.n	8006f96 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f74:	4b0f      	ldr	r3, [pc, #60]	@ (8006fb4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3304      	adds	r3, #4
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4610      	mov	r0, r2
 8006f82:	f7fe fc5d 	bl	8005840 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d202      	bcs.n	8006f96 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006f90:	4a09      	ldr	r2, [pc, #36]	@ (8006fb8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6013      	str	r3, [r2, #0]
}
 8006f96:	bf00      	nop
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20000684 	.word	0x20000684
 8006fa4:	20000580 	.word	0x20000580
 8006fa8:	20000688 	.word	0x20000688
 8006fac:	2000066c 	.word	0x2000066c
 8006fb0:	2000063c 	.word	0x2000063c
 8006fb4:	20000638 	.word	0x20000638
 8006fb8:	200006a0 	.word	0x200006a0

08006fbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3b04      	subs	r3, #4
 8006fcc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	3b04      	subs	r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f023 0201 	bic.w	r2, r3, #1
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3b04      	subs	r3, #4
 8006fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006fec:	4a0c      	ldr	r2, [pc, #48]	@ (8007020 <pxPortInitialiseStack+0x64>)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3b14      	subs	r3, #20
 8006ff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3b04      	subs	r3, #4
 8007002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f06f 0202 	mvn.w	r2, #2
 800700a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3b20      	subs	r3, #32
 8007010:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007012:	68fb      	ldr	r3, [r7, #12]
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	08007025 	.word	0x08007025

08007024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800702e:	4b13      	ldr	r3, [pc, #76]	@ (800707c <prvTaskExitError+0x58>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007036:	d00b      	beq.n	8007050 <prvTaskExitError+0x2c>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	60fb      	str	r3, [r7, #12]
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	e7fd      	b.n	800704c <prvTaskExitError+0x28>
	__asm volatile
 8007050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007054:	f383 8811 	msr	BASEPRI, r3
 8007058:	f3bf 8f6f 	isb	sy
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	60bb      	str	r3, [r7, #8]
}
 8007062:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007064:	bf00      	nop
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0fc      	beq.n	8007066 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	3714      	adds	r7, #20
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	2000000c 	.word	0x2000000c

08007080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007080:	4b07      	ldr	r3, [pc, #28]	@ (80070a0 <pxCurrentTCBConst2>)
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708a:	f380 8809 	msr	PSP, r0
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f04f 0000 	mov.w	r0, #0
 8007096:	f380 8811 	msr	BASEPRI, r0
 800709a:	4770      	bx	lr
 800709c:	f3af 8000 	nop.w

080070a0 <pxCurrentTCBConst2>:
 80070a0:	20000580 	.word	0x20000580
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070a8:	4808      	ldr	r0, [pc, #32]	@ (80070cc <prvPortStartFirstTask+0x24>)
 80070aa:	6800      	ldr	r0, [r0, #0]
 80070ac:	6800      	ldr	r0, [r0, #0]
 80070ae:	f380 8808 	msr	MSP, r0
 80070b2:	f04f 0000 	mov.w	r0, #0
 80070b6:	f380 8814 	msr	CONTROL, r0
 80070ba:	b662      	cpsie	i
 80070bc:	b661      	cpsie	f
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	df00      	svc	0
 80070c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80070ca:	bf00      	nop
 80070cc:	e000ed08 	.word	0xe000ed08

080070d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b086      	sub	sp, #24
 80070d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070d6:	4b47      	ldr	r3, [pc, #284]	@ (80071f4 <xPortStartScheduler+0x124>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a47      	ldr	r2, [pc, #284]	@ (80071f8 <xPortStartScheduler+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d10b      	bne.n	80070f8 <xPortStartScheduler+0x28>
	__asm volatile
 80070e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e4:	f383 8811 	msr	BASEPRI, r3
 80070e8:	f3bf 8f6f 	isb	sy
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	613b      	str	r3, [r7, #16]
}
 80070f2:	bf00      	nop
 80070f4:	bf00      	nop
 80070f6:	e7fd      	b.n	80070f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070f8:	4b3e      	ldr	r3, [pc, #248]	@ (80071f4 <xPortStartScheduler+0x124>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a3f      	ldr	r2, [pc, #252]	@ (80071fc <xPortStartScheduler+0x12c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d10b      	bne.n	800711a <xPortStartScheduler+0x4a>
	__asm volatile
 8007102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007106:	f383 8811 	msr	BASEPRI, r3
 800710a:	f3bf 8f6f 	isb	sy
 800710e:	f3bf 8f4f 	dsb	sy
 8007112:	60fb      	str	r3, [r7, #12]
}
 8007114:	bf00      	nop
 8007116:	bf00      	nop
 8007118:	e7fd      	b.n	8007116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800711a:	4b39      	ldr	r3, [pc, #228]	@ (8007200 <xPortStartScheduler+0x130>)
 800711c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	22ff      	movs	r2, #255	@ 0xff
 800712a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007134:	78fb      	ldrb	r3, [r7, #3]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800713c:	b2da      	uxtb	r2, r3
 800713e:	4b31      	ldr	r3, [pc, #196]	@ (8007204 <xPortStartScheduler+0x134>)
 8007140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007142:	4b31      	ldr	r3, [pc, #196]	@ (8007208 <xPortStartScheduler+0x138>)
 8007144:	2207      	movs	r2, #7
 8007146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007148:	e009      	b.n	800715e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800714a:	4b2f      	ldr	r3, [pc, #188]	@ (8007208 <xPortStartScheduler+0x138>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3b01      	subs	r3, #1
 8007150:	4a2d      	ldr	r2, [pc, #180]	@ (8007208 <xPortStartScheduler+0x138>)
 8007152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	b2db      	uxtb	r3, r3
 800715c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007166:	2b80      	cmp	r3, #128	@ 0x80
 8007168:	d0ef      	beq.n	800714a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800716a:	4b27      	ldr	r3, [pc, #156]	@ (8007208 <xPortStartScheduler+0x138>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f1c3 0307 	rsb	r3, r3, #7
 8007172:	2b04      	cmp	r3, #4
 8007174:	d00b      	beq.n	800718e <xPortStartScheduler+0xbe>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60bb      	str	r3, [r7, #8]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800718e:	4b1e      	ldr	r3, [pc, #120]	@ (8007208 <xPortStartScheduler+0x138>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	4a1c      	ldr	r2, [pc, #112]	@ (8007208 <xPortStartScheduler+0x138>)
 8007196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007198:	4b1b      	ldr	r3, [pc, #108]	@ (8007208 <xPortStartScheduler+0x138>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071a0:	4a19      	ldr	r2, [pc, #100]	@ (8007208 <xPortStartScheduler+0x138>)
 80071a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ac:	4b17      	ldr	r3, [pc, #92]	@ (800720c <xPortStartScheduler+0x13c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a16      	ldr	r2, [pc, #88]	@ (800720c <xPortStartScheduler+0x13c>)
 80071b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071b8:	4b14      	ldr	r3, [pc, #80]	@ (800720c <xPortStartScheduler+0x13c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a13      	ldr	r2, [pc, #76]	@ (800720c <xPortStartScheduler+0x13c>)
 80071be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80071c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071c4:	f000 f8da 	bl	800737c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071c8:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <xPortStartScheduler+0x140>)
 80071ca:	2200      	movs	r2, #0
 80071cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80071ce:	f000 f8f9 	bl	80073c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80071d2:	4b10      	ldr	r3, [pc, #64]	@ (8007214 <xPortStartScheduler+0x144>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007214 <xPortStartScheduler+0x144>)
 80071d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80071dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071de:	f7ff ff63 	bl	80070a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071e2:	f7ff fb8f 	bl	8006904 <vTaskSwitchContext>
	prvTaskExitError();
 80071e6:	f7ff ff1d 	bl	8007024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3718      	adds	r7, #24
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	e000ed00 	.word	0xe000ed00
 80071f8:	410fc271 	.word	0x410fc271
 80071fc:	410fc270 	.word	0x410fc270
 8007200:	e000e400 	.word	0xe000e400
 8007204:	200006ac 	.word	0x200006ac
 8007208:	200006b0 	.word	0x200006b0
 800720c:	e000ed20 	.word	0xe000ed20
 8007210:	2000000c 	.word	0x2000000c
 8007214:	e000ef34 	.word	0xe000ef34

08007218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
	__asm volatile
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	607b      	str	r3, [r7, #4]
}
 8007230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007232:	4b10      	ldr	r3, [pc, #64]	@ (8007274 <vPortEnterCritical+0x5c>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	4a0e      	ldr	r2, [pc, #56]	@ (8007274 <vPortEnterCritical+0x5c>)
 800723a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800723c:	4b0d      	ldr	r3, [pc, #52]	@ (8007274 <vPortEnterCritical+0x5c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b01      	cmp	r3, #1
 8007242:	d110      	bne.n	8007266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007244:	4b0c      	ldr	r3, [pc, #48]	@ (8007278 <vPortEnterCritical+0x60>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <vPortEnterCritical+0x4e>
	__asm volatile
 800724e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007252:	f383 8811 	msr	BASEPRI, r3
 8007256:	f3bf 8f6f 	isb	sy
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	603b      	str	r3, [r7, #0]
}
 8007260:	bf00      	nop
 8007262:	bf00      	nop
 8007264:	e7fd      	b.n	8007262 <vPortEnterCritical+0x4a>
	}
}
 8007266:	bf00      	nop
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	2000000c 	.word	0x2000000c
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007282:	4b12      	ldr	r3, [pc, #72]	@ (80072cc <vPortExitCritical+0x50>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10b      	bne.n	80072a2 <vPortExitCritical+0x26>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	607b      	str	r3, [r7, #4]
}
 800729c:	bf00      	nop
 800729e:	bf00      	nop
 80072a0:	e7fd      	b.n	800729e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072a2:	4b0a      	ldr	r3, [pc, #40]	@ (80072cc <vPortExitCritical+0x50>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	4a08      	ldr	r2, [pc, #32]	@ (80072cc <vPortExitCritical+0x50>)
 80072aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072ac:	4b07      	ldr	r3, [pc, #28]	@ (80072cc <vPortExitCritical+0x50>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d105      	bne.n	80072c0 <vPortExitCritical+0x44>
 80072b4:	2300      	movs	r3, #0
 80072b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80072be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	2000000c 	.word	0x2000000c

080072d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072d0:	f3ef 8009 	mrs	r0, PSP
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <pxCurrentTCBConst>)
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	f01e 0f10 	tst.w	lr, #16
 80072e0:	bf08      	it	eq
 80072e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80072e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ea:	6010      	str	r0, [r2, #0]
 80072ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80072f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80072f4:	f380 8811 	msr	BASEPRI, r0
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f7ff fb00 	bl	8006904 <vTaskSwitchContext>
 8007304:	f04f 0000 	mov.w	r0, #0
 8007308:	f380 8811 	msr	BASEPRI, r0
 800730c:	bc09      	pop	{r0, r3}
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	6808      	ldr	r0, [r1, #0]
 8007312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007316:	f01e 0f10 	tst.w	lr, #16
 800731a:	bf08      	it	eq
 800731c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007320:	f380 8809 	msr	PSP, r0
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w

08007330 <pxCurrentTCBConst>:
 8007330:	20000580 	.word	0x20000580
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007334:	bf00      	nop
 8007336:	bf00      	nop

08007338 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	607b      	str	r3, [r7, #4]
}
 8007350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007352:	f7ff fa1d 	bl	8006790 <xTaskIncrementTick>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800735c:	4b06      	ldr	r3, [pc, #24]	@ (8007378 <SysTick_Handler+0x40>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	2300      	movs	r3, #0
 8007366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f383 8811 	msr	BASEPRI, r3
}
 800736e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	e000ed04 	.word	0xe000ed04

0800737c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <vPortSetupTimerInterrupt+0x34>)
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007386:	4b0b      	ldr	r3, [pc, #44]	@ (80073b4 <vPortSetupTimerInterrupt+0x38>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800738c:	4b0a      	ldr	r3, [pc, #40]	@ (80073b8 <vPortSetupTimerInterrupt+0x3c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a0a      	ldr	r2, [pc, #40]	@ (80073bc <vPortSetupTimerInterrupt+0x40>)
 8007392:	fba2 2303 	umull	r2, r3, r2, r3
 8007396:	099b      	lsrs	r3, r3, #6
 8007398:	4a09      	ldr	r2, [pc, #36]	@ (80073c0 <vPortSetupTimerInterrupt+0x44>)
 800739a:	3b01      	subs	r3, #1
 800739c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800739e:	4b04      	ldr	r3, [pc, #16]	@ (80073b0 <vPortSetupTimerInterrupt+0x34>)
 80073a0:	2207      	movs	r2, #7
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	e000e010 	.word	0xe000e010
 80073b4:	e000e018 	.word	0xe000e018
 80073b8:	20000000 	.word	0x20000000
 80073bc:	10624dd3 	.word	0x10624dd3
 80073c0:	e000e014 	.word	0xe000e014

080073c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80073c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80073d4 <vPortEnableVFP+0x10>
 80073c8:	6801      	ldr	r1, [r0, #0]
 80073ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80073ce:	6001      	str	r1, [r0, #0]
 80073d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80073d2:	bf00      	nop
 80073d4:	e000ed88 	.word	0xe000ed88

080073d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08a      	sub	sp, #40	@ 0x28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80073e0:	2300      	movs	r3, #0
 80073e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80073e4:	f7ff f918 	bl	8006618 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073e8:	4b5c      	ldr	r3, [pc, #368]	@ (800755c <pvPortMalloc+0x184>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073f0:	f000 f924 	bl	800763c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073f4:	4b5a      	ldr	r3, [pc, #360]	@ (8007560 <pvPortMalloc+0x188>)
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 8095 	bne.w	800752c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01e      	beq.n	8007446 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007408:	2208      	movs	r2, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f003 0307 	and.w	r3, r3, #7
 8007416:	2b00      	cmp	r3, #0
 8007418:	d015      	beq.n	8007446 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f023 0307 	bic.w	r3, r3, #7
 8007420:	3308      	adds	r3, #8
 8007422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00b      	beq.n	8007446 <pvPortMalloc+0x6e>
	__asm volatile
 800742e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007432:	f383 8811 	msr	BASEPRI, r3
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	f3bf 8f4f 	dsb	sy
 800743e:	617b      	str	r3, [r7, #20]
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	e7fd      	b.n	8007442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d06f      	beq.n	800752c <pvPortMalloc+0x154>
 800744c:	4b45      	ldr	r3, [pc, #276]	@ (8007564 <pvPortMalloc+0x18c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	429a      	cmp	r2, r3
 8007454:	d86a      	bhi.n	800752c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007456:	4b44      	ldr	r3, [pc, #272]	@ (8007568 <pvPortMalloc+0x190>)
 8007458:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800745a:	4b43      	ldr	r3, [pc, #268]	@ (8007568 <pvPortMalloc+0x190>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007460:	e004      	b.n	800746c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d903      	bls.n	800747e <pvPortMalloc+0xa6>
 8007476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1f1      	bne.n	8007462 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800747e:	4b37      	ldr	r3, [pc, #220]	@ (800755c <pvPortMalloc+0x184>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007484:	429a      	cmp	r2, r3
 8007486:	d051      	beq.n	800752c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2208      	movs	r2, #8
 800748e:	4413      	add	r3, r2
 8007490:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800749a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	1ad2      	subs	r2, r2, r3
 80074a2:	2308      	movs	r3, #8
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d920      	bls.n	80074ec <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4413      	add	r3, r2
 80074b0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <pvPortMalloc+0xfc>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	613b      	str	r3, [r7, #16]
}
 80074ce:	bf00      	nop
 80074d0:	bf00      	nop
 80074d2:	e7fd      	b.n	80074d0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	1ad2      	subs	r2, r2, r3
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80074e6:	69b8      	ldr	r0, [r7, #24]
 80074e8:	f000 f90a 	bl	8007700 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80074ec:	4b1d      	ldr	r3, [pc, #116]	@ (8007564 <pvPortMalloc+0x18c>)
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007564 <pvPortMalloc+0x18c>)
 80074f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007564 <pvPortMalloc+0x18c>)
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	4b1b      	ldr	r3, [pc, #108]	@ (800756c <pvPortMalloc+0x194>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d203      	bcs.n	800750e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007506:	4b17      	ldr	r3, [pc, #92]	@ (8007564 <pvPortMalloc+0x18c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a18      	ldr	r2, [pc, #96]	@ (800756c <pvPortMalloc+0x194>)
 800750c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800750e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	4b13      	ldr	r3, [pc, #76]	@ (8007560 <pvPortMalloc+0x188>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	431a      	orrs	r2, r3
 8007518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007522:	4b13      	ldr	r3, [pc, #76]	@ (8007570 <pvPortMalloc+0x198>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3301      	adds	r3, #1
 8007528:	4a11      	ldr	r2, [pc, #68]	@ (8007570 <pvPortMalloc+0x198>)
 800752a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800752c:	f7ff f882 	bl	8006634 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00b      	beq.n	8007552 <pvPortMalloc+0x17a>
	__asm volatile
 800753a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800753e:	f383 8811 	msr	BASEPRI, r3
 8007542:	f3bf 8f6f 	isb	sy
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	60fb      	str	r3, [r7, #12]
}
 800754c:	bf00      	nop
 800754e:	bf00      	nop
 8007550:	e7fd      	b.n	800754e <pvPortMalloc+0x176>
	return pvReturn;
 8007552:	69fb      	ldr	r3, [r7, #28]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3728      	adds	r7, #40	@ 0x28
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	200042bc 	.word	0x200042bc
 8007560:	200042d0 	.word	0x200042d0
 8007564:	200042c0 	.word	0x200042c0
 8007568:	200042b4 	.word	0x200042b4
 800756c:	200042c4 	.word	0x200042c4
 8007570:	200042c8 	.word	0x200042c8

08007574 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b086      	sub	sp, #24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d04f      	beq.n	8007626 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007586:	2308      	movs	r3, #8
 8007588:	425b      	negs	r3, r3
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4413      	add	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	4b25      	ldr	r3, [pc, #148]	@ (8007630 <vPortFree+0xbc>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4013      	ands	r3, r2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <vPortFree+0x46>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	60fb      	str	r3, [r7, #12]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00b      	beq.n	80075da <vPortFree+0x66>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60bb      	str	r3, [r7, #8]
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	e7fd      	b.n	80075d6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	4b14      	ldr	r3, [pc, #80]	@ (8007630 <vPortFree+0xbc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d01e      	beq.n	8007626 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11a      	bne.n	8007626 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	685a      	ldr	r2, [r3, #4]
 80075f4:	4b0e      	ldr	r3, [pc, #56]	@ (8007630 <vPortFree+0xbc>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	43db      	mvns	r3, r3
 80075fa:	401a      	ands	r2, r3
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007600:	f7ff f80a 	bl	8006618 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	685a      	ldr	r2, [r3, #4]
 8007608:	4b0a      	ldr	r3, [pc, #40]	@ (8007634 <vPortFree+0xc0>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4413      	add	r3, r2
 800760e:	4a09      	ldr	r2, [pc, #36]	@ (8007634 <vPortFree+0xc0>)
 8007610:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007612:	6938      	ldr	r0, [r7, #16]
 8007614:	f000 f874 	bl	8007700 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007618:	4b07      	ldr	r3, [pc, #28]	@ (8007638 <vPortFree+0xc4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3301      	adds	r3, #1
 800761e:	4a06      	ldr	r2, [pc, #24]	@ (8007638 <vPortFree+0xc4>)
 8007620:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007622:	f7ff f807 	bl	8006634 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007626:	bf00      	nop
 8007628:	3718      	adds	r7, #24
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	200042d0 	.word	0x200042d0
 8007634:	200042c0 	.word	0x200042c0
 8007638:	200042cc 	.word	0x200042cc

0800763c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007642:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007646:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007648:	4b27      	ldr	r3, [pc, #156]	@ (80076e8 <prvHeapInit+0xac>)
 800764a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f003 0307 	and.w	r3, r3, #7
 8007652:	2b00      	cmp	r3, #0
 8007654:	d00c      	beq.n	8007670 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	3307      	adds	r3, #7
 800765a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0307 	bic.w	r3, r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007664:	68ba      	ldr	r2, [r7, #8]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	4a1f      	ldr	r2, [pc, #124]	@ (80076e8 <prvHeapInit+0xac>)
 800766c:	4413      	add	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007674:	4a1d      	ldr	r2, [pc, #116]	@ (80076ec <prvHeapInit+0xb0>)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800767a:	4b1c      	ldr	r3, [pc, #112]	@ (80076ec <prvHeapInit+0xb0>)
 800767c:	2200      	movs	r2, #0
 800767e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	68ba      	ldr	r2, [r7, #8]
 8007684:	4413      	add	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007688:	2208      	movs	r2, #8
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	1a9b      	subs	r3, r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0307 	bic.w	r3, r3, #7
 8007696:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	4a15      	ldr	r2, [pc, #84]	@ (80076f0 <prvHeapInit+0xb4>)
 800769c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800769e:	4b14      	ldr	r3, [pc, #80]	@ (80076f0 <prvHeapInit+0xb4>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076a6:	4b12      	ldr	r3, [pc, #72]	@ (80076f0 <prvHeapInit+0xb4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2200      	movs	r2, #0
 80076ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	1ad2      	subs	r2, r2, r3
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076bc:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <prvHeapInit+0xb4>)
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	4a0a      	ldr	r2, [pc, #40]	@ (80076f4 <prvHeapInit+0xb8>)
 80076ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	4a09      	ldr	r2, [pc, #36]	@ (80076f8 <prvHeapInit+0xbc>)
 80076d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076d4:	4b09      	ldr	r3, [pc, #36]	@ (80076fc <prvHeapInit+0xc0>)
 80076d6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80076da:	601a      	str	r2, [r3, #0]
}
 80076dc:	bf00      	nop
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	200006b4 	.word	0x200006b4
 80076ec:	200042b4 	.word	0x200042b4
 80076f0:	200042bc 	.word	0x200042bc
 80076f4:	200042c4 	.word	0x200042c4
 80076f8:	200042c0 	.word	0x200042c0
 80076fc:	200042d0 	.word	0x200042d0

08007700 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007708:	4b28      	ldr	r3, [pc, #160]	@ (80077ac <prvInsertBlockIntoFreeList+0xac>)
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	e002      	b.n	8007714 <prvInsertBlockIntoFreeList+0x14>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d8f7      	bhi.n	800770e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	4413      	add	r3, r2
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	429a      	cmp	r2, r3
 800772e:	d108      	bne.n	8007742 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	441a      	add	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	441a      	add	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d118      	bne.n	8007788 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	4b15      	ldr	r3, [pc, #84]	@ (80077b0 <prvInsertBlockIntoFreeList+0xb0>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d00d      	beq.n	800777e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	441a      	add	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	601a      	str	r2, [r3, #0]
 800777c:	e008      	b.n	8007790 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800777e:	4b0c      	ldr	r3, [pc, #48]	@ (80077b0 <prvInsertBlockIntoFreeList+0xb0>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	e003      	b.n	8007790 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	429a      	cmp	r2, r3
 8007796:	d002      	beq.n	800779e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	200042b4 	.word	0x200042b4
 80077b0:	200042bc 	.word	0x200042bc

080077b4 <siprintf>:
 80077b4:	b40e      	push	{r1, r2, r3}
 80077b6:	b500      	push	{lr}
 80077b8:	b09c      	sub	sp, #112	@ 0x70
 80077ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80077bc:	9002      	str	r0, [sp, #8]
 80077be:	9006      	str	r0, [sp, #24]
 80077c0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077c4:	4809      	ldr	r0, [pc, #36]	@ (80077ec <siprintf+0x38>)
 80077c6:	9107      	str	r1, [sp, #28]
 80077c8:	9104      	str	r1, [sp, #16]
 80077ca:	4909      	ldr	r1, [pc, #36]	@ (80077f0 <siprintf+0x3c>)
 80077cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077d0:	9105      	str	r1, [sp, #20]
 80077d2:	6800      	ldr	r0, [r0, #0]
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	a902      	add	r1, sp, #8
 80077d8:	f000 fa00 	bl	8007bdc <_svfiprintf_r>
 80077dc:	9b02      	ldr	r3, [sp, #8]
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
 80077e2:	b01c      	add	sp, #112	@ 0x70
 80077e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077e8:	b003      	add	sp, #12
 80077ea:	4770      	bx	lr
 80077ec:	20000010 	.word	0x20000010
 80077f0:	ffff0208 	.word	0xffff0208

080077f4 <memset>:
 80077f4:	4402      	add	r2, r0
 80077f6:	4603      	mov	r3, r0
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d100      	bne.n	80077fe <memset+0xa>
 80077fc:	4770      	bx	lr
 80077fe:	f803 1b01 	strb.w	r1, [r3], #1
 8007802:	e7f9      	b.n	80077f8 <memset+0x4>

08007804 <_reclaim_reent>:
 8007804:	4b29      	ldr	r3, [pc, #164]	@ (80078ac <_reclaim_reent+0xa8>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4283      	cmp	r3, r0
 800780a:	b570      	push	{r4, r5, r6, lr}
 800780c:	4604      	mov	r4, r0
 800780e:	d04b      	beq.n	80078a8 <_reclaim_reent+0xa4>
 8007810:	69c3      	ldr	r3, [r0, #28]
 8007812:	b1ab      	cbz	r3, 8007840 <_reclaim_reent+0x3c>
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	b16b      	cbz	r3, 8007834 <_reclaim_reent+0x30>
 8007818:	2500      	movs	r5, #0
 800781a:	69e3      	ldr	r3, [r4, #28]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	5959      	ldr	r1, [r3, r5]
 8007820:	2900      	cmp	r1, #0
 8007822:	d13b      	bne.n	800789c <_reclaim_reent+0x98>
 8007824:	3504      	adds	r5, #4
 8007826:	2d80      	cmp	r5, #128	@ 0x80
 8007828:	d1f7      	bne.n	800781a <_reclaim_reent+0x16>
 800782a:	69e3      	ldr	r3, [r4, #28]
 800782c:	4620      	mov	r0, r4
 800782e:	68d9      	ldr	r1, [r3, #12]
 8007830:	f000 f880 	bl	8007934 <_free_r>
 8007834:	69e3      	ldr	r3, [r4, #28]
 8007836:	6819      	ldr	r1, [r3, #0]
 8007838:	b111      	cbz	r1, 8007840 <_reclaim_reent+0x3c>
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f87a 	bl	8007934 <_free_r>
 8007840:	6961      	ldr	r1, [r4, #20]
 8007842:	b111      	cbz	r1, 800784a <_reclaim_reent+0x46>
 8007844:	4620      	mov	r0, r4
 8007846:	f000 f875 	bl	8007934 <_free_r>
 800784a:	69e1      	ldr	r1, [r4, #28]
 800784c:	b111      	cbz	r1, 8007854 <_reclaim_reent+0x50>
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f870 	bl	8007934 <_free_r>
 8007854:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007856:	b111      	cbz	r1, 800785e <_reclaim_reent+0x5a>
 8007858:	4620      	mov	r0, r4
 800785a:	f000 f86b 	bl	8007934 <_free_r>
 800785e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007860:	b111      	cbz	r1, 8007868 <_reclaim_reent+0x64>
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f866 	bl	8007934 <_free_r>
 8007868:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800786a:	b111      	cbz	r1, 8007872 <_reclaim_reent+0x6e>
 800786c:	4620      	mov	r0, r4
 800786e:	f000 f861 	bl	8007934 <_free_r>
 8007872:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007874:	b111      	cbz	r1, 800787c <_reclaim_reent+0x78>
 8007876:	4620      	mov	r0, r4
 8007878:	f000 f85c 	bl	8007934 <_free_r>
 800787c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800787e:	b111      	cbz	r1, 8007886 <_reclaim_reent+0x82>
 8007880:	4620      	mov	r0, r4
 8007882:	f000 f857 	bl	8007934 <_free_r>
 8007886:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007888:	b111      	cbz	r1, 8007890 <_reclaim_reent+0x8c>
 800788a:	4620      	mov	r0, r4
 800788c:	f000 f852 	bl	8007934 <_free_r>
 8007890:	6a23      	ldr	r3, [r4, #32]
 8007892:	b14b      	cbz	r3, 80078a8 <_reclaim_reent+0xa4>
 8007894:	4620      	mov	r0, r4
 8007896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800789a:	4718      	bx	r3
 800789c:	680e      	ldr	r6, [r1, #0]
 800789e:	4620      	mov	r0, r4
 80078a0:	f000 f848 	bl	8007934 <_free_r>
 80078a4:	4631      	mov	r1, r6
 80078a6:	e7bb      	b.n	8007820 <_reclaim_reent+0x1c>
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
 80078aa:	bf00      	nop
 80078ac:	20000010 	.word	0x20000010

080078b0 <__errno>:
 80078b0:	4b01      	ldr	r3, [pc, #4]	@ (80078b8 <__errno+0x8>)
 80078b2:	6818      	ldr	r0, [r3, #0]
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000010 	.word	0x20000010

080078bc <__libc_init_array>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	4d0d      	ldr	r5, [pc, #52]	@ (80078f4 <__libc_init_array+0x38>)
 80078c0:	4c0d      	ldr	r4, [pc, #52]	@ (80078f8 <__libc_init_array+0x3c>)
 80078c2:	1b64      	subs	r4, r4, r5
 80078c4:	10a4      	asrs	r4, r4, #2
 80078c6:	2600      	movs	r6, #0
 80078c8:	42a6      	cmp	r6, r4
 80078ca:	d109      	bne.n	80078e0 <__libc_init_array+0x24>
 80078cc:	4d0b      	ldr	r5, [pc, #44]	@ (80078fc <__libc_init_array+0x40>)
 80078ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007900 <__libc_init_array+0x44>)
 80078d0:	f000 fc6e 	bl	80081b0 <_init>
 80078d4:	1b64      	subs	r4, r4, r5
 80078d6:	10a4      	asrs	r4, r4, #2
 80078d8:	2600      	movs	r6, #0
 80078da:	42a6      	cmp	r6, r4
 80078dc:	d105      	bne.n	80078ea <__libc_init_array+0x2e>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e4:	4798      	blx	r3
 80078e6:	3601      	adds	r6, #1
 80078e8:	e7ee      	b.n	80078c8 <__libc_init_array+0xc>
 80078ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ee:	4798      	blx	r3
 80078f0:	3601      	adds	r6, #1
 80078f2:	e7f2      	b.n	80078da <__libc_init_array+0x1e>
 80078f4:	08008320 	.word	0x08008320
 80078f8:	08008320 	.word	0x08008320
 80078fc:	08008320 	.word	0x08008320
 8007900:	08008324 	.word	0x08008324

08007904 <__retarget_lock_acquire_recursive>:
 8007904:	4770      	bx	lr

08007906 <__retarget_lock_release_recursive>:
 8007906:	4770      	bx	lr

08007908 <strcpy>:
 8007908:	4603      	mov	r3, r0
 800790a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800790e:	f803 2b01 	strb.w	r2, [r3], #1
 8007912:	2a00      	cmp	r2, #0
 8007914:	d1f9      	bne.n	800790a <strcpy+0x2>
 8007916:	4770      	bx	lr

08007918 <memcpy>:
 8007918:	440a      	add	r2, r1
 800791a:	4291      	cmp	r1, r2
 800791c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007920:	d100      	bne.n	8007924 <memcpy+0xc>
 8007922:	4770      	bx	lr
 8007924:	b510      	push	{r4, lr}
 8007926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800792e:	4291      	cmp	r1, r2
 8007930:	d1f9      	bne.n	8007926 <memcpy+0xe>
 8007932:	bd10      	pop	{r4, pc}

08007934 <_free_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4605      	mov	r5, r0
 8007938:	2900      	cmp	r1, #0
 800793a:	d041      	beq.n	80079c0 <_free_r+0x8c>
 800793c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007940:	1f0c      	subs	r4, r1, #4
 8007942:	2b00      	cmp	r3, #0
 8007944:	bfb8      	it	lt
 8007946:	18e4      	addlt	r4, r4, r3
 8007948:	f000 f8e0 	bl	8007b0c <__malloc_lock>
 800794c:	4a1d      	ldr	r2, [pc, #116]	@ (80079c4 <_free_r+0x90>)
 800794e:	6813      	ldr	r3, [r2, #0]
 8007950:	b933      	cbnz	r3, 8007960 <_free_r+0x2c>
 8007952:	6063      	str	r3, [r4, #4]
 8007954:	6014      	str	r4, [r2, #0]
 8007956:	4628      	mov	r0, r5
 8007958:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800795c:	f000 b8dc 	b.w	8007b18 <__malloc_unlock>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d908      	bls.n	8007976 <_free_r+0x42>
 8007964:	6820      	ldr	r0, [r4, #0]
 8007966:	1821      	adds	r1, r4, r0
 8007968:	428b      	cmp	r3, r1
 800796a:	bf01      	itttt	eq
 800796c:	6819      	ldreq	r1, [r3, #0]
 800796e:	685b      	ldreq	r3, [r3, #4]
 8007970:	1809      	addeq	r1, r1, r0
 8007972:	6021      	streq	r1, [r4, #0]
 8007974:	e7ed      	b.n	8007952 <_free_r+0x1e>
 8007976:	461a      	mov	r2, r3
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	b10b      	cbz	r3, 8007980 <_free_r+0x4c>
 800797c:	42a3      	cmp	r3, r4
 800797e:	d9fa      	bls.n	8007976 <_free_r+0x42>
 8007980:	6811      	ldr	r1, [r2, #0]
 8007982:	1850      	adds	r0, r2, r1
 8007984:	42a0      	cmp	r0, r4
 8007986:	d10b      	bne.n	80079a0 <_free_r+0x6c>
 8007988:	6820      	ldr	r0, [r4, #0]
 800798a:	4401      	add	r1, r0
 800798c:	1850      	adds	r0, r2, r1
 800798e:	4283      	cmp	r3, r0
 8007990:	6011      	str	r1, [r2, #0]
 8007992:	d1e0      	bne.n	8007956 <_free_r+0x22>
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	6053      	str	r3, [r2, #4]
 800799a:	4408      	add	r0, r1
 800799c:	6010      	str	r0, [r2, #0]
 800799e:	e7da      	b.n	8007956 <_free_r+0x22>
 80079a0:	d902      	bls.n	80079a8 <_free_r+0x74>
 80079a2:	230c      	movs	r3, #12
 80079a4:	602b      	str	r3, [r5, #0]
 80079a6:	e7d6      	b.n	8007956 <_free_r+0x22>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	1821      	adds	r1, r4, r0
 80079ac:	428b      	cmp	r3, r1
 80079ae:	bf04      	itt	eq
 80079b0:	6819      	ldreq	r1, [r3, #0]
 80079b2:	685b      	ldreq	r3, [r3, #4]
 80079b4:	6063      	str	r3, [r4, #4]
 80079b6:	bf04      	itt	eq
 80079b8:	1809      	addeq	r1, r1, r0
 80079ba:	6021      	streq	r1, [r4, #0]
 80079bc:	6054      	str	r4, [r2, #4]
 80079be:	e7ca      	b.n	8007956 <_free_r+0x22>
 80079c0:	bd38      	pop	{r3, r4, r5, pc}
 80079c2:	bf00      	nop
 80079c4:	20004418 	.word	0x20004418

080079c8 <sbrk_aligned>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	4e0f      	ldr	r6, [pc, #60]	@ (8007a08 <sbrk_aligned+0x40>)
 80079cc:	460c      	mov	r4, r1
 80079ce:	6831      	ldr	r1, [r6, #0]
 80079d0:	4605      	mov	r5, r0
 80079d2:	b911      	cbnz	r1, 80079da <sbrk_aligned+0x12>
 80079d4:	f000 fba6 	bl	8008124 <_sbrk_r>
 80079d8:	6030      	str	r0, [r6, #0]
 80079da:	4621      	mov	r1, r4
 80079dc:	4628      	mov	r0, r5
 80079de:	f000 fba1 	bl	8008124 <_sbrk_r>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d103      	bne.n	80079ee <sbrk_aligned+0x26>
 80079e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80079ea:	4620      	mov	r0, r4
 80079ec:	bd70      	pop	{r4, r5, r6, pc}
 80079ee:	1cc4      	adds	r4, r0, #3
 80079f0:	f024 0403 	bic.w	r4, r4, #3
 80079f4:	42a0      	cmp	r0, r4
 80079f6:	d0f8      	beq.n	80079ea <sbrk_aligned+0x22>
 80079f8:	1a21      	subs	r1, r4, r0
 80079fa:	4628      	mov	r0, r5
 80079fc:	f000 fb92 	bl	8008124 <_sbrk_r>
 8007a00:	3001      	adds	r0, #1
 8007a02:	d1f2      	bne.n	80079ea <sbrk_aligned+0x22>
 8007a04:	e7ef      	b.n	80079e6 <sbrk_aligned+0x1e>
 8007a06:	bf00      	nop
 8007a08:	20004414 	.word	0x20004414

08007a0c <_malloc_r>:
 8007a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a10:	1ccd      	adds	r5, r1, #3
 8007a12:	f025 0503 	bic.w	r5, r5, #3
 8007a16:	3508      	adds	r5, #8
 8007a18:	2d0c      	cmp	r5, #12
 8007a1a:	bf38      	it	cc
 8007a1c:	250c      	movcc	r5, #12
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	4606      	mov	r6, r0
 8007a22:	db01      	blt.n	8007a28 <_malloc_r+0x1c>
 8007a24:	42a9      	cmp	r1, r5
 8007a26:	d904      	bls.n	8007a32 <_malloc_r+0x26>
 8007a28:	230c      	movs	r3, #12
 8007a2a:	6033      	str	r3, [r6, #0]
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b08 <_malloc_r+0xfc>
 8007a36:	f000 f869 	bl	8007b0c <__malloc_lock>
 8007a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a3e:	461c      	mov	r4, r3
 8007a40:	bb44      	cbnz	r4, 8007a94 <_malloc_r+0x88>
 8007a42:	4629      	mov	r1, r5
 8007a44:	4630      	mov	r0, r6
 8007a46:	f7ff ffbf 	bl	80079c8 <sbrk_aligned>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	d158      	bne.n	8007b02 <_malloc_r+0xf6>
 8007a50:	f8d8 4000 	ldr.w	r4, [r8]
 8007a54:	4627      	mov	r7, r4
 8007a56:	2f00      	cmp	r7, #0
 8007a58:	d143      	bne.n	8007ae2 <_malloc_r+0xd6>
 8007a5a:	2c00      	cmp	r4, #0
 8007a5c:	d04b      	beq.n	8007af6 <_malloc_r+0xea>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	4639      	mov	r1, r7
 8007a62:	4630      	mov	r0, r6
 8007a64:	eb04 0903 	add.w	r9, r4, r3
 8007a68:	f000 fb5c 	bl	8008124 <_sbrk_r>
 8007a6c:	4581      	cmp	r9, r0
 8007a6e:	d142      	bne.n	8007af6 <_malloc_r+0xea>
 8007a70:	6821      	ldr	r1, [r4, #0]
 8007a72:	1a6d      	subs	r5, r5, r1
 8007a74:	4629      	mov	r1, r5
 8007a76:	4630      	mov	r0, r6
 8007a78:	f7ff ffa6 	bl	80079c8 <sbrk_aligned>
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d03a      	beq.n	8007af6 <_malloc_r+0xea>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	442b      	add	r3, r5
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	f8d8 3000 	ldr.w	r3, [r8]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	bb62      	cbnz	r2, 8007ae8 <_malloc_r+0xdc>
 8007a8e:	f8c8 7000 	str.w	r7, [r8]
 8007a92:	e00f      	b.n	8007ab4 <_malloc_r+0xa8>
 8007a94:	6822      	ldr	r2, [r4, #0]
 8007a96:	1b52      	subs	r2, r2, r5
 8007a98:	d420      	bmi.n	8007adc <_malloc_r+0xd0>
 8007a9a:	2a0b      	cmp	r2, #11
 8007a9c:	d917      	bls.n	8007ace <_malloc_r+0xc2>
 8007a9e:	1961      	adds	r1, r4, r5
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	6025      	str	r5, [r4, #0]
 8007aa4:	bf18      	it	ne
 8007aa6:	6059      	strne	r1, [r3, #4]
 8007aa8:	6863      	ldr	r3, [r4, #4]
 8007aaa:	bf08      	it	eq
 8007aac:	f8c8 1000 	streq.w	r1, [r8]
 8007ab0:	5162      	str	r2, [r4, r5]
 8007ab2:	604b      	str	r3, [r1, #4]
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	f000 f82f 	bl	8007b18 <__malloc_unlock>
 8007aba:	f104 000b 	add.w	r0, r4, #11
 8007abe:	1d23      	adds	r3, r4, #4
 8007ac0:	f020 0007 	bic.w	r0, r0, #7
 8007ac4:	1ac2      	subs	r2, r0, r3
 8007ac6:	bf1c      	itt	ne
 8007ac8:	1a1b      	subne	r3, r3, r0
 8007aca:	50a3      	strne	r3, [r4, r2]
 8007acc:	e7af      	b.n	8007a2e <_malloc_r+0x22>
 8007ace:	6862      	ldr	r2, [r4, #4]
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	bf0c      	ite	eq
 8007ad4:	f8c8 2000 	streq.w	r2, [r8]
 8007ad8:	605a      	strne	r2, [r3, #4]
 8007ada:	e7eb      	b.n	8007ab4 <_malloc_r+0xa8>
 8007adc:	4623      	mov	r3, r4
 8007ade:	6864      	ldr	r4, [r4, #4]
 8007ae0:	e7ae      	b.n	8007a40 <_malloc_r+0x34>
 8007ae2:	463c      	mov	r4, r7
 8007ae4:	687f      	ldr	r7, [r7, #4]
 8007ae6:	e7b6      	b.n	8007a56 <_malloc_r+0x4a>
 8007ae8:	461a      	mov	r2, r3
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d1fb      	bne.n	8007ae8 <_malloc_r+0xdc>
 8007af0:	2300      	movs	r3, #0
 8007af2:	6053      	str	r3, [r2, #4]
 8007af4:	e7de      	b.n	8007ab4 <_malloc_r+0xa8>
 8007af6:	230c      	movs	r3, #12
 8007af8:	6033      	str	r3, [r6, #0]
 8007afa:	4630      	mov	r0, r6
 8007afc:	f000 f80c 	bl	8007b18 <__malloc_unlock>
 8007b00:	e794      	b.n	8007a2c <_malloc_r+0x20>
 8007b02:	6005      	str	r5, [r0, #0]
 8007b04:	e7d6      	b.n	8007ab4 <_malloc_r+0xa8>
 8007b06:	bf00      	nop
 8007b08:	20004418 	.word	0x20004418

08007b0c <__malloc_lock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__malloc_lock+0x8>)
 8007b0e:	f7ff bef9 	b.w	8007904 <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	20004410 	.word	0x20004410

08007b18 <__malloc_unlock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__malloc_unlock+0x8>)
 8007b1a:	f7ff bef4 	b.w	8007906 <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20004410 	.word	0x20004410

08007b24 <__ssputs_r>:
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	688e      	ldr	r6, [r1, #8]
 8007b2a:	461f      	mov	r7, r3
 8007b2c:	42be      	cmp	r6, r7
 8007b2e:	680b      	ldr	r3, [r1, #0]
 8007b30:	4682      	mov	sl, r0
 8007b32:	460c      	mov	r4, r1
 8007b34:	4690      	mov	r8, r2
 8007b36:	d82d      	bhi.n	8007b94 <__ssputs_r+0x70>
 8007b38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b3c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007b40:	d026      	beq.n	8007b90 <__ssputs_r+0x6c>
 8007b42:	6965      	ldr	r5, [r4, #20]
 8007b44:	6909      	ldr	r1, [r1, #16]
 8007b46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b4a:	eba3 0901 	sub.w	r9, r3, r1
 8007b4e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b52:	1c7b      	adds	r3, r7, #1
 8007b54:	444b      	add	r3, r9
 8007b56:	106d      	asrs	r5, r5, #1
 8007b58:	429d      	cmp	r5, r3
 8007b5a:	bf38      	it	cc
 8007b5c:	461d      	movcc	r5, r3
 8007b5e:	0553      	lsls	r3, r2, #21
 8007b60:	d527      	bpl.n	8007bb2 <__ssputs_r+0x8e>
 8007b62:	4629      	mov	r1, r5
 8007b64:	f7ff ff52 	bl	8007a0c <_malloc_r>
 8007b68:	4606      	mov	r6, r0
 8007b6a:	b360      	cbz	r0, 8007bc6 <__ssputs_r+0xa2>
 8007b6c:	6921      	ldr	r1, [r4, #16]
 8007b6e:	464a      	mov	r2, r9
 8007b70:	f7ff fed2 	bl	8007918 <memcpy>
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b7e:	81a3      	strh	r3, [r4, #12]
 8007b80:	6126      	str	r6, [r4, #16]
 8007b82:	6165      	str	r5, [r4, #20]
 8007b84:	444e      	add	r6, r9
 8007b86:	eba5 0509 	sub.w	r5, r5, r9
 8007b8a:	6026      	str	r6, [r4, #0]
 8007b8c:	60a5      	str	r5, [r4, #8]
 8007b8e:	463e      	mov	r6, r7
 8007b90:	42be      	cmp	r6, r7
 8007b92:	d900      	bls.n	8007b96 <__ssputs_r+0x72>
 8007b94:	463e      	mov	r6, r7
 8007b96:	6820      	ldr	r0, [r4, #0]
 8007b98:	4632      	mov	r2, r6
 8007b9a:	4641      	mov	r1, r8
 8007b9c:	f000 faa8 	bl	80080f0 <memmove>
 8007ba0:	68a3      	ldr	r3, [r4, #8]
 8007ba2:	1b9b      	subs	r3, r3, r6
 8007ba4:	60a3      	str	r3, [r4, #8]
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	4433      	add	r3, r6
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	2000      	movs	r0, #0
 8007bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb2:	462a      	mov	r2, r5
 8007bb4:	f000 fac6 	bl	8008144 <_realloc_r>
 8007bb8:	4606      	mov	r6, r0
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d1e0      	bne.n	8007b80 <__ssputs_r+0x5c>
 8007bbe:	6921      	ldr	r1, [r4, #16]
 8007bc0:	4650      	mov	r0, sl
 8007bc2:	f7ff feb7 	bl	8007934 <_free_r>
 8007bc6:	230c      	movs	r3, #12
 8007bc8:	f8ca 3000 	str.w	r3, [sl]
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bd8:	e7e9      	b.n	8007bae <__ssputs_r+0x8a>
	...

08007bdc <_svfiprintf_r>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4698      	mov	r8, r3
 8007be2:	898b      	ldrh	r3, [r1, #12]
 8007be4:	061b      	lsls	r3, r3, #24
 8007be6:	b09d      	sub	sp, #116	@ 0x74
 8007be8:	4607      	mov	r7, r0
 8007bea:	460d      	mov	r5, r1
 8007bec:	4614      	mov	r4, r2
 8007bee:	d510      	bpl.n	8007c12 <_svfiprintf_r+0x36>
 8007bf0:	690b      	ldr	r3, [r1, #16]
 8007bf2:	b973      	cbnz	r3, 8007c12 <_svfiprintf_r+0x36>
 8007bf4:	2140      	movs	r1, #64	@ 0x40
 8007bf6:	f7ff ff09 	bl	8007a0c <_malloc_r>
 8007bfa:	6028      	str	r0, [r5, #0]
 8007bfc:	6128      	str	r0, [r5, #16]
 8007bfe:	b930      	cbnz	r0, 8007c0e <_svfiprintf_r+0x32>
 8007c00:	230c      	movs	r3, #12
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c08:	b01d      	add	sp, #116	@ 0x74
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	2340      	movs	r3, #64	@ 0x40
 8007c10:	616b      	str	r3, [r5, #20]
 8007c12:	2300      	movs	r3, #0
 8007c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c16:	2320      	movs	r3, #32
 8007c18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c20:	2330      	movs	r3, #48	@ 0x30
 8007c22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007dc0 <_svfiprintf_r+0x1e4>
 8007c26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c2a:	f04f 0901 	mov.w	r9, #1
 8007c2e:	4623      	mov	r3, r4
 8007c30:	469a      	mov	sl, r3
 8007c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c36:	b10a      	cbz	r2, 8007c3c <_svfiprintf_r+0x60>
 8007c38:	2a25      	cmp	r2, #37	@ 0x25
 8007c3a:	d1f9      	bne.n	8007c30 <_svfiprintf_r+0x54>
 8007c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8007c40:	d00b      	beq.n	8007c5a <_svfiprintf_r+0x7e>
 8007c42:	465b      	mov	r3, fp
 8007c44:	4622      	mov	r2, r4
 8007c46:	4629      	mov	r1, r5
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f7ff ff6b 	bl	8007b24 <__ssputs_r>
 8007c4e:	3001      	adds	r0, #1
 8007c50:	f000 80a7 	beq.w	8007da2 <_svfiprintf_r+0x1c6>
 8007c54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c56:	445a      	add	r2, fp
 8007c58:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 809f 	beq.w	8007da2 <_svfiprintf_r+0x1c6>
 8007c64:	2300      	movs	r3, #0
 8007c66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c6e:	f10a 0a01 	add.w	sl, sl, #1
 8007c72:	9304      	str	r3, [sp, #16]
 8007c74:	9307      	str	r3, [sp, #28]
 8007c76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c7a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c7c:	4654      	mov	r4, sl
 8007c7e:	2205      	movs	r2, #5
 8007c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c84:	484e      	ldr	r0, [pc, #312]	@ (8007dc0 <_svfiprintf_r+0x1e4>)
 8007c86:	f7f8 faab 	bl	80001e0 <memchr>
 8007c8a:	9a04      	ldr	r2, [sp, #16]
 8007c8c:	b9d8      	cbnz	r0, 8007cc6 <_svfiprintf_r+0xea>
 8007c8e:	06d0      	lsls	r0, r2, #27
 8007c90:	bf44      	itt	mi
 8007c92:	2320      	movmi	r3, #32
 8007c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c98:	0711      	lsls	r1, r2, #28
 8007c9a:	bf44      	itt	mi
 8007c9c:	232b      	movmi	r3, #43	@ 0x2b
 8007c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ca6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca8:	d015      	beq.n	8007cd6 <_svfiprintf_r+0xfa>
 8007caa:	9a07      	ldr	r2, [sp, #28]
 8007cac:	4654      	mov	r4, sl
 8007cae:	2000      	movs	r0, #0
 8007cb0:	f04f 0c0a 	mov.w	ip, #10
 8007cb4:	4621      	mov	r1, r4
 8007cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cba:	3b30      	subs	r3, #48	@ 0x30
 8007cbc:	2b09      	cmp	r3, #9
 8007cbe:	d94b      	bls.n	8007d58 <_svfiprintf_r+0x17c>
 8007cc0:	b1b0      	cbz	r0, 8007cf0 <_svfiprintf_r+0x114>
 8007cc2:	9207      	str	r2, [sp, #28]
 8007cc4:	e014      	b.n	8007cf0 <_svfiprintf_r+0x114>
 8007cc6:	eba0 0308 	sub.w	r3, r0, r8
 8007cca:	fa09 f303 	lsl.w	r3, r9, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	46a2      	mov	sl, r4
 8007cd4:	e7d2      	b.n	8007c7c <_svfiprintf_r+0xa0>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	1d19      	adds	r1, r3, #4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	9103      	str	r1, [sp, #12]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	bfbb      	ittet	lt
 8007ce2:	425b      	neglt	r3, r3
 8007ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8007ce8:	9307      	strge	r3, [sp, #28]
 8007cea:	9307      	strlt	r3, [sp, #28]
 8007cec:	bfb8      	it	lt
 8007cee:	9204      	strlt	r2, [sp, #16]
 8007cf0:	7823      	ldrb	r3, [r4, #0]
 8007cf2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cf4:	d10a      	bne.n	8007d0c <_svfiprintf_r+0x130>
 8007cf6:	7863      	ldrb	r3, [r4, #1]
 8007cf8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cfa:	d132      	bne.n	8007d62 <_svfiprintf_r+0x186>
 8007cfc:	9b03      	ldr	r3, [sp, #12]
 8007cfe:	1d1a      	adds	r2, r3, #4
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	9203      	str	r2, [sp, #12]
 8007d04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d08:	3402      	adds	r4, #2
 8007d0a:	9305      	str	r3, [sp, #20]
 8007d0c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007dd0 <_svfiprintf_r+0x1f4>
 8007d10:	7821      	ldrb	r1, [r4, #0]
 8007d12:	2203      	movs	r2, #3
 8007d14:	4650      	mov	r0, sl
 8007d16:	f7f8 fa63 	bl	80001e0 <memchr>
 8007d1a:	b138      	cbz	r0, 8007d2c <_svfiprintf_r+0x150>
 8007d1c:	9b04      	ldr	r3, [sp, #16]
 8007d1e:	eba0 000a 	sub.w	r0, r0, sl
 8007d22:	2240      	movs	r2, #64	@ 0x40
 8007d24:	4082      	lsls	r2, r0
 8007d26:	4313      	orrs	r3, r2
 8007d28:	3401      	adds	r4, #1
 8007d2a:	9304      	str	r3, [sp, #16]
 8007d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d30:	4824      	ldr	r0, [pc, #144]	@ (8007dc4 <_svfiprintf_r+0x1e8>)
 8007d32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d36:	2206      	movs	r2, #6
 8007d38:	f7f8 fa52 	bl	80001e0 <memchr>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d036      	beq.n	8007dae <_svfiprintf_r+0x1d2>
 8007d40:	4b21      	ldr	r3, [pc, #132]	@ (8007dc8 <_svfiprintf_r+0x1ec>)
 8007d42:	bb1b      	cbnz	r3, 8007d8c <_svfiprintf_r+0x1b0>
 8007d44:	9b03      	ldr	r3, [sp, #12]
 8007d46:	3307      	adds	r3, #7
 8007d48:	f023 0307 	bic.w	r3, r3, #7
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	9303      	str	r3, [sp, #12]
 8007d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d52:	4433      	add	r3, r6
 8007d54:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d56:	e76a      	b.n	8007c2e <_svfiprintf_r+0x52>
 8007d58:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d5c:	460c      	mov	r4, r1
 8007d5e:	2001      	movs	r0, #1
 8007d60:	e7a8      	b.n	8007cb4 <_svfiprintf_r+0xd8>
 8007d62:	2300      	movs	r3, #0
 8007d64:	3401      	adds	r4, #1
 8007d66:	9305      	str	r3, [sp, #20]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	f04f 0c0a 	mov.w	ip, #10
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d74:	3a30      	subs	r2, #48	@ 0x30
 8007d76:	2a09      	cmp	r2, #9
 8007d78:	d903      	bls.n	8007d82 <_svfiprintf_r+0x1a6>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0c6      	beq.n	8007d0c <_svfiprintf_r+0x130>
 8007d7e:	9105      	str	r1, [sp, #20]
 8007d80:	e7c4      	b.n	8007d0c <_svfiprintf_r+0x130>
 8007d82:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d86:	4604      	mov	r4, r0
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e7f0      	b.n	8007d6e <_svfiprintf_r+0x192>
 8007d8c:	ab03      	add	r3, sp, #12
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	462a      	mov	r2, r5
 8007d92:	4b0e      	ldr	r3, [pc, #56]	@ (8007dcc <_svfiprintf_r+0x1f0>)
 8007d94:	a904      	add	r1, sp, #16
 8007d96:	4638      	mov	r0, r7
 8007d98:	f3af 8000 	nop.w
 8007d9c:	1c42      	adds	r2, r0, #1
 8007d9e:	4606      	mov	r6, r0
 8007da0:	d1d6      	bne.n	8007d50 <_svfiprintf_r+0x174>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	065b      	lsls	r3, r3, #25
 8007da6:	f53f af2d 	bmi.w	8007c04 <_svfiprintf_r+0x28>
 8007daa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dac:	e72c      	b.n	8007c08 <_svfiprintf_r+0x2c>
 8007dae:	ab03      	add	r3, sp, #12
 8007db0:	9300      	str	r3, [sp, #0]
 8007db2:	462a      	mov	r2, r5
 8007db4:	4b05      	ldr	r3, [pc, #20]	@ (8007dcc <_svfiprintf_r+0x1f0>)
 8007db6:	a904      	add	r1, sp, #16
 8007db8:	4638      	mov	r0, r7
 8007dba:	f000 f879 	bl	8007eb0 <_printf_i>
 8007dbe:	e7ed      	b.n	8007d9c <_svfiprintf_r+0x1c0>
 8007dc0:	080082e4 	.word	0x080082e4
 8007dc4:	080082ee 	.word	0x080082ee
 8007dc8:	00000000 	.word	0x00000000
 8007dcc:	08007b25 	.word	0x08007b25
 8007dd0:	080082ea 	.word	0x080082ea

08007dd4 <_printf_common>:
 8007dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd8:	4616      	mov	r6, r2
 8007dda:	4698      	mov	r8, r3
 8007ddc:	688a      	ldr	r2, [r1, #8]
 8007dde:	690b      	ldr	r3, [r1, #16]
 8007de0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007de4:	4293      	cmp	r3, r2
 8007de6:	bfb8      	it	lt
 8007de8:	4613      	movlt	r3, r2
 8007dea:	6033      	str	r3, [r6, #0]
 8007dec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007df0:	4607      	mov	r7, r0
 8007df2:	460c      	mov	r4, r1
 8007df4:	b10a      	cbz	r2, 8007dfa <_printf_common+0x26>
 8007df6:	3301      	adds	r3, #1
 8007df8:	6033      	str	r3, [r6, #0]
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	0699      	lsls	r1, r3, #26
 8007dfe:	bf42      	ittt	mi
 8007e00:	6833      	ldrmi	r3, [r6, #0]
 8007e02:	3302      	addmi	r3, #2
 8007e04:	6033      	strmi	r3, [r6, #0]
 8007e06:	6825      	ldr	r5, [r4, #0]
 8007e08:	f015 0506 	ands.w	r5, r5, #6
 8007e0c:	d106      	bne.n	8007e1c <_printf_common+0x48>
 8007e0e:	f104 0a19 	add.w	sl, r4, #25
 8007e12:	68e3      	ldr	r3, [r4, #12]
 8007e14:	6832      	ldr	r2, [r6, #0]
 8007e16:	1a9b      	subs	r3, r3, r2
 8007e18:	42ab      	cmp	r3, r5
 8007e1a:	dc26      	bgt.n	8007e6a <_printf_common+0x96>
 8007e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e20:	6822      	ldr	r2, [r4, #0]
 8007e22:	3b00      	subs	r3, #0
 8007e24:	bf18      	it	ne
 8007e26:	2301      	movne	r3, #1
 8007e28:	0692      	lsls	r2, r2, #26
 8007e2a:	d42b      	bmi.n	8007e84 <_printf_common+0xb0>
 8007e2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e30:	4641      	mov	r1, r8
 8007e32:	4638      	mov	r0, r7
 8007e34:	47c8      	blx	r9
 8007e36:	3001      	adds	r0, #1
 8007e38:	d01e      	beq.n	8007e78 <_printf_common+0xa4>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	6922      	ldr	r2, [r4, #16]
 8007e3e:	f003 0306 	and.w	r3, r3, #6
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	bf02      	ittt	eq
 8007e46:	68e5      	ldreq	r5, [r4, #12]
 8007e48:	6833      	ldreq	r3, [r6, #0]
 8007e4a:	1aed      	subeq	r5, r5, r3
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	bf0c      	ite	eq
 8007e50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e54:	2500      	movne	r5, #0
 8007e56:	4293      	cmp	r3, r2
 8007e58:	bfc4      	itt	gt
 8007e5a:	1a9b      	subgt	r3, r3, r2
 8007e5c:	18ed      	addgt	r5, r5, r3
 8007e5e:	2600      	movs	r6, #0
 8007e60:	341a      	adds	r4, #26
 8007e62:	42b5      	cmp	r5, r6
 8007e64:	d11a      	bne.n	8007e9c <_printf_common+0xc8>
 8007e66:	2000      	movs	r0, #0
 8007e68:	e008      	b.n	8007e7c <_printf_common+0xa8>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	4641      	mov	r1, r8
 8007e70:	4638      	mov	r0, r7
 8007e72:	47c8      	blx	r9
 8007e74:	3001      	adds	r0, #1
 8007e76:	d103      	bne.n	8007e80 <_printf_common+0xac>
 8007e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e80:	3501      	adds	r5, #1
 8007e82:	e7c6      	b.n	8007e12 <_printf_common+0x3e>
 8007e84:	18e1      	adds	r1, r4, r3
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	2030      	movs	r0, #48	@ 0x30
 8007e8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e8e:	4422      	add	r2, r4
 8007e90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e98:	3302      	adds	r3, #2
 8007e9a:	e7c7      	b.n	8007e2c <_printf_common+0x58>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	4641      	mov	r1, r8
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	47c8      	blx	r9
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d0e6      	beq.n	8007e78 <_printf_common+0xa4>
 8007eaa:	3601      	adds	r6, #1
 8007eac:	e7d9      	b.n	8007e62 <_printf_common+0x8e>
	...

08007eb0 <_printf_i>:
 8007eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007eb4:	7e0f      	ldrb	r7, [r1, #24]
 8007eb6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007eb8:	2f78      	cmp	r7, #120	@ 0x78
 8007eba:	4691      	mov	r9, r2
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	469a      	mov	sl, r3
 8007ec2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ec6:	d807      	bhi.n	8007ed8 <_printf_i+0x28>
 8007ec8:	2f62      	cmp	r7, #98	@ 0x62
 8007eca:	d80a      	bhi.n	8007ee2 <_printf_i+0x32>
 8007ecc:	2f00      	cmp	r7, #0
 8007ece:	f000 80d2 	beq.w	8008076 <_printf_i+0x1c6>
 8007ed2:	2f58      	cmp	r7, #88	@ 0x58
 8007ed4:	f000 80b9 	beq.w	800804a <_printf_i+0x19a>
 8007ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007edc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ee0:	e03a      	b.n	8007f58 <_printf_i+0xa8>
 8007ee2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ee6:	2b15      	cmp	r3, #21
 8007ee8:	d8f6      	bhi.n	8007ed8 <_printf_i+0x28>
 8007eea:	a101      	add	r1, pc, #4	@ (adr r1, 8007ef0 <_printf_i+0x40>)
 8007eec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ef0:	08007f49 	.word	0x08007f49
 8007ef4:	08007f5d 	.word	0x08007f5d
 8007ef8:	08007ed9 	.word	0x08007ed9
 8007efc:	08007ed9 	.word	0x08007ed9
 8007f00:	08007ed9 	.word	0x08007ed9
 8007f04:	08007ed9 	.word	0x08007ed9
 8007f08:	08007f5d 	.word	0x08007f5d
 8007f0c:	08007ed9 	.word	0x08007ed9
 8007f10:	08007ed9 	.word	0x08007ed9
 8007f14:	08007ed9 	.word	0x08007ed9
 8007f18:	08007ed9 	.word	0x08007ed9
 8007f1c:	0800805d 	.word	0x0800805d
 8007f20:	08007f87 	.word	0x08007f87
 8007f24:	08008017 	.word	0x08008017
 8007f28:	08007ed9 	.word	0x08007ed9
 8007f2c:	08007ed9 	.word	0x08007ed9
 8007f30:	0800807f 	.word	0x0800807f
 8007f34:	08007ed9 	.word	0x08007ed9
 8007f38:	08007f87 	.word	0x08007f87
 8007f3c:	08007ed9 	.word	0x08007ed9
 8007f40:	08007ed9 	.word	0x08007ed9
 8007f44:	0800801f 	.word	0x0800801f
 8007f48:	6833      	ldr	r3, [r6, #0]
 8007f4a:	1d1a      	adds	r2, r3, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	6032      	str	r2, [r6, #0]
 8007f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e09d      	b.n	8008098 <_printf_i+0x1e8>
 8007f5c:	6833      	ldr	r3, [r6, #0]
 8007f5e:	6820      	ldr	r0, [r4, #0]
 8007f60:	1d19      	adds	r1, r3, #4
 8007f62:	6031      	str	r1, [r6, #0]
 8007f64:	0606      	lsls	r6, r0, #24
 8007f66:	d501      	bpl.n	8007f6c <_printf_i+0xbc>
 8007f68:	681d      	ldr	r5, [r3, #0]
 8007f6a:	e003      	b.n	8007f74 <_printf_i+0xc4>
 8007f6c:	0645      	lsls	r5, r0, #25
 8007f6e:	d5fb      	bpl.n	8007f68 <_printf_i+0xb8>
 8007f70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f74:	2d00      	cmp	r5, #0
 8007f76:	da03      	bge.n	8007f80 <_printf_i+0xd0>
 8007f78:	232d      	movs	r3, #45	@ 0x2d
 8007f7a:	426d      	negs	r5, r5
 8007f7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f80:	4859      	ldr	r0, [pc, #356]	@ (80080e8 <_printf_i+0x238>)
 8007f82:	230a      	movs	r3, #10
 8007f84:	e011      	b.n	8007faa <_printf_i+0xfa>
 8007f86:	6821      	ldr	r1, [r4, #0]
 8007f88:	6833      	ldr	r3, [r6, #0]
 8007f8a:	0608      	lsls	r0, r1, #24
 8007f8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f90:	d402      	bmi.n	8007f98 <_printf_i+0xe8>
 8007f92:	0649      	lsls	r1, r1, #25
 8007f94:	bf48      	it	mi
 8007f96:	b2ad      	uxthmi	r5, r5
 8007f98:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f9a:	4853      	ldr	r0, [pc, #332]	@ (80080e8 <_printf_i+0x238>)
 8007f9c:	6033      	str	r3, [r6, #0]
 8007f9e:	bf14      	ite	ne
 8007fa0:	230a      	movne	r3, #10
 8007fa2:	2308      	moveq	r3, #8
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007faa:	6866      	ldr	r6, [r4, #4]
 8007fac:	60a6      	str	r6, [r4, #8]
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	bfa2      	ittt	ge
 8007fb2:	6821      	ldrge	r1, [r4, #0]
 8007fb4:	f021 0104 	bicge.w	r1, r1, #4
 8007fb8:	6021      	strge	r1, [r4, #0]
 8007fba:	b90d      	cbnz	r5, 8007fc0 <_printf_i+0x110>
 8007fbc:	2e00      	cmp	r6, #0
 8007fbe:	d04b      	beq.n	8008058 <_printf_i+0x1a8>
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fc6:	fb03 5711 	mls	r7, r3, r1, r5
 8007fca:	5dc7      	ldrb	r7, [r0, r7]
 8007fcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fd0:	462f      	mov	r7, r5
 8007fd2:	42bb      	cmp	r3, r7
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	d9f4      	bls.n	8007fc2 <_printf_i+0x112>
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d10b      	bne.n	8007ff4 <_printf_i+0x144>
 8007fdc:	6823      	ldr	r3, [r4, #0]
 8007fde:	07df      	lsls	r7, r3, #31
 8007fe0:	d508      	bpl.n	8007ff4 <_printf_i+0x144>
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	6861      	ldr	r1, [r4, #4]
 8007fe6:	4299      	cmp	r1, r3
 8007fe8:	bfde      	ittt	le
 8007fea:	2330      	movle	r3, #48	@ 0x30
 8007fec:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ff0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ff4:	1b92      	subs	r2, r2, r6
 8007ff6:	6122      	str	r2, [r4, #16]
 8007ff8:	f8cd a000 	str.w	sl, [sp]
 8007ffc:	464b      	mov	r3, r9
 8007ffe:	aa03      	add	r2, sp, #12
 8008000:	4621      	mov	r1, r4
 8008002:	4640      	mov	r0, r8
 8008004:	f7ff fee6 	bl	8007dd4 <_printf_common>
 8008008:	3001      	adds	r0, #1
 800800a:	d14a      	bne.n	80080a2 <_printf_i+0x1f2>
 800800c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008010:	b004      	add	sp, #16
 8008012:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008016:	6823      	ldr	r3, [r4, #0]
 8008018:	f043 0320 	orr.w	r3, r3, #32
 800801c:	6023      	str	r3, [r4, #0]
 800801e:	4833      	ldr	r0, [pc, #204]	@ (80080ec <_printf_i+0x23c>)
 8008020:	2778      	movs	r7, #120	@ 0x78
 8008022:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	6831      	ldr	r1, [r6, #0]
 800802a:	061f      	lsls	r7, r3, #24
 800802c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008030:	d402      	bmi.n	8008038 <_printf_i+0x188>
 8008032:	065f      	lsls	r7, r3, #25
 8008034:	bf48      	it	mi
 8008036:	b2ad      	uxthmi	r5, r5
 8008038:	6031      	str	r1, [r6, #0]
 800803a:	07d9      	lsls	r1, r3, #31
 800803c:	bf44      	itt	mi
 800803e:	f043 0320 	orrmi.w	r3, r3, #32
 8008042:	6023      	strmi	r3, [r4, #0]
 8008044:	b11d      	cbz	r5, 800804e <_printf_i+0x19e>
 8008046:	2310      	movs	r3, #16
 8008048:	e7ac      	b.n	8007fa4 <_printf_i+0xf4>
 800804a:	4827      	ldr	r0, [pc, #156]	@ (80080e8 <_printf_i+0x238>)
 800804c:	e7e9      	b.n	8008022 <_printf_i+0x172>
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	f023 0320 	bic.w	r3, r3, #32
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	e7f6      	b.n	8008046 <_printf_i+0x196>
 8008058:	4616      	mov	r6, r2
 800805a:	e7bd      	b.n	8007fd8 <_printf_i+0x128>
 800805c:	6833      	ldr	r3, [r6, #0]
 800805e:	6825      	ldr	r5, [r4, #0]
 8008060:	6961      	ldr	r1, [r4, #20]
 8008062:	1d18      	adds	r0, r3, #4
 8008064:	6030      	str	r0, [r6, #0]
 8008066:	062e      	lsls	r6, r5, #24
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	d501      	bpl.n	8008070 <_printf_i+0x1c0>
 800806c:	6019      	str	r1, [r3, #0]
 800806e:	e002      	b.n	8008076 <_printf_i+0x1c6>
 8008070:	0668      	lsls	r0, r5, #25
 8008072:	d5fb      	bpl.n	800806c <_printf_i+0x1bc>
 8008074:	8019      	strh	r1, [r3, #0]
 8008076:	2300      	movs	r3, #0
 8008078:	6123      	str	r3, [r4, #16]
 800807a:	4616      	mov	r6, r2
 800807c:	e7bc      	b.n	8007ff8 <_printf_i+0x148>
 800807e:	6833      	ldr	r3, [r6, #0]
 8008080:	1d1a      	adds	r2, r3, #4
 8008082:	6032      	str	r2, [r6, #0]
 8008084:	681e      	ldr	r6, [r3, #0]
 8008086:	6862      	ldr	r2, [r4, #4]
 8008088:	2100      	movs	r1, #0
 800808a:	4630      	mov	r0, r6
 800808c:	f7f8 f8a8 	bl	80001e0 <memchr>
 8008090:	b108      	cbz	r0, 8008096 <_printf_i+0x1e6>
 8008092:	1b80      	subs	r0, r0, r6
 8008094:	6060      	str	r0, [r4, #4]
 8008096:	6863      	ldr	r3, [r4, #4]
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	2300      	movs	r3, #0
 800809c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80080a0:	e7aa      	b.n	8007ff8 <_printf_i+0x148>
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	4632      	mov	r2, r6
 80080a6:	4649      	mov	r1, r9
 80080a8:	4640      	mov	r0, r8
 80080aa:	47d0      	blx	sl
 80080ac:	3001      	adds	r0, #1
 80080ae:	d0ad      	beq.n	800800c <_printf_i+0x15c>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	079b      	lsls	r3, r3, #30
 80080b4:	d413      	bmi.n	80080de <_printf_i+0x22e>
 80080b6:	68e0      	ldr	r0, [r4, #12]
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	4298      	cmp	r0, r3
 80080bc:	bfb8      	it	lt
 80080be:	4618      	movlt	r0, r3
 80080c0:	e7a6      	b.n	8008010 <_printf_i+0x160>
 80080c2:	2301      	movs	r3, #1
 80080c4:	4632      	mov	r2, r6
 80080c6:	4649      	mov	r1, r9
 80080c8:	4640      	mov	r0, r8
 80080ca:	47d0      	blx	sl
 80080cc:	3001      	adds	r0, #1
 80080ce:	d09d      	beq.n	800800c <_printf_i+0x15c>
 80080d0:	3501      	adds	r5, #1
 80080d2:	68e3      	ldr	r3, [r4, #12]
 80080d4:	9903      	ldr	r1, [sp, #12]
 80080d6:	1a5b      	subs	r3, r3, r1
 80080d8:	42ab      	cmp	r3, r5
 80080da:	dcf2      	bgt.n	80080c2 <_printf_i+0x212>
 80080dc:	e7eb      	b.n	80080b6 <_printf_i+0x206>
 80080de:	2500      	movs	r5, #0
 80080e0:	f104 0619 	add.w	r6, r4, #25
 80080e4:	e7f5      	b.n	80080d2 <_printf_i+0x222>
 80080e6:	bf00      	nop
 80080e8:	080082f5 	.word	0x080082f5
 80080ec:	08008306 	.word	0x08008306

080080f0 <memmove>:
 80080f0:	4288      	cmp	r0, r1
 80080f2:	b510      	push	{r4, lr}
 80080f4:	eb01 0402 	add.w	r4, r1, r2
 80080f8:	d902      	bls.n	8008100 <memmove+0x10>
 80080fa:	4284      	cmp	r4, r0
 80080fc:	4623      	mov	r3, r4
 80080fe:	d807      	bhi.n	8008110 <memmove+0x20>
 8008100:	1e43      	subs	r3, r0, #1
 8008102:	42a1      	cmp	r1, r4
 8008104:	d008      	beq.n	8008118 <memmove+0x28>
 8008106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800810a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800810e:	e7f8      	b.n	8008102 <memmove+0x12>
 8008110:	4402      	add	r2, r0
 8008112:	4601      	mov	r1, r0
 8008114:	428a      	cmp	r2, r1
 8008116:	d100      	bne.n	800811a <memmove+0x2a>
 8008118:	bd10      	pop	{r4, pc}
 800811a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800811e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008122:	e7f7      	b.n	8008114 <memmove+0x24>

08008124 <_sbrk_r>:
 8008124:	b538      	push	{r3, r4, r5, lr}
 8008126:	4d06      	ldr	r5, [pc, #24]	@ (8008140 <_sbrk_r+0x1c>)
 8008128:	2300      	movs	r3, #0
 800812a:	4604      	mov	r4, r0
 800812c:	4608      	mov	r0, r1
 800812e:	602b      	str	r3, [r5, #0]
 8008130:	f7f9 ffc0 	bl	80020b4 <_sbrk>
 8008134:	1c43      	adds	r3, r0, #1
 8008136:	d102      	bne.n	800813e <_sbrk_r+0x1a>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	b103      	cbz	r3, 800813e <_sbrk_r+0x1a>
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	2000440c 	.word	0x2000440c

08008144 <_realloc_r>:
 8008144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008148:	4680      	mov	r8, r0
 800814a:	4615      	mov	r5, r2
 800814c:	460c      	mov	r4, r1
 800814e:	b921      	cbnz	r1, 800815a <_realloc_r+0x16>
 8008150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008154:	4611      	mov	r1, r2
 8008156:	f7ff bc59 	b.w	8007a0c <_malloc_r>
 800815a:	b92a      	cbnz	r2, 8008168 <_realloc_r+0x24>
 800815c:	f7ff fbea 	bl	8007934 <_free_r>
 8008160:	2400      	movs	r4, #0
 8008162:	4620      	mov	r0, r4
 8008164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008168:	f000 f81a 	bl	80081a0 <_malloc_usable_size_r>
 800816c:	4285      	cmp	r5, r0
 800816e:	4606      	mov	r6, r0
 8008170:	d802      	bhi.n	8008178 <_realloc_r+0x34>
 8008172:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008176:	d8f4      	bhi.n	8008162 <_realloc_r+0x1e>
 8008178:	4629      	mov	r1, r5
 800817a:	4640      	mov	r0, r8
 800817c:	f7ff fc46 	bl	8007a0c <_malloc_r>
 8008180:	4607      	mov	r7, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d0ec      	beq.n	8008160 <_realloc_r+0x1c>
 8008186:	42b5      	cmp	r5, r6
 8008188:	462a      	mov	r2, r5
 800818a:	4621      	mov	r1, r4
 800818c:	bf28      	it	cs
 800818e:	4632      	movcs	r2, r6
 8008190:	f7ff fbc2 	bl	8007918 <memcpy>
 8008194:	4621      	mov	r1, r4
 8008196:	4640      	mov	r0, r8
 8008198:	f7ff fbcc 	bl	8007934 <_free_r>
 800819c:	463c      	mov	r4, r7
 800819e:	e7e0      	b.n	8008162 <_realloc_r+0x1e>

080081a0 <_malloc_usable_size_r>:
 80081a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a4:	1f18      	subs	r0, r3, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfbc      	itt	lt
 80081aa:	580b      	ldrlt	r3, [r1, r0]
 80081ac:	18c0      	addlt	r0, r0, r3
 80081ae:	4770      	bx	lr

080081b0 <_init>:
 80081b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081b2:	bf00      	nop
 80081b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b6:	bc08      	pop	{r3}
 80081b8:	469e      	mov	lr, r3
 80081ba:	4770      	bx	lr

080081bc <_fini>:
 80081bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081be:	bf00      	nop
 80081c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081c2:	bc08      	pop	{r3}
 80081c4:	469e      	mov	lr, r3
 80081c6:	4770      	bx	lr
